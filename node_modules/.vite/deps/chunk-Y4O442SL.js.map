{
  "version": 3,
  "sources": ["../../@ui5/webcomponents-base/src/util/formatMessage.ts", "../../@ui5/webcomponents-base/src/i18nBundle.ts", "../../@ui5/webcomponents-base/src/asset-registries/util/IconCollectionsAlias.ts", "../../@ui5/webcomponents-base/src/asset-registries/util/IconCollectionsByTheme.ts", "../../@ui5/webcomponents-base/src/config/Icons.ts", "../../@ui5/webcomponents-base/src/asset-registries/util/getIconCollectionByTheme.ts", "../../@ui5/webcomponents-base/src/asset-registries/Icons.ts"],
  "sourcesContent": ["const messageFormatRegEX = /('')|'([^']+(?:''[^']*)*)(?:'|$)|\\{([0-9]+(?:\\s*,[^{}]*)?)\\}|[{}]/g;\n\nconst formatMessage = (text: string, values: Array<number | string>) => {\n\tvalues = values || [];\n\n\treturn text.replace(messageFormatRegEX, ($0, $1, $2, $3: string | number, offset: number) => {\n\t\tif ($1) {\n\t\t\treturn '\\''; /* eslint-disable-line */\n\t\t}\n\n\t\tif ($2) {\n\t\t\treturn $2.replace(/''/g, '\\''); /* eslint-disable-line */\n\t\t}\n\n\t\tif ($3) {\n\t\t\tconst ind = typeof $3 === \"string\" ? parseInt($3) : $3;\n\t\t\treturn String(values[ind]);\n\t\t}\n\n\t\tthrow new Error(`[i18n]: pattern syntax error at pos ${offset}`);\n\t});\n};\n\nexport default formatMessage;\n", "import { registerI18nLoader, fetchI18nBundle, getI18nBundleData } from \"./asset-registries/i18n.js\";\nimport formatMessage from \"./util/formatMessage.js\";\n\nconst I18nBundleInstances = new Map<string, I18nBundle>();\n\nlet customGetI18nBundle: I18nBundleGetter;\n\ntype I18nText = {\n\tkey: string,\n\tdefaultText: string,\n};\n\ntype I18nBundleGetter = (packageName: string) => Promise<I18nBundle>;\n\n/**\n * @class\n * @public\n */\nclass I18nBundle {\n\tpackageName: string;\n\n\tconstructor(packageName: string) {\n\t\tthis.packageName = packageName;\n\t}\n\n\t/**\n\t * Returns a text in the currently loaded language\n\t *\n\t * @public\n\t * @param textObj key/defaultText pair or just the key\n\t * @param params Values for the placeholders\n\t */\n\tgetText(textObj: I18nText | string, ...params: Array<number | string>): string {\n\t\tif (typeof textObj === \"string\") {\n\t\t\ttextObj = { key: textObj, defaultText: textObj };\n\t\t}\n\n\t\tif (!textObj || !textObj.key) {\n\t\t\treturn \"\";\n\t\t}\n\n\t\tconst bundle = getI18nBundleData(this.packageName);\n\t\tif (bundle && !bundle[textObj.key]) {\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.warn(`Key ${textObj.key} not found in the i18n bundle, the default text will be used`);\n\t\t}\n\t\tconst messageText = bundle && bundle[textObj.key] ? bundle[textObj.key] : (textObj.defaultText || textObj.key);\n\n\t\treturn formatMessage(messageText, params);\n\t}\n}\n\n/**\n * Returns the I18nBundle instance for the given package synchronously.\n *\n * @public\n * @param packageName\n */\nconst getI18nBundleSync = (packageName: string): I18nBundle => {\n\tif (I18nBundleInstances.has(packageName)) {\n\t\treturn I18nBundleInstances.get(packageName)!;\n\t}\n\n\tconst i18nBundle = new I18nBundle(packageName);\n\tI18nBundleInstances.set(packageName, i18nBundle);\n\treturn i18nBundle;\n};\n\n/**\n * Fetches and returns the I18nBundle instance for the given package.\n *\n * @public\n * @param packageName\n */\nconst getI18nBundle = async (packageName: string): Promise<I18nBundle> => {\n\tif (customGetI18nBundle) {\n\t\treturn customGetI18nBundle(packageName);\n\t}\n\n\tawait fetchI18nBundle(packageName);\n\treturn getI18nBundleSync(packageName);\n};\n\n/**\n * Allows developers to provide a custom getI18nBundle implementation\n * If this function is called, the custom implementation will be used for all components and will completely\n * replace the default implementation.\n *\n * @public\n * @param customGet the function to use instead of the standard getI18nBundle implementation\n */\nconst registerCustomI18nBundleGetter = (customGet: I18nBundleGetter): void => {\n\tcustomGetI18nBundle = customGet;\n};\n\nexport default I18nBundle;\n\nexport {\n\tregisterI18nLoader,\n\tgetI18nBundle,\n\tregisterCustomI18nBundleGetter,\n};\n\nexport type {\n\tI18nText,\n};\n", "/**\n * Supported icon collection aliases.\n *\n * Users might specify a collection, using both the key and the value in the following key-value pairs,\n * e.g the following pairs are completely exchangeable:\n *\n * - \"SAP-icons/accept\" and \"SAP-icons-v4/accept\"\n * - \"horizon/accept\" and \"SAP-icons-v5/accept\"\n * - \"SAP-icons-TNT/actor\" and \"tnt/actor\"\n * - \"BusinessSuiteInAppSymbols/3d\" and \"business-suite/3d\"\n */\nenum IconCollectionsAlias {\n\t\"SAP-icons\" = \"SAP-icons-v4\",\n\t\"horizon\" = \"SAP-icons-v5\",\n\t\"SAP-icons-TNT\" = \"tnt\",\n\t\"BusinessSuiteInAppSymbols\" = \"business-suite\",\n}\n\n/**\n * Returns the collection name for a given alias:\n *\n * - \"SAP-icons-TNT\"resolves to \"tnt\"\n * - \"BusinessSuiteInAppSymbols\" resolves to \"business-suite\"\n * - \"horizon\" resolves to \"SAP-icons-v5\"\n *\n * @param { string } collectionName\n * @return { string } the normalized collection name\n */\nconst getIconCollectionByAlias = (collectionName: string) => {\n\tif (IconCollectionsAlias[collectionName as keyof typeof IconCollectionsAlias]) {\n\t\treturn IconCollectionsAlias[collectionName as keyof typeof IconCollectionsAlias];\n\t}\n\n\treturn collectionName;\n};\n\nexport default IconCollectionsAlias;\nexport {\n\tgetIconCollectionByAlias,\n};\n", "import { isLegacyThemeFamily } from \"../../config/Theme.js\";\n\nenum RegisteredIconCollection {\n\tSAPIconsV4 = \"SAP-icons-v4\",\n\tSAPIconsV5 = \"SAP-icons-v5\",\n\tSAPIconsTNTV2 = \"tnt-v2\",\n\tSAPIconsTNTV3 = \"tnt-v3\",\n\tSAPBSIconsV1 = \"business-suite-v1\",\n\tSAPBSIconsV2 = \"business-suite-v2\",\n}\n\ntype ThemeToCollectionMap = {[x: string]: string; };\n\nconst iconCollections = new Map<string, ThemeToCollectionMap>();\niconCollections.set(\"SAP-icons\", {\n\t\"legacy\": RegisteredIconCollection.SAPIconsV4,\n\t\"sap_horizon\": RegisteredIconCollection.SAPIconsV5,\n});\niconCollections.set(\"tnt\", {\n\t\"legacy\": RegisteredIconCollection.SAPIconsTNTV2,\n\t\"sap_horizon\": RegisteredIconCollection.SAPIconsTNTV3,\n});\niconCollections.set(\"business-suite\", {\n\t\"legacy\": RegisteredIconCollection.SAPBSIconsV1,\n\t\"sap_horizon\": RegisteredIconCollection.SAPBSIconsV2,\n});\n\n/**\n * Registers collection version per theme.\n * **For exmaple:** registerIconCollectionForTheme(\"my-custom-icons\", {\"sap_horizon\": \"my-custom-icons-v5\"})\n * @param { string } collectionName\n * @param { ThemeToCollectionMap } themeCollectionMap\n */\nconst registerIconCollectionForTheme = (collectionName: string, themeCollectionMap: ThemeToCollectionMap) => {\n\tif (iconCollections.has(collectionName)) {\n\t\ticonCollections.set(collectionName, { ...themeCollectionMap, ...iconCollections.get(collectionName) });\n\t\treturn;\n\t}\n\ticonCollections.set(collectionName, themeCollectionMap);\n};\n\nconst getIconCollectionForTheme = (collectionName: string) => {\n\tconst themeFamily = isLegacyThemeFamily() ? \"legacy\" : \"sap_horizon\";\n\treturn iconCollections.has(collectionName) ? iconCollections.get(collectionName)![themeFamily] : collectionName;\n};\n\nexport {\n\tregisterIconCollectionForTheme,\n\tgetIconCollectionForTheme,\n\tRegisteredIconCollection,\n};\n", "const IconCollectionConfiguration = new Map<string, string>();\n\n// All supported icon collections + unknown custom ones\ntype IconCollection = string;\n\n/**\n * Sets the default icon collection for a given theme.\n *\n * SAP Icons is the default icon collection (that resolves to SAP-icons version 5.x in Horizon theme family and SAP-icons version 4.x in all other themes)\n * and to display icons from other collections, you have to specify the icon collection in addition to the icon name, for example: \"tnt/actor\", \"business-suite/1x2-grid-layout\", etc.\n * This method allows setting another (built-in or custom) icon collection as default per theme.\n *\n * **Usage**\n * **For example**, to make \"SAP-icons version 5.x\" the default icon collection in \"sap_fiori_3\":\n *\n * ```\n * setDefaultIconCollection(\"sap_fiori_3\", \"SAP-icons-v5\");\n *\n * <ui5-icon name=\"home\"></ui5-icon>\n * ```\n *\n * **For example**, to make a custom icon collection (with name \"my-custom-collection\") the default icon collection in \"sap_fiori_3\":\n *\n * ```\n * setDefaultIconCollection(\"sap_fiori_3\", \"my-custom-collection\");\n *\n * <ui5-icon name=\"custom-icon-name\"></ui5-icon>\n * ```\n *\n * @public\n * @param { string } theme\n * @param { string } collectionName\n */\nconst setDefaultIconCollection = (theme: string, collectionName: IconCollection) => {\n\tIconCollectionConfiguration.set(theme, collectionName);\n};\n\n/**\n * Returns the configured default icon collection for a given theme.\n *\n * @param { string } theme\n * @public\n * @returns { string | undefined }\n */\nconst getDefaultIconCollection = (theme: string): string | undefined => {\n\treturn IconCollectionConfiguration.get(theme);\n};\n\nexport {\n\tsetDefaultIconCollection,\n\tgetDefaultIconCollection,\n};\n\nexport type {\n\tIconCollection,\n};\n", "import { getTheme } from \"../../config/Theme.js\";\nimport type { IconCollection } from \"../../config/Icons.js\";\nimport { getDefaultIconCollection } from \"../../config/Icons.js\";\nimport { getIconCollectionByAlias } from \"./IconCollectionsAlias.js\";\nimport { getIconCollectionForTheme } from \"./IconCollectionsByTheme.js\";\n\n/**\n * Returns the effective theme dependant icon collection:\n *\n * - \"no collection\" resolves to \"SAP-icons-v4\" in \"Quartz\" and to \"SAP-icons-v5\" in \"Horizon\"\n * - \"tnt\" (and its alias \"SAP-icons-TNT\") resolves to \"tnt-v2\" in \"Quartz\" and resolves to \"tnt-v3\" in \"Horizon\"\n * - \"business-suite\" (and its alias \"BusinessSuiteInAppSymbols\") resolves to \"business-suite-v1\" in \"Quartz\" and resolves to \"business-suite-v2\" in \"Horizon\"\n *\n * @param { IconCollection } collectionName\n * @returns { IconCollection } the effective collection name\n */\nconst getEffectiveIconCollection = (collectionName?: IconCollection): IconCollection => {\n\tconst defaultIconCollection = getDefaultIconCollection(getTheme());\n\n\t// no collection + default collection, configured via setDefaultIconCollection - return the configured icon collection.\n\tif (!collectionName && defaultIconCollection) {\n\t\treturn getIconCollectionByAlias(defaultIconCollection);\n\t}\n\n\t// no collection - return \"SAP-icons-v4\" or  \"SAP-icons-v5\".\n\tif (!collectionName) {\n\t\treturn getIconCollectionForTheme(\"SAP-icons\");\n\t}\n\n\t// has collection - return \"SAP-icons-v4\", \"SAP-icons-v5\", \"tnt-v1\", \"tnt-v2\", \"business-suite-v1\", \"business-suite-v2\", or custom ones.\n\treturn getIconCollectionForTheme(collectionName);\n};\n\nexport default getEffectiveIconCollection;\n", "import getSharedResource from \"../getSharedResource.js\";\nimport { getIconCollectionByAlias } from \"./util/IconCollectionsAlias.js\";\nimport { registerIconCollectionForTheme } from \"./util/IconCollectionsByTheme.js\";\nimport getEffectiveIconCollection from \"./util/getIconCollectionByTheme.js\";\nimport { getI18nBundle } from \"../i18nBundle.js\";\nimport type { I18nText } from \"../i18nBundle.js\";\nimport type { TemplateFunction } from \"../renderer/executeTemplate.js\";\n\nconst DEFAULT_THEME_FAMILY = \"legacy\"; // includes sap_fiori_*\n\ntype IconLoader = (collectionName: string) => Promise<CollectionData | Array<CollectionData>>;\n\ntype CollectionData = {\n\tcollection: string,\n\tpackageName: string,\n\tthemeFamily?: \"legacy\" | \"sap_horizon\",\n\tversion?: string,\n\tdata: Record<string, {\n\t\tpath?: string,\n\t\tpaths?: Array<string>,\n\t\tltr?: boolean,\n\t\tacc?: I18nText,\n\t}>,\n};\n\ntype IconData = {\n\tcollection: string,\n\tpackageName: string,\n\tpathData: string | Array<string>,\n\tltr?: boolean,\n\taccData?: I18nText,\n\tcustomTemplate?: TemplateFunction,\n\tviewBox?: string,\n};\n\nconst loaders = new Map<string, IconLoader>();\nconst registry = getSharedResource<Map<string, IconData>>(\"SVGIcons.registry\", new Map());\nconst iconCollectionPromises = getSharedResource<Map<string, Promise<CollectionData| Array<CollectionData>>>>(\"SVGIcons.promises\", new Map());\n\nconst ICON_NOT_FOUND = \"ICON_NOT_FOUND\";\n\nconst registerIconLoader = (collectionName: string, loader: IconLoader) => {\n\tloaders.set(collectionName, loader);\n};\n\nconst _loadIconCollectionOnce = async (collectionName: string) => {\n\tif (!iconCollectionPromises.has(collectionName)) {\n\t\tif (!loaders.has(collectionName)) {\n\t\t\tthrow new Error(`No loader registered for the ${collectionName} icons collection. Probably you forgot to import the \"AllIcons.js\" module for the respective package.`);\n\t\t}\n\n\t\tconst loadIcons = loaders.get(collectionName)!;\n\t\ticonCollectionPromises.set(collectionName, loadIcons(collectionName));\n\t}\n\n\treturn iconCollectionPromises.get(collectionName);\n};\n\nconst _fillRegistry = (bundleData: CollectionData) => {\n\tObject.keys(bundleData.data).forEach(iconName => {\n\t\tconst iconData = bundleData.data[iconName];\n\n\t\tregisterIcon(iconName, {\n\t\t\tpathData: (iconData.path || iconData.paths)!,\n\t\t\tltr: iconData.ltr,\n\t\t\taccData: iconData.acc,\n\t\t\tcollection: bundleData.collection,\n\t\t\tpackageName: bundleData.packageName,\n\t\t});\n\t});\n};\n\n// set\nconst registerIcon = (name: string, iconData: IconData) => { // eslint-disable-line\n\tconst key = `${iconData.collection}/${name}`;\n\n\tregistry.set(key, {\n\t\tpathData: iconData.pathData,\n\t\tltr: iconData.ltr,\n\t\taccData: iconData.accData,\n\t\tpackageName: iconData.packageName,\n\t\tcustomTemplate: iconData.customTemplate,\n\t\tviewBox: iconData.viewBox,\n\t\tcollection: iconData.collection,\n\t});\n};\n\n/**\n * Processes the full icon name and splits it into - \"name\", \"collection\".\n * - removes legacy protocol (\"sap-icon://\")\n * - resolves aliases (f.e \"SAP-icons-TNT/actor\" => \"tnt/actor\")\n *\n * @param { string } name\n * @return { object }\n */\nconst processName = (name: string) => {\n\t// silently support ui5-compatible URIs\n\tif (name.startsWith(\"sap-icon://\")) {\n\t\tname = name.replace(\"sap-icon://\", \"\");\n\t}\n\n\tlet collection: string;\n\t[name, collection] = name.split(\"/\").reverse();\n\n\tname = name.replace(\"icon-\", \"\");\n\tif (collection) {\n\t\tcollection = getIconCollectionByAlias(collection);\n\t}\n\treturn { name, collection };\n};\n\nconst getIconDataSync = (iconName: string) => {\n\tconst { name, collection } = processName(iconName);\n\treturn getRegisteredIconData(collection, name);\n};\n\nconst getIconData = async (iconName: string) => {\n\tconst { name, collection } = processName(iconName);\n\n\tlet iconData: string | CollectionData | Array<CollectionData> = ICON_NOT_FOUND;\n\ttry {\n\t\ticonData = (await _loadIconCollectionOnce(getEffectiveIconCollection(collection)))!;\n\t} catch (error: unknown) {\n\t\tconst e = error as Error;\n\t\tconsole.error(e.message); /* eslint-disable-line */\n\t}\n\n\tif (iconData === ICON_NOT_FOUND) {\n\t\treturn iconData;\n\t}\n\n\tconst registeredIconData = getRegisteredIconData(collection, name);\n\n\tif (registeredIconData) {\n\t\treturn registeredIconData;\n\t}\n\n\t// not filled by another await. many getters will await on the same loader, but fill only once\n\tif (Array.isArray(iconData)) {\n\t\ticonData.forEach(data => {\n\t\t\t_fillRegistry(data);\n\t\t\tregisterIconCollectionForTheme(collection, { [data.themeFamily || DEFAULT_THEME_FAMILY]: data.collection });\n\t\t});\n\t} else {\n\t\t_fillRegistry(iconData as CollectionData);\n\t}\n\n\treturn getRegisteredIconData(collection, name);\n};\n\nconst getRegisteredIconData = (collection: string, name: string) => {\n\tconst registryKey = `${getEffectiveIconCollection(collection)}/${name}`;\n\treturn registry.get(registryKey);\n};\n\n/**\n * Returns the accessible name for the given icon,\n * or undefined if accessible name is not present.\n *\n * @param { string } name\n * @return { Promise }\n */\nconst getIconAccessibleName = async (name: string | undefined): Promise<string | undefined> => {\n\tif (!name) {\n\t\treturn;\n\t}\n\n\tlet iconData: typeof ICON_NOT_FOUND | IconData | undefined = getIconDataSync(name);\n\n\tif (!iconData) {\n\t\ticonData = await getIconData(name);\n\t}\n\n\tif (iconData && iconData !== ICON_NOT_FOUND && iconData.accData) {\n\t\tconst i18nBundle = await getI18nBundle(iconData.packageName);\n\t\treturn i18nBundle.getText(iconData.accData);\n\t}\n};\n\n// test page usage only\nconst _getRegisteredNames = async () => {\n\t// fetch one icon of each collection to trigger the bundle load\n\tawait getIconData(\"edit\");\n\tawait getIconData(\"tnt/arrow\");\n\tawait getIconData(\"business-suite/3d\");\n\treturn Array.from(registry.keys());\n};\n\nexport {\n\tregisterIconLoader,\n\tgetIconData,\n\tgetIconDataSync,\n\tgetIconAccessibleName,\n\tregisterIcon,\n\t_getRegisteredNames,\n};\n\nexport type {\n\tIconData,\n\tCollectionData,\n};\n"],
  "mappings": "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",
  "names": ["IconCollectionsAlias", "RegisteredIconCollection"]
}
