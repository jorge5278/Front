import {
  ARIA_LABEL_LIST_DELETABLE,
  ARIA_LABEL_LIST_MULTISELECTABLE,
  ARIA_LABEL_LIST_SELECTABLE,
  BUSY_INDICATOR_TITLE,
  Button_default,
  Dialog_default,
  Fragment,
  GROUP_HEADER_TEXT,
  JsxRenderer_default,
  LIST_ROLE_LISTBOX_GROUP_DESCRIPTION,
  LIST_ROLE_LIST_GROUP_DESCRIPTION,
  LOAD_MORE_TEXT,
  Label_default,
  PopoverTemplate,
  Popover_default,
  RESPONSIVE_POPOVER_CLOSE_DIALOG_BUTTON,
  ResizeHandler_default,
  Title_default,
  UI5Element_default,
  customElement_default,
  decline_default,
  deregisterUI5Element,
  event_strict_default,
  getActiveElement_default,
  getAllAccessibleDescriptionRefTexts,
  getAllAccessibleNameRefTexts,
  getEffectiveAriaDescriptionText,
  getEffectiveAriaLabelText,
  getEffectiveScrollbarStyle_default,
  i18n_default,
  instanceOfUI5Element,
  isCtrl,
  isDown,
  isElementHidden_default,
  isEnd,
  isEnter,
  isHome,
  isLeft,
  isPageDown,
  isPageUp,
  isRight,
  isSpace,
  isTabNext,
  isTabPrevious,
  isUp,
  jsx,
  jsxs,
  parameters_bundle_css_default,
  parameters_bundle_css_default2,
  property_default,
  registerUI5Element,
  slot_default,
  toLowercaseEnumValue
} from "./chunk-ANJ7DKRT.js";
import {
  isDesktop,
  isPhone,
  registerThemePropertiesLoader,
  renderFinished
} from "./chunk-NPG2NGWT.js";

// node_modules/@ui5/webcomponents-base/dist/types/NavigationMode.js
var NavigationMode;
(function(NavigationMode2) {
  NavigationMode2["Auto"] = "Auto";
  NavigationMode2["Vertical"] = "Vertical";
  NavigationMode2["Horizontal"] = "Horizontal";
  NavigationMode2["Paging"] = "Paging";
})(NavigationMode || (NavigationMode = {}));
var NavigationMode_default = NavigationMode;

// node_modules/@ui5/webcomponents-base/dist/types/ItemNavigationBehavior.js
var ItemNavigationBehavior;
(function(ItemNavigationBehavior2) {
  ItemNavigationBehavior2["Static"] = "Static";
  ItemNavigationBehavior2["Cyclic"] = "Cyclic";
})(ItemNavigationBehavior || (ItemNavigationBehavior = {}));
var ItemNavigationBehavior_default = ItemNavigationBehavior;

// node_modules/@ui5/webcomponents-base/dist/delegate/ItemNavigation.js
var ItemNavigation = class {
  /**
   *
   * @param rootWebComponent the component to operate on (component that slots or contains within its shadow root the items the user navigates among)
   * @param {ItemNavigationOptions} options Object with configuration options:
   *  - currentIndex: the index of the item that will be initially selected (from which navigation will begin)
   *  - navigationMode (Auto|Horizontal|Vertical): whether the items are displayed horizontally (Horizontal), vertically (Vertical) or as a matrix (Auto) meaning the user can navigate in both directions (up/down and left/right)
   *  - rowSize: tells how many items per row there are when the items are not rendered as a flat list but rather as a matrix. Relevant for navigationMode=Auto
   * 	- skipItemsSize: tells how many items upon PAGE_UP and PAGE_DOWN should be skipped to applying the focus on the next item
   *  - behavior (Static|Cycling): tells what to do when trying to navigate beyond the first and last items
   *    Static means that nothing happens if the user tries to navigate beyond the first/last item.
   *    Cycling means that when the user navigates beyond the last item they go to the first and vice versa.
   *  - getItemsCallback: function that, when called, returns an array with all items the user can navigate among
   *  - affectedPropertiesNames: a list of metadata properties on the root component which, upon user navigation, will be reassigned by address thus causing the root component to invalidate
   */
  constructor(rootWebComponent, options) {
    if (!rootWebComponent.isUI5Element) {
      throw new Error("The root web component must be a UI5 Element instance");
    }
    this.rootWebComponent = rootWebComponent;
    this.rootWebComponent.addEventListener("keydown", this._onkeydown.bind(this));
    this._initBound = this._init.bind(this);
    this.rootWebComponent.attachComponentStateFinalized(this._initBound);
    if (typeof options.getItemsCallback !== "function") {
      throw new Error("getItemsCallback is required");
    }
    this._getItems = options.getItemsCallback;
    this._currentIndex = options.currentIndex || 0;
    this._rowSize = options.rowSize || 1;
    this._behavior = options.behavior || ItemNavigationBehavior_default.Static;
    this._navigationMode = options.navigationMode || NavigationMode_default.Auto;
    this._affectedPropertiesNames = options.affectedPropertiesNames || [];
    this._skipItemsSize = options.skipItemsSize || null;
  }
  /**
   * Call this method to set a new "current" (selected) item in the item navigation
   * Note: the item passed to this function must be one of the items, returned by the getItemsCallback function
   *
   * @public
   * @param current the new selected item
   */
  setCurrentItem(current) {
    const currentItemIndex = this._getItems().indexOf(current);
    if (currentItemIndex === -1) {
      console.warn(`The provided item is not managed by ItemNavigation`, current);
      return;
    }
    this._currentIndex = currentItemIndex;
    this._applyTabIndex();
  }
  /**
   * Call this method to dynamically change the row size
   *
   * @public
   * @param newRowSize
   */
  setRowSize(newRowSize) {
    this._rowSize = newRowSize;
  }
  _init() {
    this._getItems().forEach((item, idx) => {
      item.forcedTabIndex = idx === this._currentIndex ? "0" : "-1";
    });
  }
  _onkeydown(event) {
    if (!this._canNavigate()) {
      return;
    }
    const horizontalNavigationOn = this._navigationMode === NavigationMode_default.Horizontal || this._navigationMode === NavigationMode_default.Auto;
    const verticalNavigationOn = this._navigationMode === NavigationMode_default.Vertical || this._navigationMode === NavigationMode_default.Auto;
    const isRTL = this.rootWebComponent.effectiveDir === "rtl";
    if (isRTL && isLeft(event) && horizontalNavigationOn) {
      this._handleRight();
    } else if (isRTL && isRight(event) && horizontalNavigationOn) {
      this._handleLeft();
    } else if (isLeft(event) && horizontalNavigationOn) {
      this._handleLeft();
    } else if (isRight(event) && horizontalNavigationOn) {
      this._handleRight();
    } else if (isUp(event) && verticalNavigationOn) {
      this._handleUp();
    } else if (isDown(event) && verticalNavigationOn) {
      this._handleDown();
    } else if (isHome(event)) {
      this._handleHome();
    } else if (isEnd(event)) {
      this._handleEnd();
    } else if (isPageUp(event)) {
      this._handlePageUp();
    } else if (isPageDown(event)) {
      this._handlePageDown();
    } else {
      return;
    }
    event.preventDefault();
    this._applyTabIndex();
    this._focusCurrentItem();
  }
  _handleUp() {
    const itemsLength = this._getItems().length;
    if (this._currentIndex - this._rowSize >= 0) {
      this._currentIndex -= this._rowSize;
      return;
    }
    if (this._behavior === ItemNavigationBehavior_default.Cyclic) {
      const firstItemInThisColumnIndex = this._currentIndex % this._rowSize;
      const firstItemInPreviousColumnIndex = firstItemInThisColumnIndex === 0 ? this._rowSize - 1 : firstItemInThisColumnIndex - 1;
      const rows = Math.ceil(itemsLength / this._rowSize);
      let lastItemInPreviousColumnIndex = firstItemInPreviousColumnIndex + (rows - 1) * this._rowSize;
      if (lastItemInPreviousColumnIndex > itemsLength - 1) {
        lastItemInPreviousColumnIndex -= this._rowSize;
      }
      this._currentIndex = lastItemInPreviousColumnIndex;
    } else {
      this._currentIndex = 0;
    }
  }
  _handleDown() {
    const itemsLength = this._getItems().length;
    if (this._currentIndex + this._rowSize < itemsLength) {
      this._currentIndex += this._rowSize;
      return;
    }
    if (this._behavior === ItemNavigationBehavior_default.Cyclic) {
      const firstItemInThisColumnIndex = this._currentIndex % this._rowSize;
      const firstItemInNextColumnIndex = (firstItemInThisColumnIndex + 1) % this._rowSize;
      this._currentIndex = firstItemInNextColumnIndex;
    } else {
      this._currentIndex = itemsLength - 1;
    }
  }
  _handleLeft() {
    const itemsLength = this._getItems().length;
    if (this._currentIndex > 0) {
      this._currentIndex -= 1;
      return;
    }
    if (this._behavior === ItemNavigationBehavior_default.Cyclic) {
      this._currentIndex = itemsLength - 1;
    }
  }
  _handleRight() {
    const itemsLength = this._getItems().length;
    if (this._currentIndex < itemsLength - 1) {
      this._currentIndex += 1;
      return;
    }
    if (this._behavior === ItemNavigationBehavior_default.Cyclic) {
      this._currentIndex = 0;
    }
  }
  _handleHome() {
    const homeEndRange = this._rowSize > 1 ? this._rowSize : this._getItems().length;
    this._currentIndex -= this._currentIndex % homeEndRange;
  }
  _handleEnd() {
    const homeEndRange = this._rowSize > 1 ? this._rowSize : this._getItems().length;
    this._currentIndex += homeEndRange - 1 - this._currentIndex % homeEndRange;
  }
  _handlePageUp() {
    if (this._rowSize > 1) {
      return;
    }
    this._handlePageUpFlat();
  }
  _handlePageDown() {
    if (this._rowSize > 1) {
      return;
    }
    this._handlePageDownFlat();
  }
  /**
   * Handles PAGE_UP in a flat list-like structure, both vertically and horizontally.
   */
  _handlePageUpFlat() {
    if (this._skipItemsSize === null) {
      this._currentIndex -= this._currentIndex;
      return;
    }
    if (this._currentIndex + 1 > this._skipItemsSize) {
      this._currentIndex -= this._skipItemsSize;
    } else {
      this._currentIndex -= this._currentIndex;
    }
  }
  /**
   * Handles PAGE_DOWN in a flat list-like structure, both vertically and horizontally.
   */
  _handlePageDownFlat() {
    if (this._skipItemsSize === null) {
      this._currentIndex = this._getItems().length - 1;
      return;
    }
    const currentToEndRange = this._getItems().length - this._currentIndex - 1;
    if (currentToEndRange > this._skipItemsSize) {
      this._currentIndex += this._skipItemsSize;
    } else {
      this._currentIndex = this._getItems().length - 1;
    }
  }
  _applyTabIndex() {
    const items = this._getItems();
    for (let i = 0; i < items.length; i++) {
      items[i].forcedTabIndex = i === this._currentIndex ? "0" : "-1";
    }
    this._affectedPropertiesNames.forEach((propName) => {
      const prop = this.rootWebComponent[propName];
      this.rootWebComponent[propName] = Array.isArray(prop) ? [...prop] : { ...prop };
    });
  }
  _focusCurrentItem() {
    const currentItem = this._getCurrentItem();
    if (currentItem) {
      currentItem.focus();
    }
  }
  _canNavigate() {
    const currentItem = this._getCurrentItem();
    const activeElement = getActiveElement_default();
    return currentItem && currentItem === activeElement;
  }
  _getCurrentItem() {
    const items = this._getItems();
    if (!items.length) {
      return;
    }
    while (this._currentIndex >= items.length) {
      this._currentIndex -= this._rowSize;
    }
    if (this._currentIndex < 0) {
      this._currentIndex = 0;
    }
    const currentItem = items[this._currentIndex];
    if (!currentItem) {
      return;
    }
    if (instanceOfUI5Element(currentItem)) {
      return currentItem.getFocusDomRef();
    }
    const currentItemDOMRef = this.rootWebComponent.getDomRef();
    if (!currentItemDOMRef) {
      return;
    }
    if (currentItem.id) {
      return currentItemDOMRef.querySelector(`[id="${currentItem.id}"]`);
    }
  }
};
var ItemNavigation_default = ItemNavigation;

// node_modules/@ui5/webcomponents/dist/types/BusyIndicatorTextPlacement.js
var BusyIndicatorTextPlacement;
(function(BusyIndicatorTextPlacement2) {
  BusyIndicatorTextPlacement2["Top"] = "Top";
  BusyIndicatorTextPlacement2["Bottom"] = "Bottom";
})(BusyIndicatorTextPlacement || (BusyIndicatorTextPlacement = {}));
var BusyIndicatorTextPlacement_default = BusyIndicatorTextPlacement;

// node_modules/@ui5/webcomponents/dist/BusyIndicatorTemplate.js
function BusyIndicatorTemplate() {
  return jsxs("div", { class: "ui5-busy-indicator-root", children: [this._isBusy && jsxs("div", { class: "ui5-busy-indicator-busy-area", title: this.ariaTitle, tabindex: 0, role: "progressbar", "aria-valuemin": 0, "aria-valuemax": 100, "aria-valuetext": "Busy", "aria-labelledby": this.labelId, "data-sap-focus-ref": true, children: [this.textPosition.top && BusyIndicatorBusyText.call(this), jsxs("div", { class: "ui5-busy-indicator-circles-wrapper", children: [jsx("div", { class: "ui5-busy-indicator-circle circle-animation-0" }), jsx("div", { class: "ui5-busy-indicator-circle circle-animation-1" }), jsx("div", { class: "ui5-busy-indicator-circle circle-animation-2" })] }), this.textPosition.bottom && BusyIndicatorBusyText.call(this)] }), jsx("slot", {}), this._isBusy && jsx("span", { "data-ui5-focus-redirect": true, tabindex: 0, onFocusIn: this._redirectFocus })] });
}
function BusyIndicatorBusyText() {
  return jsx(Fragment, { children: this.text && jsx(Label_default, { id: `${this._id}-label`, class: "ui5-busy-indicator-text", children: this.text }) });
}

// node_modules/@ui5/webcomponents/dist/generated/themes/BusyIndicator.css.js
registerThemePropertiesLoader("@ui5/webcomponents-theming", "sap_horizon", async () => parameters_bundle_css_default);
registerThemePropertiesLoader("@ui5/webcomponents", "sap_horizon", async () => parameters_bundle_css_default2);
var BusyIndicator_css_default = `:host(:not([hidden])){display:inline-block}:host([_is-busy]){color:var(--_ui5-v2-8-0_busy_indicator_color)}:host([size="S"]) .ui5-busy-indicator-root{min-width:1.625rem;min-height:.5rem}:host([size="S"][text]:not([text=""])) .ui5-busy-indicator-root{min-height:1.75rem}:host([size="S"]) .ui5-busy-indicator-circle{width:.5rem;height:.5rem}:host([size="S"]) .ui5-busy-indicator-circle:first-child,:host([size="S"]) .ui5-busy-indicator-circle:nth-child(2){margin-inline-end:.0625rem}:host(:not([size])) .ui5-busy-indicator-root,:host([size="M"]) .ui5-busy-indicator-root{min-width:3.375rem;min-height:1rem}:host([size="M"]) .ui5-busy-indicator-circle:first-child,:host([size="M"]) .ui5-busy-indicator-circle:nth-child(2){margin-inline-end:.1875rem}:host(:not([size])[text]:not([text=""])) .ui5-busy-indicator-root,:host([size="M"][text]:not([text=""])) .ui5-busy-indicator-root{min-height:2.25rem}:host(:not([size])) .ui5-busy-indicator-circle,:host([size="M"]) .ui5-busy-indicator-circle{width:1rem;height:1rem}:host([size="L"]) .ui5-busy-indicator-root{min-width:6.5rem;min-height:2rem}:host([size="L"]) .ui5-busy-indicator-circle:first-child,:host([size="L"]) .ui5-busy-indicator-circle:nth-child(2){margin-inline-end:.25rem}:host([size="L"][text]:not([text=""])) .ui5-busy-indicator-root{min-height:3.25rem}:host([size="L"]) .ui5-busy-indicator-circle{width:2rem;height:2rem}.ui5-busy-indicator-root{display:flex;justify-content:center;align-items:center;position:relative;background-color:inherit;height:inherit;border-radius:inherit}.ui5-busy-indicator-busy-area{position:absolute;z-index:99;inset:0;display:flex;justify-content:center;align-items:center;background-color:inherit;flex-direction:column;border-radius:inherit}:host(:not(:empty)) .ui5-busy-indicator-busy-area{background-color:var(--_ui5-v2-8-0_busy_indicator_block_layer)}:host([desktop]) .ui5-busy-indicator-busy-area:focus,.ui5-busy-indicator-busy-area:focus-visible{outline:var(--_ui5-v2-8-0_busy_indicator_focus_outline);outline-offset:-2px}.ui5-busy-indicator-circles-wrapper{line-height:0}.ui5-busy-indicator-circle{display:inline-block;background-color:currentColor;border-radius:50%}.ui5-busy-indicator-circle:before{content:"";width:100%;height:100%;border-radius:100%}.circle-animation-0{animation:grow 1.6s infinite cubic-bezier(.32,.06,.85,1.11)}.circle-animation-1{animation:grow 1.6s infinite cubic-bezier(.32,.06,.85,1.11);animation-delay:.2s}.circle-animation-2{animation:grow 1.6s infinite cubic-bezier(.32,.06,.85,1.11);animation-delay:.4s}.ui5-busy-indicator-text{width:100%;text-align:center}:host([text-placement="Top"]) .ui5-busy-indicator-text{margin-bottom:.5rem}:host(:not([text-placement])) .ui5-busy-indicator-text,:host([text-placement="Bottom"]) .ui5-busy-indicator-text{margin-top:.5rem}@keyframes grow{0%,50%,to{-webkit-transform:scale(.5);-moz-transform:scale(.5);transform:scale(.5)}25%{-webkit-transform:scale(1);-moz-transform:scale(1);transform:scale(1)}}
`;

// node_modules/@ui5/webcomponents/dist/BusyIndicator.js
var __decorate = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var BusyIndicator_1;
var BusyIndicator = BusyIndicator_1 = class BusyIndicator2 extends UI5Element_default {
  constructor() {
    super();
    this.size = "M";
    this.active = false;
    this.delay = 1e3;
    this.textPlacement = "Bottom";
    this._isBusy = false;
    this._keydownHandler = this._handleKeydown.bind(this);
    this._preventEventHandler = this._preventEvent.bind(this);
  }
  onEnterDOM() {
    this.addEventListener("keydown", this._keydownHandler, {
      capture: true
    });
    this.addEventListener("keyup", this._preventEventHandler, {
      capture: true
    });
    if (isDesktop()) {
      this.setAttribute("desktop", "");
    }
  }
  onExitDOM() {
    if (this._busyTimeoutId) {
      clearTimeout(this._busyTimeoutId);
      delete this._busyTimeoutId;
    }
    this.removeEventListener("keydown", this._keydownHandler, true);
    this.removeEventListener("keyup", this._preventEventHandler, true);
  }
  get ariaTitle() {
    return BusyIndicator_1.i18nBundle.getText(BUSY_INDICATOR_TITLE);
  }
  get labelId() {
    return this.text ? `${this._id}-label` : void 0;
  }
  get textPosition() {
    return {
      top: this.text && this.textPlacement === BusyIndicatorTextPlacement_default.Top,
      bottom: this.text && this.textPlacement === BusyIndicatorTextPlacement_default.Bottom
    };
  }
  onBeforeRendering() {
    if (this.active) {
      if (!this._isBusy && !this._busyTimeoutId) {
        this._busyTimeoutId = setTimeout(() => {
          delete this._busyTimeoutId;
          this._isBusy = true;
        }, Math.max(0, this.delay));
      }
    } else {
      if (this._busyTimeoutId) {
        clearTimeout(this._busyTimeoutId);
        delete this._busyTimeoutId;
      }
      this._isBusy = false;
    }
  }
  _handleKeydown(e) {
    if (!this._isBusy) {
      return;
    }
    e.stopImmediatePropagation();
    if (isTabNext(e)) {
      this.focusForward = true;
      this.shadowRoot.querySelector("[data-ui5-focus-redirect]").focus();
      this.focusForward = false;
    }
  }
  _preventEvent(e) {
    if (this._isBusy) {
      e.stopImmediatePropagation();
    }
  }
  /**
   * Moves the focus to busy area when coming with SHIFT + TAB
   */
  _redirectFocus(e) {
    if (this.focusForward) {
      return;
    }
    e.preventDefault();
    this.shadowRoot.querySelector(".ui5-busy-indicator-busy-area").focus();
  }
};
__decorate([
  property_default()
], BusyIndicator.prototype, "text", void 0);
__decorate([
  property_default()
], BusyIndicator.prototype, "size", void 0);
__decorate([
  property_default({ type: Boolean })
], BusyIndicator.prototype, "active", void 0);
__decorate([
  property_default({ type: Number })
], BusyIndicator.prototype, "delay", void 0);
__decorate([
  property_default()
], BusyIndicator.prototype, "textPlacement", void 0);
__decorate([
  property_default({ type: Boolean })
], BusyIndicator.prototype, "_isBusy", void 0);
__decorate([
  i18n_default("@ui5/webcomponents")
], BusyIndicator, "i18nBundle", void 0);
BusyIndicator = BusyIndicator_1 = __decorate([
  customElement_default({
    tag: "ui5-busy-indicator",
    languageAware: true,
    styles: BusyIndicator_css_default,
    renderer: JsxRenderer_default,
    template: BusyIndicatorTemplate
  })
], BusyIndicator);
BusyIndicator.define();
var BusyIndicator_default = BusyIndicator;

// node_modules/@ui5/webcomponents/dist/types/ListSelectionMode.js
var ListSelectionMode;
(function(ListSelectionMode2) {
  ListSelectionMode2["None"] = "None";
  ListSelectionMode2["Single"] = "Single";
  ListSelectionMode2["SingleStart"] = "SingleStart";
  ListSelectionMode2["SingleEnd"] = "SingleEnd";
  ListSelectionMode2["SingleAuto"] = "SingleAuto";
  ListSelectionMode2["Multiple"] = "Multiple";
  ListSelectionMode2["Delete"] = "Delete";
})(ListSelectionMode || (ListSelectionMode = {}));
var ListSelectionMode_default = ListSelectionMode;

// node_modules/@ui5/webcomponents/dist/types/ListAccessibleRole.js
var ListAccessibleRole;
(function(ListAccessibleRole2) {
  ListAccessibleRole2["List"] = "List";
  ListAccessibleRole2["Menu"] = "Menu";
  ListAccessibleRole2["Tree"] = "Tree";
  ListAccessibleRole2["ListBox"] = "ListBox";
})(ListAccessibleRole || (ListAccessibleRole = {}));
var ListAccessibleRole_default = ListAccessibleRole;

// node_modules/@ui5/webcomponents/dist/types/ListSeparator.js
var ListSeparator;
(function(ListSeparator2) {
  ListSeparator2["All"] = "All";
  ListSeparator2["Inner"] = "Inner";
  ListSeparator2["None"] = "None";
})(ListSeparator || (ListSeparator = {}));
var ListSeparator_default = ListSeparator;

// node_modules/@ui5/webcomponents-base/dist/util/isElementTabbable.js
var isElementTabbable = (el) => {
  if (!el) {
    return false;
  }
  if (el.hasAttribute("data-sap-no-tab-ref")) {
    return false;
  }
  if (isElementHidden_default(el)) {
    return false;
  }
  const tabIndex = el.getAttribute("tabindex");
  if (tabIndex !== null && tabIndex !== void 0) {
    return parseInt(tabIndex) >= 0;
  }
  const nodeName = el.nodeName.toLowerCase();
  if (nodeName === "a" || /^(input|select|textarea|button|object)$/.test(nodeName)) {
    return !el.disabled;
  }
  return false;
};
var isElementTabbable_default = isElementTabbable;

// node_modules/@ui5/webcomponents-base/dist/util/TabbableElements.js
var getTabbableElements = (el) => {
  return getTabbables([...el.children]);
};
var getTabbables = (nodes, tabbables) => {
  const tabbableElements = tabbables || [];
  if (!nodes) {
    return tabbableElements;
  }
  nodes.forEach((currentNode) => {
    if (currentNode.nodeType === Node.TEXT_NODE || currentNode.nodeType === Node.COMMENT_NODE) {
      return;
    }
    const currentElement = currentNode;
    if (currentElement.hasAttribute("data-sap-no-tab-ref")) {
      return;
    }
    if (isElementTabbable_default(currentElement)) {
      tabbableElements.push(currentElement);
    }
    if (currentElement.tagName === "SLOT") {
      getTabbables(currentElement.assignedNodes(), tabbableElements);
    } else {
      const children = currentElement.shadowRoot ? currentElement.shadowRoot.children : currentElement.children;
      getTabbables([...children], tabbableElements);
    }
  });
  return tabbableElements;
};

// node_modules/@ui5/webcomponents/dist/generated/themes/ListItemBase.css.js
registerThemePropertiesLoader("@ui5/webcomponents-theming", "sap_horizon", async () => parameters_bundle_css_default);
registerThemePropertiesLoader("@ui5/webcomponents", "sap_horizon", async () => parameters_bundle_css_default2);
var ListItemBase_css_default = `:host{box-sizing:border-box;height:var(--_ui5-v2-8-0_list_item_base_height);background-color:var(--ui5-v2-8-0-listitem-background-color);border-bottom:.0625rem solid transparent}:host(:not([hidden])){display:block}:host([disabled]){opacity:var(--_ui5-v2-8-0-listitembase_disabled_opacity);pointer-events:none}:host([actionable]:not([disabled]):not([ui5-li-group-header])){cursor:pointer}:host([has-border]){border-bottom:var(--ui5-v2-8-0-listitem-border-bottom)}:host([selected]){background-color:var(--sapList_SelectionBackgroundColor);border-bottom:var(--ui5-v2-8-0-listitem-selected-border-bottom);.ui5-li-additional-text{text-shadow:var(--sapContent_TextShadow)}}:host([actionable]:not([active]):not([selected]):not([ui5-li-group-header]):hover){background-color:var(--sapList_Hover_Background);.ui5-li-additional-text{text-shadow:var(--sapContent_TextShadow)}}:host([actionable][selected]:not([active],[data-moving]):hover){background-color:var(--sapList_Hover_SelectionBackground)}:host([active][actionable]:not([data-moving])),:host([active][actionable][selected]:not([data-moving])){background-color:var(--sapList_Active_Background)}:host([desktop]:not([data-moving])) .ui5-li-root.ui5-li--focusable:focus:after,:host([desktop][focused]:not([data-moving])) .ui5-li-root.ui5-li--focusable:after,:host(:not([data-moving])) .ui5-li-root.ui5-li--focusable:focus-visible:after,:host([desktop]:not([data-moving])) .ui5-li-root .ui5-li-content:focus:after,:host([desktop][focused]:not([data-moving])) .ui5-li-root .ui5-li-content:after,:host(:not([data-moving])) .ui5-li-root .ui5-li-content:focus-visible:after{content:"";border:var(--sapContent_FocusWidth) var(--sapContent_FocusStyle) var(--sapContent_FocusColor);position:absolute;inset:.125rem;pointer-events:none}.ui5-li-root{position:relative;display:flex;align-items:center;width:100%;height:100%;padding:var(--_ui5-v2-8-0_list_item_base_padding);box-sizing:border-box;background-color:inherit}.ui5-li-root.ui5-li--focusable{outline:none}.ui5-li-content{display:flex;align-items:center;flex:auto;overflow:hidden;max-width:100%;font-family:"72override",var(--sapFontFamily);color:var(--sapList_TextColor)}.ui5-li-content .ui5-li-title{color:var(--sapList_TextColor);font-size:var(--_ui5-v2-8-0_list_item_title_size)}.ui5-li-text-wrapper{display:flex;flex-direction:row;justify-content:space-between;flex:auto;min-width:1px;line-height:normal}
`;

// node_modules/@ui5/webcomponents/dist/generated/themes/DraggableElement.css.js
registerThemePropertiesLoader("@ui5/webcomponents-theming", "sap_horizon", async () => parameters_bundle_css_default);
registerThemePropertiesLoader("@ui5/webcomponents", "sap_horizon", async () => parameters_bundle_css_default2);
var DraggableElement_css_default = `[draggable=true]{cursor:grab!important}[draggable=true][data-moving]{cursor:grabbing!important;opacity:var(--sapContent_DisabledOpacity)}
`;

// node_modules/@ui5/webcomponents/dist/ListItemBase.js
var __decorate2 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ListItemBase = class ListItemBase2 extends UI5Element_default {
  constructor() {
    super(...arguments);
    this.selected = false;
    this.movable = false;
    this.hasBorder = false;
    this.disabled = false;
    this.focused = false;
    this.actionable = false;
  }
  onEnterDOM() {
    if (isDesktop()) {
      this.setAttribute("desktop", "");
    }
  }
  onBeforeRendering() {
    this.actionable = true;
  }
  _onfocusin(e) {
    this.fireDecoratorEvent("request-tabindex-change", e);
    if (e.target !== this.getFocusDomRef()) {
      return;
    }
    this.fireDecoratorEvent("_focused", e);
  }
  _onkeydown(e) {
    if (isTabNext(e)) {
      return this._handleTabNext(e);
    }
    if (isTabPrevious(e)) {
      return this._handleTabPrevious(e);
    }
    if (this.getFocusDomRef().matches(":has(:focus-within)")) {
      return;
    }
    if (isSpace(e)) {
      e.preventDefault();
    }
    if (isEnter(e)) {
      this.fireItemPress(e);
    }
  }
  _onkeyup(e) {
    if (this.getFocusDomRef().matches(":has(:focus-within)")) {
      return;
    }
    if (isSpace(e)) {
      this.fireItemPress(e);
    }
  }
  _onclick(e) {
    if (this.getFocusDomRef().matches(":has(:focus-within)")) {
      return;
    }
    this.fireItemPress(e);
  }
  fireItemPress(e) {
    if (this.disabled || !this._pressable) {
      return;
    }
    if (isEnter(e)) {
      e.preventDefault();
    }
    this.fireDecoratorEvent("_press", { item: this, selected: this.selected, key: e.key });
  }
  _handleTabNext(e) {
    if (this.shouldForwardTabAfter()) {
      if (!this.fireDecoratorEvent("forward-after")) {
        e.preventDefault();
      }
    }
  }
  _handleTabPrevious(e) {
    const target = e.target;
    if (this.shouldForwardTabBefore(target)) {
      this.fireDecoratorEvent("forward-before");
    }
  }
  /**
   * Determines if th current list item either has no tabbable content or
   * [Tab] is performed onto the last tabbale content item.
   */
  shouldForwardTabAfter() {
    const aContent = getTabbableElements(this.getFocusDomRef());
    return aContent.length === 0 || aContent[aContent.length - 1] === getActiveElement_default();
  }
  /**
   * Determines if the current list item is target of [SHIFT+TAB].
   */
  shouldForwardTabBefore(target) {
    return this.getFocusDomRef() === target;
  }
  get classes() {
    return {
      main: {
        "ui5-li-root": true,
        "ui5-li--focusable": this._focusable
      }
    };
  }
  get _ariaDisabled() {
    return this.disabled ? true : void 0;
  }
  get _focusable() {
    return !this.disabled;
  }
  get _pressable() {
    return true;
  }
  get hasConfigurableMode() {
    return false;
  }
  get _effectiveTabIndex() {
    if (!this._focusable) {
      return -1;
    }
    if (this.selected) {
      return 0;
    }
    return this.forcedTabIndex ? parseInt(this.forcedTabIndex) : void 0;
  }
};
__decorate2([
  property_default({ type: Boolean })
], ListItemBase.prototype, "selected", void 0);
__decorate2([
  property_default({ type: Boolean })
], ListItemBase.prototype, "movable", void 0);
__decorate2([
  property_default({ type: Boolean })
], ListItemBase.prototype, "hasBorder", void 0);
__decorate2([
  property_default()
], ListItemBase.prototype, "forcedTabIndex", void 0);
__decorate2([
  property_default({ type: Boolean })
], ListItemBase.prototype, "disabled", void 0);
__decorate2([
  property_default({ type: Boolean })
], ListItemBase.prototype, "focused", void 0);
__decorate2([
  property_default({ type: Boolean })
], ListItemBase.prototype, "actionable", void 0);
ListItemBase = __decorate2([
  customElement_default({
    renderer: JsxRenderer_default,
    styles: [ListItemBase_css_default, DraggableElement_css_default]
  }),
  event_strict_default("request-tabindex-change", {
    bubbles: true
  }),
  event_strict_default("_press", {
    bubbles: true
  }),
  event_strict_default("_focused", {
    bubbles: true
  }),
  event_strict_default("forward-after", {
    bubbles: true,
    cancelable: true
  }),
  event_strict_default("forward-before", {
    bubbles: true
  })
], ListItemBase);
var ListItemBase_default = ListItemBase;

// node_modules/@ui5/webcomponents-base/dist/util/dragAndDrop/DragRegistry.js
var draggedElement = null;
var globalHandlersAttached = false;
var subscribers = /* @__PURE__ */ new Set();
var selfManagedDragAreas = /* @__PURE__ */ new Set();
var ondragstart = (e) => {
  if (!e.dataTransfer || !(e.target instanceof HTMLElement)) {
    return;
  }
  if (!selfManagedDragAreas.has(e.target)) {
    draggedElement = e.target;
  }
};
var ondragend = () => {
  draggedElement = null;
};
var ondrop = () => {
  draggedElement = null;
};
var setDraggedElement = (element) => {
  draggedElement = element;
};
var getDraggedElement = () => {
  return draggedElement;
};
var attachGlobalHandlers = () => {
  if (globalHandlersAttached) {
    return;
  }
  document.body.addEventListener("dragstart", ondragstart);
  document.body.addEventListener("dragend", ondragend);
  document.body.addEventListener("drop", ondrop);
};
var detachGlobalHandlers = () => {
  document.body.removeEventListener("dragstart", ondragstart);
  document.body.removeEventListener("dragend", ondragend);
  document.body.removeEventListener("drop", ondrop);
  globalHandlersAttached = false;
};
var subscribe = (subscriber) => {
  subscribers.add(subscriber);
  if (!globalHandlersAttached) {
    attachGlobalHandlers();
  }
};
var unsubscribe = (subscriber) => {
  subscribers.delete(subscriber);
  if (subscribers.size === 0 && globalHandlersAttached) {
    detachGlobalHandlers();
  }
};
var addSelfManagedArea = (area) => {
  selfManagedDragAreas.add(area);
  return setDraggedElement;
};
var removeSelfManagedArea = (area) => {
  selfManagedDragAreas.delete(area);
};
var DragRegistry = {
  subscribe,
  unsubscribe,
  addSelfManagedArea,
  removeSelfManagedArea,
  getDraggedElement
};
var DragRegistry_default = DragRegistry;

// node_modules/@ui5/webcomponents-base/dist/types/MovePlacement.js
var MovePlacement;
(function(MovePlacement2) {
  MovePlacement2["On"] = "On";
  MovePlacement2["Before"] = "Before";
  MovePlacement2["After"] = "After";
})(MovePlacement || (MovePlacement = {}));
var MovePlacement_default = MovePlacement;

// node_modules/@ui5/webcomponents-base/dist/types/Orientation.js
var Orientation;
(function(Orientation2) {
  Orientation2["Vertical"] = "Vertical";
  Orientation2["Horizontal"] = "Horizontal";
})(Orientation || (Orientation = {}));
var Orientation_default = Orientation;

// node_modules/@ui5/webcomponents-base/dist/util/dragAndDrop/findClosestPosition.js
var closestPlacement = (point, beforePoint, centerPoint, afterPoint) => {
  const distToBeforePoint = Math.abs(point - beforePoint);
  const distToCenterPoint = Math.abs(point - centerPoint);
  const distToAfterPoint = Math.abs(point - afterPoint);
  const closestPoint = Math.min(distToBeforePoint, distToCenterPoint, distToAfterPoint);
  let placements = [];
  switch (closestPoint) {
    case distToBeforePoint:
      placements = [MovePlacement_default.Before];
      break;
    case distToCenterPoint:
      placements = [MovePlacement_default.On, distToBeforePoint < distToAfterPoint ? MovePlacement_default.Before : MovePlacement_default.After];
      break;
    case distToAfterPoint:
      placements = [MovePlacement_default.After];
      break;
  }
  return placements;
};
var findClosestPosition = (elements, point, layoutOrientation) => {
  let shortestDist = Number.POSITIVE_INFINITY;
  let closestElement = null;
  for (let i = 0; i < elements.length; i++) {
    const el = elements[i];
    const { left: left2, width: width2, top: top2, height: height2 } = el.getBoundingClientRect();
    let elemCenter;
    if (layoutOrientation === Orientation_default.Vertical) {
      elemCenter = top2 + height2 / 2;
    } else {
      elemCenter = left2 + width2 / 2;
    }
    const distanceToCenter = Math.abs(point - elemCenter);
    if (distanceToCenter < shortestDist) {
      shortestDist = distanceToCenter;
      closestElement = el;
    }
  }
  if (!closestElement) {
    return null;
  }
  const { width, height, left, right, top, bottom } = closestElement.getBoundingClientRect();
  let placements;
  if (layoutOrientation === Orientation_default.Vertical) {
    placements = closestPlacement(point, top, top + height / 2, bottom);
  } else {
    placements = closestPlacement(point, left, left + width / 2, right);
  }
  return {
    element: closestElement,
    placements
  };
};
var findClosestPositionsByKey = (elements, element, e) => {
  let index = elements.indexOf(element);
  const positions = [];
  switch (e.key) {
    case "ArrowLeft":
    case "ArrowUp":
      index--;
      if (index >= 0) {
        positions.push({
          element: elements[index],
          placement: MovePlacement_default.Before
        });
      }
      break;
    case "ArrowRight":
    case "ArrowDown":
      index++;
      if (index < elements.length) {
        positions.push({
          element: elements[index],
          placement: MovePlacement_default.After
        });
      }
      break;
    case "Home":
      elements.forEach((el) => {
        positions.push({
          element: el,
          placement: MovePlacement_default.Before
        });
      });
      break;
    case "End":
      elements.reverse().forEach((el) => {
        positions.push({
          element: el,
          placement: MovePlacement_default.After
        });
      });
      break;
  }
  return positions;
};

// node_modules/@ui5/webcomponents/dist/ListItemGroupHeaderTemplate.js
function ListItemGroupHeaderTemplate() {
  return jsxs("div", { part: "native-li", role: this.effectiveAccRole, tabindex: this.forcedTabIndex ? parseInt(this.forcedTabIndex) : void 0, class: {
    "ui5-ghli-root": true,
    ...this.classes.main
  }, "aria-label": this.ariaLabelText, "aria-roledescription": this.groupHeaderText, onFocusIn: this._onfocusin, onKeyDown: this._onkeydown, children: [jsx("div", { id: `${this._id}-content`, class: "ui5-li-content", children: jsx("span", { class: "ui5-ghli-title", children: jsx("slot", {}) }) }), this.hasSubItems && jsx("slot", { name: "subItems" })] });
}

// node_modules/@ui5/webcomponents/dist/generated/themes/ListItemGroupHeader.css.js
registerThemePropertiesLoader("@ui5/webcomponents-theming", "sap_horizon", async () => parameters_bundle_css_default);
registerThemePropertiesLoader("@ui5/webcomponents", "sap_horizon", async () => parameters_bundle_css_default2);
var ListItemGroupHeader_css_default = `.ui5-hidden-text{position:absolute;clip:rect(1px,1px,1px,1px);user-select:none;left:-1000px;top:-1000px;pointer-events:none;font-size:0}:host{height:var(--_ui5-v2-8-0_group_header_list_item_height);background:var(--ui5-v2-8-0-group-header-listitem-background-color);color:var(--sapList_TableGroupHeaderTextColor)}:host([has-border]){border-bottom:var(--sapList_BorderWidth) solid var(--sapList_GroupHeaderBorderColor)}:host([actionable]:not([disabled])){cursor:default}.ui5-li-root.ui5-ghli-root{padding-top:.5rem;color:currentColor;font-size:var(--sapFontHeader6Size);font-weight:400;line-height:2rem;margin:0}.ui5-ghli-title{display:block;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;font-weight:700;font-family:var(--sapFontHeaderFamily)}.ui5-li-content{width:100%}
`;

// node_modules/@ui5/webcomponents/dist/types/ListItemAccessibleRole.js
var ListItemAccessibleRole;
(function(ListItemAccessibleRole2) {
  ListItemAccessibleRole2["Group"] = "Group";
  ListItemAccessibleRole2["ListItem"] = "ListItem";
  ListItemAccessibleRole2["MenuItem"] = "MenuItem";
  ListItemAccessibleRole2["TreeItem"] = "TreeItem";
  ListItemAccessibleRole2["Option"] = "Option";
  ListItemAccessibleRole2["None"] = "None";
})(ListItemAccessibleRole || (ListItemAccessibleRole = {}));
var ListItemAccessibleRole_default = ListItemAccessibleRole;

// node_modules/@ui5/webcomponents/dist/ListItemGroupHeader.js
var __decorate3 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ListItemGroupHeader_1;
var ListItemGroupHeader = ListItemGroupHeader_1 = class ListItemGroupHeader2 extends ListItemBase_default {
  constructor() {
    super(...arguments);
    this.accessibleRole = ListItemAccessibleRole_default.ListItem;
  }
  get effectiveAccRole() {
    return toLowercaseEnumValue(this.accessibleRole);
  }
  get groupItem() {
    return true;
  }
  get _pressable() {
    return false;
  }
  get groupHeaderText() {
    return ListItemGroupHeader_1.i18nBundle.getText(GROUP_HEADER_TEXT);
  }
  get ariaLabelText() {
    return [this.textContent, this.accessibleName].filter(Boolean).join(" ");
  }
  get hasSubItems() {
    return this.subItems.length > 0;
  }
};
__decorate3([
  property_default()
], ListItemGroupHeader.prototype, "accessibleName", void 0);
__decorate3([
  property_default()
], ListItemGroupHeader.prototype, "accessibleRole", void 0);
__decorate3([
  slot_default()
], ListItemGroupHeader.prototype, "subItems", void 0);
__decorate3([
  i18n_default("@ui5/wezbcomponents")
], ListItemGroupHeader, "i18nBundle", void 0);
ListItemGroupHeader = ListItemGroupHeader_1 = __decorate3([
  customElement_default({
    tag: "ui5-li-group-header",
    languageAware: true,
    template: ListItemGroupHeaderTemplate,
    styles: [ListItemBase_default.styles, ListItemGroupHeader_css_default]
  })
], ListItemGroupHeader);
ListItemGroupHeader.define();
var ListItemGroupHeader_default = ListItemGroupHeader;

// node_modules/@ui5/webcomponents/dist/DropIndicatorTemplate.js
function DropIndicatorTemplate() {
  return jsx("div", { class: {
    "ui5-di-rect": this.placement === MovePlacement_default.On,
    "ui5-di-needle": this.placement !== MovePlacement_default.On
  } });
}

// node_modules/@ui5/webcomponents/dist/generated/themes/DropIndicator.css.js
registerThemePropertiesLoader("@ui5/webcomponents-theming", "sap_horizon", async () => parameters_bundle_css_default);
registerThemePropertiesLoader("@ui5/webcomponents", "sap_horizon", async () => parameters_bundle_css_default2);
var DropIndicator_css_default = `:host{position:absolute;pointer-events:none;z-index:99}:host([orientation="Vertical"]) .ui5-di-needle{width:.125rem;height:100%;inset-block:0;background:var(--sapContent_DragAndDropActiveColor)}:host([orientation="Vertical"]){margin-left:-.0625rem}:host([orientation="Horizontal"]) .ui5-di-needle{height:.125rem;width:100%;inset-inline:0;background:var(--sapContent_DragAndDropActiveColor)}:host([orientation="Horizontal"]){margin-top:-.0625rem}:host([orientation="Horizontal"][placement="Before"][first]){margin-top:.3125rem}:host([orientation="Horizontal"][placement="After"][last]){margin-top:-.3125rem}:host([orientation="Vertical"]) .ui5-di-needle:before{left:-.1875rem;content:"";position:absolute;width:.25rem;height:.25rem;border-radius:.25rem;border:.125rem solid var(--sapContent_DragAndDropActiveColor);background-color:#fff;pointer-events:none}:host([orientation="Horizontal"]) .ui5-di-needle:before{top:-.1875rem;content:"";position:absolute;width:.25rem;height:.25rem;border-radius:.25rem;border:.125rem solid var(--sapContent_DragAndDropActiveColor);background-color:#fff;pointer-events:none}:host .ui5-di-rect{border:.125rem solid var(--sapContent_DragAndDropActiveColor);position:absolute;inset:0}:host .ui5-di-rect:before{content:" ";position:absolute;inset:0;background:var(--sapContent_DragAndDropActiveColor);opacity:.05}
`;

// node_modules/@ui5/webcomponents/dist/DropIndicator.js
var __decorate4 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var DropIndicator = class DropIndicator2 extends UI5Element_default {
  get _positionProperty() {
    if (this.orientation === Orientation_default.Vertical) {
      return "left";
    }
    return "top";
  }
  constructor() {
    super();
    this.targetReference = null;
    this.ownerReference = null;
    this.placement = "Before";
    this.orientation = "Vertical";
  }
  onAfterRendering() {
    if (!this.targetReference || !this.ownerReference) {
      Object.assign(this.style, {
        display: "none"
      });
      return;
    }
    const { left, width, right, top, bottom, height } = this.targetReference.getBoundingClientRect();
    const { top: containerTop, height: containerHeight } = this.ownerReference.getBoundingClientRect();
    const style = {
      display: "",
      [this._positionProperty]: "",
      width: "",
      height: ""
    };
    let position = 0;
    let isLast = false;
    let isFirst = false;
    if (this.orientation === Orientation_default.Vertical) {
      switch (this.placement) {
        case MovePlacement_default.Before:
          position = left;
          break;
        case MovePlacement_default.On:
          style.width = `${width}px`;
          position = left;
          break;
        case MovePlacement_default.After:
          position = right;
          break;
      }
      style.height = `${height}px`;
    }
    if (this.orientation === Orientation_default.Horizontal) {
      switch (this.placement) {
        case MovePlacement_default.Before:
          position = top;
          break;
        case MovePlacement_default.On:
          style.height = `${height}px`;
          position = top;
          break;
        case MovePlacement_default.After:
          position = bottom;
          break;
      }
      style.width = `${width}px`;
      position -= containerTop;
      if (position <= 0) {
        isFirst = true;
      }
      if (position >= containerHeight) {
        isLast = true;
      }
    }
    style[this._positionProperty] = `${position}px`;
    this.toggleAttribute("first", isFirst);
    this.toggleAttribute("last", isLast);
    Object.assign(this.style, style);
  }
};
__decorate4([
  property_default({ type: Object })
], DropIndicator.prototype, "targetReference", void 0);
__decorate4([
  property_default({ type: Object })
], DropIndicator.prototype, "ownerReference", void 0);
__decorate4([
  property_default()
], DropIndicator.prototype, "placement", void 0);
__decorate4([
  property_default()
], DropIndicator.prototype, "orientation", void 0);
DropIndicator = __decorate4([
  customElement_default({
    tag: "ui5-drop-indicator",
    renderer: JsxRenderer_default,
    styles: DropIndicator_css_default,
    template: DropIndicatorTemplate
  })
], DropIndicator);
DropIndicator.define();
var DropIndicator_default = DropIndicator;

// node_modules/@ui5/webcomponents/dist/ListItemGroupTemplate.js
function ListItemGroupTemplate() {
  return jsxs(Fragment, { children: [this.hasHeader && jsxs(ListItemGroupHeader_default, { focused: this.focused, part: "header", accessibleRole: ListItemAccessibleRole_default.ListItem, children: [this.hasFormattedHeader ? jsx("slot", { name: "header" }) : this.headerText, jsx("div", { role: "list", slot: "subItems", "aria-owns": `${this._id}-content`, "aria-label": this.headerText })] }), jsxs("div", { class: "ui5-group-li-root", onDragEnter: this._ondragenter, onDragOver: this._ondragover, onDrop: this._ondrop, onDragLeave: this._ondragleave, id: `${this._id}-content`, children: [jsx("slot", {}), jsx(DropIndicator_default, { orientation: "Horizontal", ownerReference: this })] })] });
}

// node_modules/@ui5/webcomponents/dist/generated/themes/ListItemGroup.css.js
registerThemePropertiesLoader("@ui5/webcomponents-theming", "sap_horizon", async () => parameters_bundle_css_default);
registerThemePropertiesLoader("@ui5/webcomponents", "sap_horizon", async () => parameters_bundle_css_default2);
var ListItemGroup_css_default = `.ui5-hidden-text{position:absolute;clip:rect(1px,1px,1px,1px);user-select:none;left:-1000px;top:-1000px;pointer-events:none;font-size:0}:host{height:var(--_ui5-v2-8-0_group_header_list_item_height);background:var(--ui5-v2-8-0-group-header-listitem-background-color);color:var(--sapList_TableGroupHeaderTextColor)}.ui5-group-li-root{width:100%;height:100%;position:relative;box-sizing:border-box;padding:0;margin:0;list-style-type:none}
`;

// node_modules/@ui5/webcomponents/dist/ListItemGroup.js
var __decorate5 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ListItemGroup = class ListItemGroup2 extends UI5Element_default {
  constructor() {
    super(...arguments);
    this.focused = false;
  }
  onEnterDOM() {
    DragRegistry_default.subscribe(this);
  }
  onExitDOM() {
    DragRegistry_default.unsubscribe(this);
  }
  get groupHeaderItem() {
    return this.shadowRoot.querySelector("[ui5-li-group-header]");
  }
  get hasHeader() {
    return !!this.headerText || this.hasFormattedHeader;
  }
  get hasFormattedHeader() {
    return !!this.header.length;
  }
  get isListItemGroup() {
    return true;
  }
  get dropIndicatorDOM() {
    return this.shadowRoot.querySelector("[ui5-drop-indicator]");
  }
  _ondragenter(e) {
    e.preventDefault();
  }
  _ondragleave(e) {
    if (e.relatedTarget instanceof Node && this.shadowRoot.contains(e.relatedTarget)) {
      return;
    }
    this.dropIndicatorDOM.targetReference = null;
  }
  _ondragover(e) {
    const draggedElement2 = DragRegistry_default.getDraggedElement();
    if (!(e.target instanceof HTMLElement) || !draggedElement2) {
      return;
    }
    const closestPosition = findClosestPosition(this.items, e.clientY, Orientation_default.Vertical);
    if (!closestPosition) {
      this.dropIndicatorDOM.targetReference = null;
      return;
    }
    let placements = closestPosition.placements;
    if (closestPosition.element === draggedElement2) {
      placements = placements.filter((placement) => placement !== MovePlacement_default.On);
    }
    const placementAccepted = placements.some((placement) => {
      const beforeItemMovePrevented = !this.fireDecoratorEvent("move-over", {
        source: {
          element: draggedElement2
        },
        destination: {
          element: closestPosition.element,
          placement
        }
      });
      if (beforeItemMovePrevented) {
        e.preventDefault();
        this.dropIndicatorDOM.targetReference = closestPosition.element;
        this.dropIndicatorDOM.placement = placement;
        return true;
      }
      return false;
    });
    if (!placementAccepted) {
      this.dropIndicatorDOM.targetReference = null;
    }
  }
  _ondrop(e) {
    e.preventDefault();
    this.fireDecoratorEvent("move", {
      source: {
        element: DragRegistry_default.getDraggedElement()
      },
      destination: {
        element: this.dropIndicatorDOM.targetReference,
        placement: this.dropIndicatorDOM.placement
      }
    });
    this.dropIndicatorDOM.targetReference = null;
  }
};
__decorate5([
  property_default()
], ListItemGroup.prototype, "headerText", void 0);
__decorate5([
  property_default()
], ListItemGroup.prototype, "headerAccessibleName", void 0);
__decorate5([
  slot_default({
    "default": true,
    invalidateOnChildChange: true,
    type: HTMLElement
  })
], ListItemGroup.prototype, "items", void 0);
__decorate5([
  property_default({ type: Boolean })
], ListItemGroup.prototype, "focused", void 0);
__decorate5([
  slot_default({ type: HTMLElement })
], ListItemGroup.prototype, "header", void 0);
ListItemGroup = __decorate5([
  customElement_default({
    tag: "ui5-li-group",
    renderer: JsxRenderer_default,
    languageAware: true,
    template: ListItemGroupTemplate,
    styles: [ListItemGroup_css_default]
  }),
  event_strict_default("move-over", {
    bubbles: true,
    cancelable: true
  }),
  event_strict_default("move", {
    bubbles: true
  })
], ListItemGroup);
ListItemGroup.define();
var isInstanceOfListItemGroup = (object) => {
  return "isListItemGroup" in object;
};
var ListItemGroup_default = ListItemGroup;

// node_modules/@ui5/webcomponents-base/dist/util/dragAndDrop/handleDragOver.js
function handleDragOver(e, component, position, target, settings = {}) {
  const draggedElement2 = DragRegistry_default.getDraggedElement();
  const dragOverResult = {
    targetReference: null,
    placement: null
  };
  if (!draggedElement2 && !(settings == null ? void 0 : settings.crossDnD)) {
    return dragOverResult;
  }
  const placements = position.placements;
  dragOverResult.targetReference = e.target;
  const placementAccepted = placements.some((placement) => {
    const originalEvent = settings.originalEvent ? { originalEvent: e } : {};
    const beforeItemMovePrevented = !component.fireDecoratorEvent("move-over", {
      ...originalEvent,
      source: {
        element: draggedElement2
      },
      destination: {
        element: target,
        placement
      }
    });
    if (beforeItemMovePrevented) {
      e.preventDefault();
      dragOverResult.targetReference = position.element;
      dragOverResult.placement = placement;
      return true;
    }
    return false;
  });
  if (!placementAccepted) {
    dragOverResult.targetReference = null;
  }
  return dragOverResult;
}
var handleDragOver_default = handleDragOver;

// node_modules/@ui5/webcomponents-base/dist/util/dragAndDrop/handleDrop.js
function handleDrop(e, component, target, placement, settings = {}) {
  e.preventDefault();
  const draggedElement2 = DragRegistry_default.getDraggedElement();
  if (!draggedElement2 && (settings == null ? void 0 : settings.crossDnD)) {
    return;
  }
  const originalEvent = settings.originalEvent ? { originalEvent: e } : {};
  component.fireDecoratorEvent("move", {
    ...originalEvent,
    source: {
      element: draggedElement2
    },
    destination: {
      element: target,
      placement
    }
  });
  draggedElement2 == null ? void 0 : draggedElement2.focus();
}
var handleDrop_default = handleDrop;

// node_modules/@ui5/webcomponents-base/dist/util/getNormalizedTarget.js
var getNormalizedTarget = (target) => {
  let element = target;
  if (target.shadowRoot && target.shadowRoot.activeElement) {
    element = target.shadowRoot.activeElement;
  }
  return element;
};
var getNormalizedTarget_default = getNormalizedTarget;

// node_modules/@ui5/webcomponents-base/dist/util/debounce.js
var debounceInterval = null;
var debounce = (fn, delay) => {
  debounceInterval && clearTimeout(debounceInterval);
  debounceInterval = setTimeout(() => {
    debounceInterval = null;
    fn();
  }, delay);
};
var debounce_default = debounce;

// node_modules/@ui5/webcomponents-base/dist/util/isElementInView.js
var isElementInView = (el) => {
  const rect = el.getBoundingClientRect();
  return rect.top >= 0 && rect.left >= 0 && rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) && rect.right <= (window.innerWidth || document.documentElement.clientWidth);
};
var isElementInView_default = isElementInView;

// node_modules/@ui5/webcomponents/dist/types/ListGrowingMode.js
var ListGrowingMode;
(function(ListGrowingMode2) {
  ListGrowingMode2["Button"] = "Button";
  ListGrowingMode2["Scroll"] = "Scroll";
  ListGrowingMode2["None"] = "None";
})(ListGrowingMode || (ListGrowingMode = {}));
var ListGrowingMode_default = ListGrowingMode;

// node_modules/@ui5/webcomponents/dist/ListTemplate.js
function ListTemplate() {
  return jsx("div", { class: "ui5-list-root", onFocusIn: this._onfocusin, onKeyDown: this._onkeydown, onDragEnter: this._ondragenter, onDragOver: this._ondragover, onDrop: this._ondrop, onDragLeave: this._ondragleave, "onui5-close": this.onItemClose, "onui5-toggle": this.onItemToggle, "onui5-request-tabindex-change": this.onItemTabIndexChange, "onui5-_focused": this.onItemFocused, "onui5-forward-after": this.onForwardAfter, "onui5-forward-before": this.onForwardBefore, "onui5-selection-requested": this.onSelectionRequested, "onui5-focus-requested": this.onFocusRequested, "onui5-_press": this.onItemPress, children: jsxs(BusyIndicator_default, { id: `${this._id}-busyIndicator`, delay: this.loadingDelay, active: this.showBusyIndicatorOverlay, class: "ui5-list-busy-indicator", children: [jsxs("div", { class: "ui5-list-scroll-container", children: [this.header.length > 0 && jsx("slot", { name: "header" }), this.shouldRenderH1 && jsx("header", { id: this.headerID, class: "ui5-list-header", children: this.headerText }), this.hasData && jsx("div", { id: `${this._id}-before`, tabindex: 0, role: "none", class: "ui5-list-focusarea" }), jsx("span", { id: `${this._id}-modeLabel`, class: "ui5-hidden-text", children: this.ariaLabelModeText }), jsxs("ul", { id: `${this._id}-listUl`, class: "ui5-list-ul", role: this.listAccessibleRole, "aria-label": this.ariaLabelTxt, "aria-labelledby": this.ariaLabelledBy, "aria-description": this.ariaDescriptionText, children: [jsx("slot", {}), this.showNoDataText && jsx("li", { tabindex: 0, id: `${this._id}-nodata`, class: "ui5-list-nodata", role: "listitem", children: jsx("div", { id: `${this._id}-nodata-text`, class: "ui5-list-nodata-text", children: this.noDataText }) })] }), this.growsWithButton && moreRow.call(this), this.footerText && jsx("footer", { id: `${this._id}-footer`, class: "ui5-list-footer", children: this.footerText }), this.hasData && jsx("div", { id: `${this._id}-after`, tabindex: 0, role: "none", class: "ui5-list-focusarea" }), jsx("span", { tabindex: -1, "aria-hidden": "true", class: "ui5-list-end-marker" })] }), jsx(DropIndicator_default, { orientation: "Horizontal", ownerReference: this })] }) });
}
function moreRow() {
  return jsx("div", { class: "ui5-growing-button", part: "growing-button", children: jsxs("div", { id: `${this._id}-growing-btn`, role: "button", tabindex: 0, part: "growing-button-inner", class: {
    "ui5-growing-button-inner": true,
    "ui5-growing-button-inner-active": this._loadMoreActive
  }, "aria-labelledby": `${this._id}-growingButton-text`, onClick: this._onLoadMoreClick, onKeyDown: this._onLoadMoreKeydown, onKeyUp: this._onLoadMoreKeyup, onMouseDown: this._onLoadMoreMousedown, onMouseUp: this._onLoadMoreMouseup, children: [this.loading && jsx(BusyIndicator_default, { delay: this.loadingDelay, part: "growing-button-busy-indicator", class: "ui5-list-growing-button-busy-indicator", active: true }), jsx("span", { id: `${this._id}-growingButton-text`, class: "ui5-growing-button-text", "growing-button-text": true, children: this._growingButtonText })] }) });
}

// node_modules/@ui5/webcomponents/dist/generated/themes/List.css.js
registerThemePropertiesLoader("@ui5/webcomponents-theming", "sap_horizon", async () => parameters_bundle_css_default);
registerThemePropertiesLoader("@ui5/webcomponents", "sap_horizon", async () => parameters_bundle_css_default2);
var List_css_default = `.ui5-hidden-text{position:absolute;clip:rect(1px,1px,1px,1px);user-select:none;left:-1000px;top:-1000px;pointer-events:none;font-size:0}.ui5-growing-button{display:flex;align-items:center;padding:var(--_ui5-v2-8-0_load_more_padding);border-top:1px solid var(--sapList_BorderColor);border-bottom:var(--_ui5-v2-8-0_load_more_border-bottom);box-sizing:border-box;cursor:pointer;outline:none}.ui5-growing-button-inner{display:flex;align-items:center;justify-content:center;flex-direction:row;min-height:var(--_ui5-v2-8-0_load_more_text_height);width:100%;color:var(--sapButton_TextColor);background-color:var(--sapList_Background);border:var(--_ui5-v2-8-0_load_more_border);border-radius:var(--_ui5-v2-8-0_load_more_border_radius);box-sizing:border-box}.ui5-growing-button-inner:focus-visible{outline:var(--_ui5-v2-8-0_load_more_outline_width) var(--sapContent_FocusStyle) var(--sapContent_FocusColor);outline-offset:-.125rem;border-color:transparent}.ui5-growing-button-inner:hover{background-color:var(--sapList_Hover_Background)}.ui5-growing-button-inner:active,.ui5-growing-button-inner.ui5-growing-button-inner--active{background-color:var(--sapList_Active_Background);border-color:var(--sapList_Active_Background)}.ui5-growing-button-inner:active>*,.ui5-growing-button-inner.ui5-growing-button-inner--active>*{color:var(--sapList_Active_TextColor)}.ui5-growing-button-text{text-align:center;font-family:"72override",var(--sapFontFamily);white-space:nowrap;overflow:hidden;text-overflow:ellipsis;box-sizing:border-box}.ui5-growing-button-text{height:var(--_ui5-v2-8-0_load_more_text_height);padding:.875rem 1rem 1rem;font-size:var(--_ui5-v2-8-0_load_more_text_font_size);font-weight:700}:host([loading]) .ui5-list-growing-button-busy-indicator:not([_is-busy]){display:none}:host([loading]) .ui5-list-growing-button-busy-indicator[_is-busy]+.ui5-growing-button-text{padding-left:.5rem}:host(:not([hidden])){display:block;max-width:100%;width:100%;-webkit-tap-highlight-color:transparent}:host([indent]) .ui5-list-root{padding:2rem}:host([separators="None"]) .ui5-list-nodata{border-bottom:0}.ui5-list-root,.ui5-list-busy-indicator{width:100%;height:100%;position:relative;box-sizing:border-box}.ui5-list-scroll-container{overflow:auto;height:100%;width:100%}.ui5-list-ul{list-style-type:none;padding:0;margin:0}.ui5-list-ul:focus{outline:none}.ui5-list-focusarea{position:fixed}.ui5-list-header{overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;font-size:var(--sapFontHeader4Size);font-family:"72override",var(--sapFontFamily);color:var(--sapGroup_TitleTextColor);height:3rem;line-height:3rem;padding:0 1rem;background-color:var(--sapGroup_TitleBackground);border-bottom:1px solid var(--sapGroup_TitleBorderColor)}.ui5-list-footer{height:2rem;box-sizing:border-box;-webkit-text-size-adjust:none;font-size:var(--sapFontSize);font-family:"72override",var(--sapFontFamily);line-height:2rem;background-color:var(--sapList_FooterBackground);color:var(--ui5-v2-8-0_list_footer_text_color);padding:0 1rem;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.ui5-list-nodata{list-style-type:none;display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;-webkit-box-pack:center;justify-content:center;color:var(--sapTextColor);background-color:var(--sapList_Background);border-bottom:1px solid var(--sapList_BorderColor);padding:0 1rem!important;outline:none;height:var(--_ui5-v2-8-0_list_no_data_height);font-size:var(--_ui5-v2-8-0_list_no_data_font_size);font-family:"72override",var(--sapFontFamily);position:relative}.ui5-list-nodata:focus:after{content:"";border:var(--sapContent_FocusWidth) var(--sapContent_FocusStyle) var(--sapContent_FocusColor);position:absolute;inset:.125rem;pointer-events:none}.ui5-list-nodata-text{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}:host([growing="Scroll"]) .ui5-list-end-marker{display:inline-block}
`;

// node_modules/@ui5/webcomponents/dist/List.js
var __decorate6 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var List_1;
var INFINITE_SCROLL_DEBOUNCE_RATE = 250;
var PAGE_UP_DOWN_SIZE = 10;
var List = List_1 = class List2 extends UI5Element_default {
  constructor() {
    super();
    this.indent = false;
    this.selectionMode = "None";
    this.separators = "All";
    this.growing = "None";
    this.loading = false;
    this.loadingDelay = 1e3;
    this.accessibleRole = "List";
    this._inViewport = false;
    this._loadMoreActive = false;
    this._previouslyFocusedItem = null;
    this._forwardingFocus = false;
    this.resizeListenerAttached = false;
    this.listEndObserved = false;
    this._itemNavigation = new ItemNavigation_default(this, {
      skipItemsSize: PAGE_UP_DOWN_SIZE,
      // PAGE_UP and PAGE_DOWN will skip trough 10 items
      navigationMode: NavigationMode_default.Vertical,
      getItemsCallback: () => this.getEnabledItems()
    });
    this._handleResize = this.checkListInViewport.bind(this);
    this._handleResize = this.checkListInViewport.bind(this);
    this.initialIntersection = true;
    this._groupCount = 0;
    this._groupItemCount = 0;
    this.onItemFocusedBound = this.onItemFocused.bind(this);
    this.onForwardAfterBound = this.onForwardAfter.bind(this);
    this.onForwardBeforeBound = this.onForwardBefore.bind(this);
    this.onItemTabIndexChangeBound = this.onItemTabIndexChange.bind(this);
  }
  /**
   * Returns an array containing the list item instances without the groups in a flat structure.
   * @default []
   * @since 2.0.0
   * @public
   */
  get listItems() {
    return this.getItems();
  }
  _updateAssociatedLabelsTexts() {
    this._associatedDescriptionRefTexts = getAllAccessibleDescriptionRefTexts(this);
    this._associatedLabelsRefTexts = getAllAccessibleNameRefTexts(this);
  }
  onEnterDOM() {
    registerUI5Element(this, this._updateAssociatedLabelsTexts.bind(this));
    DragRegistry_default.subscribe(this);
  }
  onExitDOM() {
    deregisterUI5Element(this);
    this.unobserveListEnd();
    this.resizeListenerAttached = false;
    ResizeHandler_default.deregister(this.getDomRef(), this._handleResize);
    DragRegistry_default.unsubscribe(this);
  }
  onBeforeRendering() {
    this.detachGroupHeaderEvents();
    this.prepareListItems();
  }
  onAfterRendering() {
    this.attachGroupHeaderEvents();
    if (this.growsOnScroll) {
      this.observeListEnd();
    } else if (this.listEndObserved) {
      this.unobserveListEnd();
    }
    if (this.grows) {
      this.checkListInViewport();
      this.attachForResize();
    }
  }
  attachGroupHeaderEvents() {
    this.getItems().forEach((item) => {
      if (item.hasAttribute("ui5-li-group-header")) {
        item.addEventListener("ui5-_focused", this.onItemFocusedBound);
        item.addEventListener("ui5-forward-after", this.onForwardAfterBound);
        item.addEventListener("ui5-forward-before", this.onForwardBeforeBound);
      }
    });
  }
  detachGroupHeaderEvents() {
    this.getItems().forEach((item) => {
      if (item.hasAttribute("ui5-li-group-header")) {
        item.removeEventListener("ui5-_focused", this.onItemFocusedBound);
        item.removeEventListener("ui5-forward-after", this.onForwardAfterBound);
        item.removeEventListener("ui5-forward-before", this.onForwardBeforeBound);
      }
    });
  }
  attachForResize() {
    if (!this.resizeListenerAttached) {
      this.resizeListenerAttached = true;
      ResizeHandler_default.register(this.getDomRef(), this._handleResize);
    }
  }
  get shouldRenderH1() {
    return !this.header.length && this.headerText;
  }
  get headerID() {
    return `${this._id}-header`;
  }
  get modeLabelID() {
    return `${this._id}-modeLabel`;
  }
  get listEndDOM() {
    return this.shadowRoot.querySelector(".ui5-list-end-marker");
  }
  get dropIndicatorDOM() {
    return this.shadowRoot.querySelector("[ui5-drop-indicator]");
  }
  get hasData() {
    return this.getItems().length !== 0;
  }
  get showBusyIndicatorOverlay() {
    return !this.growsWithButton && this.loading;
  }
  get showNoDataText() {
    return !this.hasData && this.noDataText;
  }
  get isDelete() {
    return this.selectionMode === ListSelectionMode_default.Delete;
  }
  get isSingleSelect() {
    return [
      ListSelectionMode_default.Single,
      ListSelectionMode_default.SingleStart,
      ListSelectionMode_default.SingleEnd,
      ListSelectionMode_default.SingleAuto
    ].includes(this.selectionMode);
  }
  get isMultiple() {
    return this.selectionMode === ListSelectionMode_default.Multiple;
  }
  get ariaLabelledBy() {
    if (this.accessibleNameRef || this.accessibleName) {
      return void 0;
    }
    const ids = [];
    if (this.isMultiple || this.isSingleSelect || this.isDelete) {
      ids.push(this.modeLabelID);
    }
    if (this.shouldRenderH1) {
      ids.push(this.headerID);
    }
    return ids.length ? ids.join(" ") : void 0;
  }
  get ariaLabelTxt() {
    return this._associatedLabelsRefTexts || getEffectiveAriaLabelText(this);
  }
  get ariaDescriptionText() {
    return this._associatedDescriptionRefTexts || getEffectiveAriaDescriptionText(this) || this._getDescriptionForGroups();
  }
  _getDescriptionForGroups() {
    let description = "";
    if (this._groupCount > 0) {
      if (this.accessibleRole === ListAccessibleRole_default.List) {
        description = List_1.i18nBundle.getText(LIST_ROLE_LIST_GROUP_DESCRIPTION, this._groupCount, this._groupItemCount);
      } else if (this.accessibleRole === ListAccessibleRole_default.ListBox) {
        description = List_1.i18nBundle.getText(LIST_ROLE_LISTBOX_GROUP_DESCRIPTION, this._groupCount);
      }
    }
    return description;
  }
  get ariaLabelModeText() {
    if (this.hasData) {
      if (this.isMultiple) {
        return List_1.i18nBundle.getText(ARIA_LABEL_LIST_MULTISELECTABLE);
      }
      if (this.isSingleSelect) {
        return List_1.i18nBundle.getText(ARIA_LABEL_LIST_SELECTABLE);
      }
      if (this.isDelete) {
        return List_1.i18nBundle.getText(ARIA_LABEL_LIST_DELETABLE);
      }
    }
    return "";
  }
  get grows() {
    return this.growing !== ListGrowingMode_default.None;
  }
  get growsOnScroll() {
    return this.growing === ListGrowingMode_default.Scroll;
  }
  get growsWithButton() {
    return this.growing === ListGrowingMode_default.Button;
  }
  get _growingButtonText() {
    return this.growingButtonText || List_1.i18nBundle.getText(LOAD_MORE_TEXT);
  }
  get listAccessibleRole() {
    return toLowercaseEnumValue(this.accessibleRole);
  }
  get classes() {
    return {
      root: {
        "ui5-list-root": true
      }
    };
  }
  prepareListItems() {
    const slottedItems = this.getItemsForProcessing();
    slottedItems.forEach((item, key) => {
      const isLastChild = key === slottedItems.length - 1;
      const showBottomBorder = this.separators === ListSeparator_default.All || this.separators === ListSeparator_default.Inner && !isLastChild;
      if (item.hasConfigurableMode) {
        item._selectionMode = this.selectionMode;
      }
      item.hasBorder = showBottomBorder;
    });
  }
  async observeListEnd() {
    if (!this.listEndObserved) {
      await renderFinished();
      this.getIntersectionObserver().observe(this.listEndDOM);
      this.listEndObserved = true;
    }
  }
  unobserveListEnd() {
    if (this.growingIntersectionObserver) {
      this.growingIntersectionObserver.disconnect();
      this.growingIntersectionObserver = null;
      this.listEndObserved = false;
    }
  }
  onInteresection(entries) {
    if (this.initialIntersection) {
      this.initialIntersection = false;
      return;
    }
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        debounce_default(this.loadMore.bind(this), INFINITE_SCROLL_DEBOUNCE_RATE);
      }
    });
  }
  /*
  * ITEM SELECTION BASED ON THE CURRENT MODE
  */
  onSelectionRequested(e) {
    const previouslySelectedItems = this.getSelectedItems();
    let selectionChange = false;
    if (this.selectionMode !== ListSelectionMode_default.None && this[`handle${this.selectionMode}`]) {
      selectionChange = this[`handle${this.selectionMode}`](e.detail.item, !!e.detail.selected);
    }
    if (selectionChange) {
      const changePrevented = !this.fireDecoratorEvent("selection-change", {
        selectedItems: this.getSelectedItems(),
        previouslySelectedItems,
        selectionComponentPressed: e.detail.selectionComponentPressed,
        targetItem: e.detail.item,
        key: e.detail.key
      });
      if (changePrevented) {
        this._revertSelection(previouslySelectedItems);
      }
    }
  }
  handleSingle(item) {
    if (item.selected) {
      return false;
    }
    this.deselectSelectedItems();
    item.selected = true;
    return true;
  }
  handleSingleStart(item) {
    return this.handleSingle(item);
  }
  handleSingleEnd(item) {
    return this.handleSingle(item);
  }
  handleSingleAuto(item) {
    return this.handleSingle(item);
  }
  handleMultiple(item, selected) {
    item.selected = selected;
    return true;
  }
  handleDelete(item) {
    this.fireDecoratorEvent("item-delete", { item });
    return true;
  }
  deselectSelectedItems() {
    this.getSelectedItems().forEach((item) => {
      item.selected = false;
    });
  }
  getSelectedItems() {
    return this.getItems().filter((item) => item.selected);
  }
  getEnabledItems() {
    return this.getItems().filter((item) => item._focusable);
  }
  getItems() {
    const items = [];
    const slottedItems = this.getSlottedNodes("items");
    let groupCount = 0;
    let groupItemCount = 0;
    slottedItems.forEach((item) => {
      if (isInstanceOfListItemGroup(item)) {
        const groupItems = [item.groupHeaderItem, ...item.items.filter((listItem) => listItem.assignedSlot)].filter(Boolean);
        items.push(...groupItems);
        groupCount++;
        groupItemCount += groupItems.length - 1;
      } else {
        item.assignedSlot && items.push(item);
      }
    });
    this._groupCount = groupCount;
    this._groupItemCount = groupItemCount;
    return items;
  }
  getItemsForProcessing() {
    return this.getItems();
  }
  _revertSelection(previouslySelectedItems) {
    this.getItems().forEach((item) => {
      const oldSelection = previouslySelectedItems.indexOf(item) !== -1;
      const multiSelectCheckBox = item.shadowRoot.querySelector(".ui5-li-multisel-cb");
      const singleSelectRadioButton = item.shadowRoot.querySelector(".ui5-li-singlesel-radiobtn");
      item.selected = oldSelection;
      if (multiSelectCheckBox) {
        multiSelectCheckBox.checked = oldSelection;
      } else if (singleSelectRadioButton) {
        singleSelectRadioButton.checked = oldSelection;
      }
    });
  }
  _onkeydown(e) {
    if (isEnd(e)) {
      this._handleEnd();
      e.preventDefault();
      return;
    }
    if (isHome(e)) {
      this._handleHome();
      return;
    }
    if (isDown(e)) {
      this._handleDown();
      e.preventDefault();
      return;
    }
    if (isCtrl(e)) {
      this._moveItem(e.target, e);
      return;
    }
    if (isTabNext(e)) {
      this._handleTabNext(e);
    }
  }
  _moveItem(item, e) {
    if (!item || !item.movable) {
      return;
    }
    const closestPositions = findClosestPositionsByKey(this.items, item, e);
    if (!closestPositions.length) {
      return;
    }
    e.preventDefault();
    const acceptedPosition = closestPositions.find(({ element, placement }) => {
      return !this.fireDecoratorEvent("move-over", {
        originalEvent: e,
        source: {
          element: item
        },
        destination: {
          element,
          placement
        }
      });
    });
    if (acceptedPosition) {
      this.fireDecoratorEvent("move", {
        originalEvent: e,
        source: {
          element: item
        },
        destination: {
          element: acceptedPosition.element,
          placement: acceptedPosition.placement
        }
      });
      item.focus();
    }
  }
  _onLoadMoreKeydown(e) {
    if (isSpace(e)) {
      e.preventDefault();
      this._loadMoreActive = true;
    }
    if (isEnter(e)) {
      this._onLoadMoreClick();
      this._loadMoreActive = true;
    }
    if (isTabNext(e)) {
      this.focusAfterElement();
    }
    if (isUp(e)) {
      this._handleLodeMoreUp(e);
      return;
    }
    if (isTabPrevious(e)) {
      if (this.getPreviouslyFocusedItem()) {
        this.focusPreviouslyFocusedItem();
      } else {
        this.focusFirstItem();
      }
      e.preventDefault();
    }
  }
  _onLoadMoreKeyup(e) {
    if (isSpace(e)) {
      this._onLoadMoreClick();
    }
    this._loadMoreActive = false;
  }
  _onLoadMoreMousedown() {
    this._loadMoreActive = true;
  }
  _onLoadMoreMouseup() {
    this._loadMoreActive = false;
  }
  _onLoadMoreClick() {
    this.loadMore();
  }
  _handleLodeMoreUp(e) {
    const growingButton = this.getGrowingButton();
    if (growingButton === e.target) {
      const items = this.getItems();
      const lastItem = items[items.length - 1];
      this.focusItem(lastItem);
      e.preventDefault();
      e.stopImmediatePropagation();
    }
  }
  checkListInViewport() {
    this._inViewport = isElementInView_default(this.getDomRef());
  }
  loadMore() {
    if (this.children.length > 0) {
      this.fireDecoratorEvent("load-more");
    }
  }
  /*
  * KEYBOARD SUPPORT
  */
  _handleTabNext(e) {
    let lastTabbableEl;
    const target = getNormalizedTarget_default(e.target);
    if (!lastTabbableEl) {
      return;
    }
    if (lastTabbableEl === target) {
      if (this.getFirstItem((x) => x.selected && x._focusable)) {
        this.focusFirstSelectedItem();
      } else if (this.getPreviouslyFocusedItem()) {
        this.focusPreviouslyFocusedItem();
      } else {
        this.focusFirstItem();
      }
      e.stopImmediatePropagation();
      e.preventDefault();
    }
  }
  _handleHome() {
    if (!this.growsWithButton) {
      return;
    }
    this.focusFirstItem();
  }
  _handleEnd() {
    if (!this.growsWithButton) {
      return;
    }
    this._shouldFocusGrowingButton();
  }
  _handleDown() {
    if (!this.growsWithButton) {
      return;
    }
    this._shouldFocusGrowingButton();
  }
  _onfocusin(e) {
    const target = getNormalizedTarget_default(e.target);
    if (!this.isForwardElement(target)) {
      return;
    }
    if (!this.getPreviouslyFocusedItem()) {
      if (this.growsWithButton && this.isForwardAfterElement(target)) {
        this.focusGrowingButton();
      } else {
        this.focusFirstItem();
      }
      e.stopImmediatePropagation();
      return;
    }
    if (!this.getForwardingFocus()) {
      if (this.growsWithButton && this.isForwardAfterElement(target)) {
        this.focusGrowingButton();
        e.stopImmediatePropagation();
        return;
      }
      this.focusPreviouslyFocusedItem();
    }
    e.stopImmediatePropagation();
    this.setForwardingFocus(false);
  }
  _ondragenter(e) {
    e.preventDefault();
  }
  _ondragleave(e) {
    if (e.relatedTarget instanceof Node && this.shadowRoot.contains(e.relatedTarget)) {
      return;
    }
    this.dropIndicatorDOM.targetReference = null;
  }
  _ondragover(e) {
    if (!(e.target instanceof HTMLElement)) {
      return;
    }
    const closestPosition = findClosestPosition(this.items, e.clientY, Orientation_default.Vertical);
    if (!closestPosition) {
      this.dropIndicatorDOM.targetReference = null;
      return;
    }
    const { targetReference, placement } = handleDragOver_default(e, this, closestPosition, closestPosition.element, { originalEvent: true });
    this.dropIndicatorDOM.targetReference = targetReference;
    this.dropIndicatorDOM.placement = placement;
  }
  _ondrop(e) {
    var _a, _b;
    if (!((_a = this.dropIndicatorDOM) == null ? void 0 : _a.targetReference) || !((_b = this.dropIndicatorDOM) == null ? void 0 : _b.placement)) {
      e.preventDefault();
      return;
    }
    handleDrop_default(e, this, this.dropIndicatorDOM.targetReference, this.dropIndicatorDOM.placement, { originalEvent: true });
    this.dropIndicatorDOM.targetReference = null;
  }
  isForwardElement(element) {
    const elementId = element.id;
    const beforeElement = this.getBeforeElement();
    if (this._id === elementId || beforeElement && beforeElement.id === elementId) {
      return true;
    }
    return this.isForwardAfterElement(element);
  }
  isForwardAfterElement(element) {
    const elementId = element.id;
    const afterElement = this.getAfterElement();
    return afterElement && afterElement.id === elementId;
  }
  onItemTabIndexChange(e) {
    e.stopPropagation();
    const target = e.target;
    this._itemNavigation.setCurrentItem(target);
  }
  onItemFocused(e) {
    const target = e.target;
    e.stopPropagation();
    this._itemNavigation.setCurrentItem(target);
    this.fireDecoratorEvent("item-focused", { item: target });
    if (this.selectionMode === ListSelectionMode_default.SingleAuto) {
      const detail = {
        item: target,
        selectionComponentPressed: false,
        selected: true,
        key: e.detail.key
      };
      this.onSelectionRequested({ detail });
    }
  }
  onItemPress(e) {
    const pressedItem = e.detail.item;
    if (!this.fireDecoratorEvent("item-click", { item: pressedItem })) {
      return;
    }
    if (this.selectionMode !== ListSelectionMode_default.Delete) {
      const detail = {
        item: pressedItem,
        selectionComponentPressed: false,
        selected: !pressedItem.selected,
        key: e.detail.key
      };
      this.onSelectionRequested({ detail });
    }
  }
  // This is applicable to NotificationListItem
  onItemClose(e) {
    var _a;
    const target = e.target;
    const shouldFireItemClose = (target == null ? void 0 : target.hasAttribute("ui5-li-notification")) || (target == null ? void 0 : target.hasAttribute("ui5-li-notification-group"));
    if (shouldFireItemClose) {
      this.fireDecoratorEvent("item-close", { item: (_a = e.detail) == null ? void 0 : _a.item });
    }
  }
  onItemToggle(e) {
    this.fireDecoratorEvent("item-toggle", { item: e.detail.item });
  }
  onForwardBefore(e) {
    this.setPreviouslyFocusedItem(e.target);
    this.focusBeforeElement();
    e.stopPropagation();
  }
  onForwardAfter(e) {
    this.setPreviouslyFocusedItem(e.target);
    if (!this.growsWithButton) {
      this.focusAfterElement();
    } else {
      this.focusGrowingButton();
      e.preventDefault();
    }
    e.stopPropagation();
  }
  focusBeforeElement() {
    this.setForwardingFocus(true);
    this.getBeforeElement().focus();
  }
  focusAfterElement() {
    this.setForwardingFocus(true);
    this.getAfterElement().focus();
  }
  focusGrowingButton() {
    const growingBtn = this.getGrowingButton();
    if (growingBtn) {
      growingBtn.focus();
    }
  }
  _shouldFocusGrowingButton() {
    const items = this.getItems();
    const lastIndex = items.length - 1;
    const currentIndex = this._itemNavigation._currentIndex;
    if (currentIndex !== -1 && currentIndex === lastIndex) {
      this.focusGrowingButton();
    }
  }
  getGrowingButton() {
    return this.shadowRoot.querySelector(`[id="${this._id}-growing-btn"]`);
  }
  /**
   * Focuses the first list item and sets its tabindex to "0" via the ItemNavigation
   * @protected
   */
  focusFirstItem() {
    const firstItem = this.getFirstItem((x) => x._focusable);
    if (firstItem) {
      firstItem.focus();
    }
  }
  focusPreviouslyFocusedItem() {
    const previouslyFocusedItem = this.getPreviouslyFocusedItem();
    if (previouslyFocusedItem) {
      previouslyFocusedItem.focus();
    }
  }
  focusFirstSelectedItem() {
    const firstSelectedItem = this.getFirstItem((x) => x.selected && x._focusable);
    if (firstSelectedItem) {
      firstSelectedItem.focus();
    }
  }
  /**
   * Focuses a list item and sets its tabindex to "0" via the ItemNavigation
   * @protected
   * @param item
   */
  focusItem(item) {
    this._itemNavigation.setCurrentItem(item);
    item.focus();
  }
  onFocusRequested(e) {
    setTimeout(() => {
      this.setPreviouslyFocusedItem(e.target);
      this.focusPreviouslyFocusedItem();
    }, 0);
  }
  setForwardingFocus(forwardingFocus) {
    this._forwardingFocus = forwardingFocus;
  }
  getForwardingFocus() {
    return this._forwardingFocus;
  }
  setPreviouslyFocusedItem(item) {
    this._previouslyFocusedItem = item;
  }
  getPreviouslyFocusedItem() {
    return this._previouslyFocusedItem;
  }
  getFirstItem(filter) {
    const slottedItems = this.getItems();
    let firstItem = null;
    if (!filter) {
      return slottedItems.length ? slottedItems[0] : null;
    }
    for (let i = 0; i < slottedItems.length; i++) {
      if (filter(slottedItems[i])) {
        firstItem = slottedItems[i];
        break;
      }
    }
    return firstItem;
  }
  getAfterElement() {
    if (!this._afterElement) {
      this._afterElement = this.shadowRoot.querySelector(`[id="${this._id}-after"]`);
    }
    return this._afterElement;
  }
  getBeforeElement() {
    if (!this._beforeElement) {
      this._beforeElement = this.shadowRoot.querySelector(`[id="${this._id}-before"]`);
    }
    return this._beforeElement;
  }
  getIntersectionObserver() {
    if (!this.growingIntersectionObserver) {
      this.growingIntersectionObserver = new IntersectionObserver(this.onInteresection.bind(this), {
        root: null,
        rootMargin: "0px",
        threshold: 1
      });
    }
    return this.growingIntersectionObserver;
  }
};
__decorate6([
  property_default()
], List.prototype, "headerText", void 0);
__decorate6([
  property_default()
], List.prototype, "footerText", void 0);
__decorate6([
  property_default({ type: Boolean })
], List.prototype, "indent", void 0);
__decorate6([
  property_default()
], List.prototype, "selectionMode", void 0);
__decorate6([
  property_default()
], List.prototype, "noDataText", void 0);
__decorate6([
  property_default()
], List.prototype, "separators", void 0);
__decorate6([
  property_default()
], List.prototype, "growing", void 0);
__decorate6([
  property_default()
], List.prototype, "growingButtonText", void 0);
__decorate6([
  property_default({ type: Boolean })
], List.prototype, "loading", void 0);
__decorate6([
  property_default({ type: Number })
], List.prototype, "loadingDelay", void 0);
__decorate6([
  property_default()
], List.prototype, "accessibleName", void 0);
__decorate6([
  property_default()
], List.prototype, "accessibleNameRef", void 0);
__decorate6([
  property_default()
], List.prototype, "accessibleDescription", void 0);
__decorate6([
  property_default()
], List.prototype, "accessibleDescriptionRef", void 0);
__decorate6([
  property_default({ noAttribute: true })
], List.prototype, "_associatedDescriptionRefTexts", void 0);
__decorate6([
  property_default({ noAttribute: true })
], List.prototype, "_associatedLabelsRefTexts", void 0);
__decorate6([
  property_default()
], List.prototype, "accessibleRole", void 0);
__decorate6([
  property_default({ type: Boolean })
], List.prototype, "_inViewport", void 0);
__decorate6([
  property_default({ type: Boolean })
], List.prototype, "_loadMoreActive", void 0);
__decorate6([
  slot_default({
    type: HTMLElement,
    "default": true,
    invalidateOnChildChange: true
  })
], List.prototype, "items", void 0);
__decorate6([
  slot_default()
], List.prototype, "header", void 0);
__decorate6([
  i18n_default("@ui5/webcomponents")
], List, "i18nBundle", void 0);
List = List_1 = __decorate6([
  customElement_default({
    tag: "ui5-list",
    fastNavigation: true,
    renderer: JsxRenderer_default,
    template: ListTemplate,
    styles: [
      List_css_default,
      getEffectiveScrollbarStyle_default()
    ]
  }),
  event_strict_default("item-click", {
    bubbles: true,
    cancelable: true
  }),
  event_strict_default("item-close", {
    bubbles: true
  }),
  event_strict_default("item-toggle", {
    bubbles: true
  }),
  event_strict_default("item-delete", {
    bubbles: true
  }),
  event_strict_default("selection-change", {
    bubbles: true,
    cancelable: true
  }),
  event_strict_default("load-more", {
    bubbles: true
  }),
  event_strict_default("item-focused", {
    bubbles: true
  }),
  event_strict_default("move-over", {
    bubbles: true,
    cancelable: true
  }),
  event_strict_default("move", {
    bubbles: true
  })
], List);
List.define();
var List_default = List;

// node_modules/@ui5/webcomponents/dist/ResponsivePopoverTemplate.js
function ResponsivePopoverTemplate() {
  if (!this._isPhone) {
    return PopoverTemplate.call(this);
  }
  return jsxs(Dialog_default, { "root-element": true, accessibleName: this.accessibleName, accessibleNameRef: this.accessibleNameRef, accessibleRole: this.accessibleRole, stretch: true, preventInitialFocus: this.preventInitialFocus, initialFocus: this.initialFocus, onBeforeOpen: this._beforeDialogOpen, onOpen: this._afterDialogOpen, onBeforeClose: this._beforeDialogClose, onClose: this._afterDialogClose, exportparts: "content, header, footer", open: this.open, children: [!this._hideHeader && jsx(Fragment, { children: this.header.length ? jsx("slot", { slot: "header", name: "header" }) : jsxs("div", { class: this.classes.header, slot: "header", children: [this.headerText && jsx(Title_default, { level: "H1", wrappingType: "None", class: "ui5-popup-header-text ui5-responsive-popover-header-text", children: this.headerText }), !this._hideCloseButton && jsx(Button_default, { icon: decline_default, design: "Transparent", accessibleName: this._closeDialogAriaLabel, onClick: this._dialogCloseButtonClick })] }) }), jsx("slot", {}), jsx("slot", { slot: "footer", name: "footer" })] });
}

// node_modules/@ui5/webcomponents/dist/generated/themes/ResponsivePopover.css.js
registerThemePropertiesLoader("@ui5/webcomponents-theming", "sap_horizon", async () => parameters_bundle_css_default);
registerThemePropertiesLoader("@ui5/webcomponents", "sap_horizon", async () => parameters_bundle_css_default2);
var ResponsivePopover_css_default = `:host{--_ui5-v2-8-0_input_width: 100%;min-width:6.25rem;min-height:2rem}:host([on-phone]){display:contents}.ui5-responsive-popover-header{height:var(--_ui5-v2-8-0-responsive_popover_header_height);display:flex;justify-content:var(--_ui5-v2-8-0_popup_header_prop_header_text_alignment);align-items:center;width:100%}.ui5-responsive-popover-header-text{width:calc(100% - var(--_ui5-v2-8-0_button_base_min_width))}.ui5-responsive-popover-header-no-title{justify-content:flex-end}
`;

// node_modules/@ui5/webcomponents/dist/ResponsivePopover.js
var __decorate7 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ResponsivePopover_1;
var ResponsivePopover = ResponsivePopover_1 = class ResponsivePopover2 extends Popover_default {
  constructor() {
    super();
    this.contentOnlyOnDesktop = false;
    this._hideHeader = false;
    this._hideCloseButton = false;
  }
  async openPopup() {
    if (!isPhone()) {
      await super.openPopup();
    } else if (this._dialog) {
      this._dialog.open = true;
    }
  }
  async _show() {
    if (!isPhone()) {
      return super._show();
    }
  }
  _dialogCloseButtonClick() {
    this.closePopup();
  }
  /**
   * Closes the popover/dialog.
   * @override
   */
  closePopup(escPressed = false, preventRegistryUpdate = false, preventFocusRestore = false) {
    var _a;
    if (!isPhone()) {
      super.closePopup(escPressed, preventRegistryUpdate, preventFocusRestore);
    } else {
      (_a = this._dialog) == null ? void 0 : _a.closePopup(escPressed, preventRegistryUpdate, preventFocusRestore);
    }
  }
  toggle(opener) {
    if (this.open) {
      this.closePopup();
      return;
    }
    this.opener = opener;
    this.open = true;
  }
  get classes() {
    const allClasses = super.classes;
    allClasses.header = {
      "ui5-responsive-popover-header": true,
      "ui5-responsive-popover-header-no-title": !this.headerText
    };
    return allClasses;
  }
  get _dialog() {
    return this.shadowRoot.querySelector("[ui5-dialog]");
  }
  get contentDOM() {
    return isPhone() ? this._dialog.contentDOM : super.contentDOM;
  }
  get _isPhone() {
    return isPhone();
  }
  get _displayHeader() {
    return (isPhone() || !this.contentOnlyOnDesktop) && super._displayHeader;
  }
  get _displayFooter() {
    return isPhone() || !this.contentOnlyOnDesktop;
  }
  get _closeDialogAriaLabel() {
    return ResponsivePopover_1.i18nBundle.getText(RESPONSIVE_POPOVER_CLOSE_DIALOG_BUTTON);
  }
  _beforeDialogOpen() {
    this._opened = true;
    this.open = true;
    this.fireDecoratorEvent("before-open");
  }
  _afterDialogOpen() {
    this.fireDecoratorEvent("open");
  }
  _beforeDialogClose(e) {
    this.fireDecoratorEvent("before-close", e.detail);
  }
  _afterDialogClose() {
    this._opened = false;
    this.open = false;
    this.fireDecoratorEvent("close");
  }
  get isModal() {
    if (!isPhone()) {
      return super.isModal;
    }
    return this._dialog.isModal;
  }
};
__decorate7([
  property_default({ type: Boolean })
], ResponsivePopover.prototype, "contentOnlyOnDesktop", void 0);
__decorate7([
  property_default({ type: Boolean })
], ResponsivePopover.prototype, "_hideHeader", void 0);
__decorate7([
  property_default({ type: Boolean })
], ResponsivePopover.prototype, "_hideCloseButton", void 0);
__decorate7([
  i18n_default("@ui5/webcomponents")
], ResponsivePopover, "i18nBundle", void 0);
ResponsivePopover = ResponsivePopover_1 = __decorate7([
  customElement_default({
    tag: "ui5-responsive-popover",
    styles: [Popover_default.styles, ResponsivePopover_css_default],
    template: ResponsivePopoverTemplate
  })
], ResponsivePopover);
ResponsivePopover.define();
var ResponsivePopover_default = ResponsivePopover;

export {
  NavigationMode_default,
  ItemNavigationBehavior_default,
  ItemNavigation_default,
  BusyIndicator_default,
  DragRegistry_default,
  handleDragOver_default,
  handleDrop_default,
  Orientation_default,
  MovePlacement_default,
  findClosestPosition,
  findClosestPositionsByKey,
  debounce_default,
  ListSelectionMode_default,
  ListAccessibleRole_default,
  ListSeparator_default,
  DropIndicator_default,
  getTabbableElements,
  DraggableElement_css_default,
  ListItemBase_default,
  ListItemAccessibleRole_default,
  ListItemGroupHeader_default,
  ListItemGroup_default,
  List_default,
  ResponsivePopover_default
};
//# sourceMappingURL=chunk-5FMKHJ6W.js.map
