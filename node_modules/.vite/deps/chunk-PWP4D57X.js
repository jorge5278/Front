import {
  DEFAULT_LOCALE,
  SUPPORTED_LOCALES,
  attachLanguageChange,
  getFeature,
  getLocale_default
} from "./chunk-NPG2NGWT.js";

// node_modules/@ui5/webcomponents-base/dist/asset-registries/LocaleData.js
var localeDataMap = /* @__PURE__ */ new Map();
var loaders = /* @__PURE__ */ new Map();
var cldrPromises = /* @__PURE__ */ new Map();
var reportedErrors = /* @__PURE__ */ new Set();
var warningShown = false;
var M_ISO639_OLD_TO_NEW = {
  "iw": "he",
  "ji": "yi",
  "in": "id"
};
var _showAssetsWarningOnce = (localeId) => {
  if (warningShown) {
    return;
  }
  console.warn(`[LocaleData] Supported locale "${localeId}" not configured, import the "Assets.js" module from the webcomponents package you are using.`);
  warningShown = true;
};
var calcLocale = (language, region, script) => {
  language = language && M_ISO639_OLD_TO_NEW[language] || language;
  if (language === "no") {
    language = "nb";
  }
  if (language === "zh" && !region) {
    if (script === "Hans") {
      region = "CN";
    } else if (script === "Hant") {
      region = "TW";
    }
  }
  if (language === "sh" || language === "sr" && script === "Latn") {
    language = "sr";
    region = "Latn";
  }
  let localeId = `${language}_${region}`;
  if (SUPPORTED_LOCALES.includes(localeId)) {
    if (loaders.has(localeId)) {
      return localeId;
    }
    _showAssetsWarningOnce(localeId);
    return DEFAULT_LOCALE;
  }
  localeId = language;
  if (SUPPORTED_LOCALES.includes(localeId)) {
    if (loaders.has(localeId)) {
      return localeId;
    }
    _showAssetsWarningOnce(localeId);
    return DEFAULT_LOCALE;
  }
  return DEFAULT_LOCALE;
};
var setLocaleData = (localeId, content) => {
  localeDataMap.set(localeId, content);
};
var getLocaleData = (localeId) => {
  if (!loaders.has(localeId)) {
    localeId = DEFAULT_LOCALE;
  }
  const content = localeDataMap.get(localeId);
  if (!content) {
    throw new Error(`CLDR data for locale ${localeId} is not loaded!`);
  }
  return content;
};
var _loadCldrOnce = (localeId) => {
  if (!cldrPromises.get(localeId)) {
    const loadCldr = loaders.get(localeId);
    if (!loadCldr) {
      throw new Error(`CLDR data for locale ${localeId} is not loaded!`);
    }
    cldrPromises.set(localeId, loadCldr(localeId));
  }
  return cldrPromises.get(localeId);
};
var fetchCldr = async (language, region, script) => {
  const localeId = calcLocale(language, region, script);
  const openUI5Support = getFeature("OpenUI5Support");
  if (openUI5Support) {
    const cldrContent = openUI5Support.getLocaleDataObject();
    if (cldrContent) {
      setLocaleData(localeId, cldrContent);
      return;
    }
  }
  try {
    const cldrContent = await _loadCldrOnce(localeId);
    setLocaleData(localeId, cldrContent);
  } catch (error) {
    const e = error;
    if (!reportedErrors.has(e.message)) {
      reportedErrors.add(e.message);
      console.error(e.message);
    }
  }
};
var registerLocaleDataLoader = (localeId, loader) => {
  loaders.set(localeId, loader);
};
registerLocaleDataLoader("en", async () => {
  const cldrContent = await fetch(`https://sdk.openui5.org/1.120.17/resources/sap/ui/core/cldr/en.json`);
  return cldrContent.json();
});
attachLanguageChange(() => {
  const locale = getLocale_default();
  return fetchCldr(locale.getLanguage(), locale.getRegion(), locale.getScript());
});

export {
  getLocaleData,
  fetchCldr,
  registerLocaleDataLoader
};
//# sourceMappingURL=chunk-PWP4D57X.js.map
