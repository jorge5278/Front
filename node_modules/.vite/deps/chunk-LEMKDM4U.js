import {
  FORM_TEXTFIELD_REQUIRED,
  Fragment,
  INPUT_AVALIABLE_VALUES,
  INPUT_CLEAR_ICON_ACC_NAME,
  INPUT_SUGGESTIONS,
  INPUT_SUGGESTIONS_MORE_HITS,
  INPUT_SUGGESTIONS_NO_HIT,
  INPUT_SUGGESTIONS_ONE_HIT,
  INPUT_SUGGESTIONS_TITLE,
  Icon_default,
  JsxRenderer_default,
  Popover_default,
  ResizeHandler_default,
  UI5Element_default,
  VALUE_STATE_ERROR,
  VALUE_STATE_INFORMATION,
  VALUE_STATE_SUCCESS,
  VALUE_STATE_TYPE_ERROR,
  VALUE_STATE_TYPE_INFORMATION,
  VALUE_STATE_TYPE_SUCCESS,
  VALUE_STATE_TYPE_WARNING,
  VALUE_STATE_WARNING,
  ValueState_default,
  alert_default,
  customElement_default,
  decline_default,
  deregisterUI5Element,
  error_default,
  event_strict_default,
  getActiveElement_default,
  getAllAccessibleNameRefTexts,
  getAssociatedLabelForTexts,
  i18n_default,
  information_default,
  isBackSpace,
  isDelete,
  isDown,
  isEnd,
  isEnter,
  isEscape,
  isHome,
  isPageDown,
  isPageUp,
  isSpace,
  isTabNext,
  isUp,
  jsx,
  jsxs,
  parameters_bundle_css_default,
  parameters_bundle_css_default2,
  property_default,
  registerUI5Element,
  slot_default,
  submitForm,
  sys_enter_2_default
} from "./chunk-ANJ7DKRT.js";
import {
  getScopedVarName,
  isAndroid,
  isPhone,
  registerFeature,
  registerThemePropertiesLoader
} from "./chunk-NPG2NGWT.js";
import {
  __export
} from "./chunk-Q4XP6UTR.js";

// node_modules/lit-html/development/lit-html.js
var _a;
var _b;
var _c;
var _d;
var DEV_MODE = true;
var ENABLE_EXTRA_SECURITY_HOOKS = true;
var ENABLE_SHADYDOM_NOPATCH = true;
var NODE_MODE = false;
var global = NODE_MODE ? globalThis : window;
var debugLogEvent = DEV_MODE ? (event) => {
  const shouldEmit = global.emitLitDebugLogEvents;
  if (!shouldEmit) {
    return;
  }
  global.dispatchEvent(new CustomEvent("lit-debug", {
    detail: event
  }));
} : void 0;
var debugLogRenderId = 0;
var issueWarning;
if (DEV_MODE) {
  (_a = global.litIssuedWarnings) !== null && _a !== void 0 ? _a : global.litIssuedWarnings = /* @__PURE__ */ new Set();
  issueWarning = (code, warning) => {
    warning += code ? ` See https://lit.dev/msg/${code} for more information.` : "";
    if (!global.litIssuedWarnings.has(warning)) {
      console.warn(warning);
      global.litIssuedWarnings.add(warning);
    }
  };
  issueWarning("dev-mode", `Lit is in dev mode. Not recommended for production!`);
}
var wrap = ENABLE_SHADYDOM_NOPATCH && ((_b = global.ShadyDOM) === null || _b === void 0 ? void 0 : _b.inUse) && ((_c = global.ShadyDOM) === null || _c === void 0 ? void 0 : _c.noPatch) === true ? global.ShadyDOM.wrap : (node) => node;
var trustedTypes = global.trustedTypes;
var policy = trustedTypes ? trustedTypes.createPolicy("lit-html", {
  createHTML: (s) => s
}) : void 0;
var identityFunction = (value) => value;
var noopSanitizer = (_node, _name, _type) => identityFunction;
var setSanitizer = (newSanitizer) => {
  if (!ENABLE_EXTRA_SECURITY_HOOKS) {
    return;
  }
  if (sanitizerFactoryInternal !== noopSanitizer) {
    throw new Error(`Attempted to overwrite existing lit-html security policy. setSanitizeDOMValueFactory should be called at most once.`);
  }
  sanitizerFactoryInternal = newSanitizer;
};
var _testOnlyClearSanitizerFactoryDoNotCallOrElse = () => {
  sanitizerFactoryInternal = noopSanitizer;
};
var createSanitizer = (node, name, type) => {
  return sanitizerFactoryInternal(node, name, type);
};
var boundAttributeSuffix = "$lit$";
var marker = `lit$${String(Math.random()).slice(9)}$`;
var markerMatch = "?" + marker;
var nodeMarker = `<${markerMatch}>`;
var d = NODE_MODE && global.document === void 0 ? {
  createTreeWalker() {
    return {};
  }
} : document;
var createMarker = () => d.createComment("");
var isPrimitive = (value) => value === null || typeof value != "object" && typeof value != "function";
var isArray = Array.isArray;
var isIterable = (value) => isArray(value) || // eslint-disable-next-line @typescript-eslint/no-explicit-any
typeof (value === null || value === void 0 ? void 0 : value[Symbol.iterator]) === "function";
var SPACE_CHAR = `[ 	
\f\r]`;
var ATTR_VALUE_CHAR = `[^ 	
\f\r"'\`<>=]`;
var NAME_CHAR = `[^\\s"'>=/]`;
var textEndRegex = /<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g;
var COMMENT_START = 1;
var TAG_NAME = 2;
var DYNAMIC_TAG_NAME = 3;
var commentEndRegex = /-->/g;
var comment2EndRegex = />/g;
var tagEndRegex = new RegExp(`>|${SPACE_CHAR}(?:(${NAME_CHAR}+)(${SPACE_CHAR}*=${SPACE_CHAR}*(?:${ATTR_VALUE_CHAR}|("|')|))|$)`, "g");
var ENTIRE_MATCH = 0;
var ATTRIBUTE_NAME = 1;
var SPACES_AND_EQUALS = 2;
var QUOTE_CHAR = 3;
var singleQuoteAttrEndRegex = /'/g;
var doubleQuoteAttrEndRegex = /"/g;
var rawTextElement = /^(?:script|style|textarea|title)$/i;
var HTML_RESULT = 1;
var SVG_RESULT = 2;
var ATTRIBUTE_PART = 1;
var CHILD_PART = 2;
var PROPERTY_PART = 3;
var BOOLEAN_ATTRIBUTE_PART = 4;
var EVENT_PART = 5;
var ELEMENT_PART = 6;
var COMMENT_PART = 7;
var tag = (type) => (strings, ...values) => {
  if (DEV_MODE && strings.some((s) => s === void 0)) {
    console.warn("Some template strings are undefined.\nThis is probably caused by illegal octal escape sequences.");
  }
  return {
    // This property needs to remain unminified.
    ["_$litType$"]: type,
    strings,
    values
  };
};
var html = tag(HTML_RESULT);
var svg = tag(SVG_RESULT);
var noChange = Symbol.for("lit-noChange");
var nothing = Symbol.for("lit-nothing");
var templateCache = /* @__PURE__ */ new WeakMap();
var walker = d.createTreeWalker(d, 129, null, false);
var sanitizerFactoryInternal = noopSanitizer;
function trustFromTemplateString(tsa, stringFromTSA) {
  if (!Array.isArray(tsa) || !tsa.hasOwnProperty("raw")) {
    let message = "invalid template strings array";
    if (DEV_MODE) {
      message = `
          Internal Error: expected template strings to be an array
          with a 'raw' field. Faking a template strings array by
          calling html or svg like an ordinary function is effectively
          the same as calling unsafeHtml and can lead to major security
          issues, e.g. opening your code up to XSS attacks.
          If you're using the html or svg tagged template functions normally
          and still seeing this error, please file a bug at
          https://github.com/lit/lit/issues/new?template=bug_report.md
          and include information about your build tooling, if any.
        `.trim().replace(/\n */g, "\n");
    }
    throw new Error(message);
  }
  return policy !== void 0 ? policy.createHTML(stringFromTSA) : stringFromTSA;
}
var getTemplateHtml = (strings, type) => {
  const l = strings.length - 1;
  const attrNames = [];
  let html3 = type === SVG_RESULT ? "<svg>" : "";
  let rawTextEndRegex;
  let regex = textEndRegex;
  for (let i = 0; i < l; i++) {
    const s = strings[i];
    let attrNameEndIndex = -1;
    let attrName;
    let lastIndex = 0;
    let match;
    while (lastIndex < s.length) {
      regex.lastIndex = lastIndex;
      match = regex.exec(s);
      if (match === null) {
        break;
      }
      lastIndex = regex.lastIndex;
      if (regex === textEndRegex) {
        if (match[COMMENT_START] === "!--") {
          regex = commentEndRegex;
        } else if (match[COMMENT_START] !== void 0) {
          regex = comment2EndRegex;
        } else if (match[TAG_NAME] !== void 0) {
          if (rawTextElement.test(match[TAG_NAME])) {
            rawTextEndRegex = new RegExp(`</${match[TAG_NAME]}`, "g");
          }
          regex = tagEndRegex;
        } else if (match[DYNAMIC_TAG_NAME] !== void 0) {
          if (DEV_MODE) {
            throw new Error("Bindings in tag names are not supported. Please use static templates instead. See https://lit.dev/docs/templates/expressions/#static-expressions");
          }
          regex = tagEndRegex;
        }
      } else if (regex === tagEndRegex) {
        if (match[ENTIRE_MATCH] === ">") {
          regex = rawTextEndRegex !== null && rawTextEndRegex !== void 0 ? rawTextEndRegex : textEndRegex;
          attrNameEndIndex = -1;
        } else if (match[ATTRIBUTE_NAME] === void 0) {
          attrNameEndIndex = -2;
        } else {
          attrNameEndIndex = regex.lastIndex - match[SPACES_AND_EQUALS].length;
          attrName = match[ATTRIBUTE_NAME];
          regex = match[QUOTE_CHAR] === void 0 ? tagEndRegex : match[QUOTE_CHAR] === '"' ? doubleQuoteAttrEndRegex : singleQuoteAttrEndRegex;
        }
      } else if (regex === doubleQuoteAttrEndRegex || regex === singleQuoteAttrEndRegex) {
        regex = tagEndRegex;
      } else if (regex === commentEndRegex || regex === comment2EndRegex) {
        regex = textEndRegex;
      } else {
        regex = tagEndRegex;
        rawTextEndRegex = void 0;
      }
    }
    if (DEV_MODE) {
      console.assert(attrNameEndIndex === -1 || regex === tagEndRegex || regex === singleQuoteAttrEndRegex || regex === doubleQuoteAttrEndRegex, "unexpected parse state B");
    }
    const end = regex === tagEndRegex && strings[i + 1].startsWith("/>") ? " " : "";
    html3 += regex === textEndRegex ? s + nodeMarker : attrNameEndIndex >= 0 ? (attrNames.push(attrName), s.slice(0, attrNameEndIndex) + boundAttributeSuffix + s.slice(attrNameEndIndex)) + marker + end : s + marker + (attrNameEndIndex === -2 ? (attrNames.push(void 0), i) : end);
  }
  const htmlResult = html3 + (strings[l] || "<?>") + (type === SVG_RESULT ? "</svg>" : "");
  return [trustFromTemplateString(strings, htmlResult), attrNames];
};
var Template = class _Template {
  constructor({ strings, ["_$litType$"]: type }, options) {
    this.parts = [];
    let node;
    let nodeIndex = 0;
    let attrNameIndex = 0;
    const partCount = strings.length - 1;
    const parts = this.parts;
    const [html3, attrNames] = getTemplateHtml(strings, type);
    this.el = _Template.createElement(html3, options);
    walker.currentNode = this.el.content;
    if (type === SVG_RESULT) {
      const content = this.el.content;
      const svgElement = content.firstChild;
      svgElement.remove();
      content.append(...svgElement.childNodes);
    }
    while ((node = walker.nextNode()) !== null && parts.length < partCount) {
      if (node.nodeType === 1) {
        if (DEV_MODE) {
          const tag2 = node.localName;
          if (/^(?:textarea|template)$/i.test(tag2) && node.innerHTML.includes(marker)) {
            const m = `Expressions are not supported inside \`${tag2}\` elements. See https://lit.dev/msg/expression-in-${tag2} for more information.`;
            if (tag2 === "template") {
              throw new Error(m);
            } else
              issueWarning("", m);
          }
        }
        if (node.hasAttributes()) {
          const attrsToRemove = [];
          for (const name of node.getAttributeNames()) {
            if (name.endsWith(boundAttributeSuffix) || name.startsWith(marker)) {
              const realName = attrNames[attrNameIndex++];
              attrsToRemove.push(name);
              if (realName !== void 0) {
                const value = node.getAttribute(realName.toLowerCase() + boundAttributeSuffix);
                const statics = value.split(marker);
                const m = /([.?@])?(.*)/.exec(realName);
                parts.push({
                  type: ATTRIBUTE_PART,
                  index: nodeIndex,
                  name: m[2],
                  strings: statics,
                  ctor: m[1] === "." ? PropertyPart : m[1] === "?" ? BooleanAttributePart : m[1] === "@" ? EventPart : AttributePart
                });
              } else {
                parts.push({
                  type: ELEMENT_PART,
                  index: nodeIndex
                });
              }
            }
          }
          for (const name of attrsToRemove) {
            node.removeAttribute(name);
          }
        }
        if (rawTextElement.test(node.tagName)) {
          const strings2 = node.textContent.split(marker);
          const lastIndex = strings2.length - 1;
          if (lastIndex > 0) {
            node.textContent = trustedTypes ? trustedTypes.emptyScript : "";
            for (let i = 0; i < lastIndex; i++) {
              node.append(strings2[i], createMarker());
              walker.nextNode();
              parts.push({ type: CHILD_PART, index: ++nodeIndex });
            }
            node.append(strings2[lastIndex], createMarker());
          }
        }
      } else if (node.nodeType === 8) {
        const data = node.data;
        if (data === markerMatch) {
          parts.push({ type: CHILD_PART, index: nodeIndex });
        } else {
          let i = -1;
          while ((i = node.data.indexOf(marker, i + 1)) !== -1) {
            parts.push({ type: COMMENT_PART, index: nodeIndex });
            i += marker.length - 1;
          }
        }
      }
      nodeIndex++;
    }
    debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({
      kind: "template prep",
      template: this,
      clonableTemplate: this.el,
      parts: this.parts,
      strings
    });
  }
  // Overridden via `litHtmlPolyfillSupport` to provide platform support.
  /** @nocollapse */
  static createElement(html3, _options) {
    const el = d.createElement("template");
    el.innerHTML = html3;
    return el;
  }
};
function resolveDirective(part, value, parent = part, attributeIndex) {
  var _a2, _b2, _c2;
  var _d2;
  if (value === noChange) {
    return value;
  }
  let currentDirective = attributeIndex !== void 0 ? (_a2 = parent.__directives) === null || _a2 === void 0 ? void 0 : _a2[attributeIndex] : parent.__directive;
  const nextDirectiveConstructor = isPrimitive(value) ? void 0 : (
    // This property needs to remain unminified.
    value["_$litDirective$"]
  );
  if ((currentDirective === null || currentDirective === void 0 ? void 0 : currentDirective.constructor) !== nextDirectiveConstructor) {
    (_b2 = currentDirective === null || currentDirective === void 0 ? void 0 : currentDirective["_$notifyDirectiveConnectionChanged"]) === null || _b2 === void 0 ? void 0 : _b2.call(currentDirective, false);
    if (nextDirectiveConstructor === void 0) {
      currentDirective = void 0;
    } else {
      currentDirective = new nextDirectiveConstructor(part);
      currentDirective._$initialize(part, parent, attributeIndex);
    }
    if (attributeIndex !== void 0) {
      ((_c2 = (_d2 = parent).__directives) !== null && _c2 !== void 0 ? _c2 : _d2.__directives = [])[attributeIndex] = currentDirective;
    } else {
      parent.__directive = currentDirective;
    }
  }
  if (currentDirective !== void 0) {
    value = resolveDirective(part, currentDirective._$resolve(part, value.values), currentDirective, attributeIndex);
  }
  return value;
}
var TemplateInstance = class {
  constructor(template, parent) {
    this._$parts = [];
    this._$disconnectableChildren = void 0;
    this._$template = template;
    this._$parent = parent;
  }
  // Called by ChildPart parentNode getter
  get parentNode() {
    return this._$parent.parentNode;
  }
  // See comment in Disconnectable interface for why this is a getter
  get _$isConnected() {
    return this._$parent._$isConnected;
  }
  // This method is separate from the constructor because we need to return a
  // DocumentFragment and we don't want to hold onto it with an instance field.
  _clone(options) {
    var _a2;
    const { el: { content }, parts } = this._$template;
    const fragment = ((_a2 = options === null || options === void 0 ? void 0 : options.creationScope) !== null && _a2 !== void 0 ? _a2 : d).importNode(content, true);
    walker.currentNode = fragment;
    let node = walker.nextNode();
    let nodeIndex = 0;
    let partIndex = 0;
    let templatePart = parts[0];
    while (templatePart !== void 0) {
      if (nodeIndex === templatePart.index) {
        let part;
        if (templatePart.type === CHILD_PART) {
          part = new ChildPart(node, node.nextSibling, this, options);
        } else if (templatePart.type === ATTRIBUTE_PART) {
          part = new templatePart.ctor(node, templatePart.name, templatePart.strings, this, options);
        } else if (templatePart.type === ELEMENT_PART) {
          part = new ElementPart(node, this, options);
        }
        this._$parts.push(part);
        templatePart = parts[++partIndex];
      }
      if (nodeIndex !== (templatePart === null || templatePart === void 0 ? void 0 : templatePart.index)) {
        node = walker.nextNode();
        nodeIndex++;
      }
    }
    walker.currentNode = d;
    return fragment;
  }
  _update(values) {
    let i = 0;
    for (const part of this._$parts) {
      if (part !== void 0) {
        debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({
          kind: "set part",
          part,
          value: values[i],
          valueIndex: i,
          values,
          templateInstance: this
        });
        if (part.strings !== void 0) {
          part._$setValue(values, part, i);
          i += part.strings.length - 2;
        } else {
          part._$setValue(values[i]);
        }
      }
      i++;
    }
  }
};
var ChildPart = class _ChildPart {
  constructor(startNode, endNode, parent, options) {
    var _a2;
    this.type = CHILD_PART;
    this._$committedValue = nothing;
    this._$disconnectableChildren = void 0;
    this._$startNode = startNode;
    this._$endNode = endNode;
    this._$parent = parent;
    this.options = options;
    this.__isConnected = (_a2 = options === null || options === void 0 ? void 0 : options.isConnected) !== null && _a2 !== void 0 ? _a2 : true;
    if (ENABLE_EXTRA_SECURITY_HOOKS) {
      this._textSanitizer = void 0;
    }
  }
  // See comment in Disconnectable interface for why this is a getter
  get _$isConnected() {
    var _a2, _b2;
    return (_b2 = (_a2 = this._$parent) === null || _a2 === void 0 ? void 0 : _a2._$isConnected) !== null && _b2 !== void 0 ? _b2 : this.__isConnected;
  }
  /**
   * The parent node into which the part renders its content.
   *
   * A ChildPart's content consists of a range of adjacent child nodes of
   * `.parentNode`, possibly bordered by 'marker nodes' (`.startNode` and
   * `.endNode`).
   *
   * - If both `.startNode` and `.endNode` are non-null, then the part's content
   * consists of all siblings between `.startNode` and `.endNode`, exclusively.
   *
   * - If `.startNode` is non-null but `.endNode` is null, then the part's
   * content consists of all siblings following `.startNode`, up to and
   * including the last child of `.parentNode`. If `.endNode` is non-null, then
   * `.startNode` will always be non-null.
   *
   * - If both `.endNode` and `.startNode` are null, then the part's content
   * consists of all child nodes of `.parentNode`.
   */
  get parentNode() {
    let parentNode = wrap(this._$startNode).parentNode;
    const parent = this._$parent;
    if (parent !== void 0 && (parentNode === null || parentNode === void 0 ? void 0 : parentNode.nodeType) === 11) {
      parentNode = parent.parentNode;
    }
    return parentNode;
  }
  /**
   * The part's leading marker node, if any. See `.parentNode` for more
   * information.
   */
  get startNode() {
    return this._$startNode;
  }
  /**
   * The part's trailing marker node, if any. See `.parentNode` for more
   * information.
   */
  get endNode() {
    return this._$endNode;
  }
  _$setValue(value, directiveParent = this) {
    var _a2;
    if (DEV_MODE && this.parentNode === null) {
      throw new Error(`This \`ChildPart\` has no \`parentNode\` and therefore cannot accept a value. This likely means the element containing the part was manipulated in an unsupported way outside of Lit's control such that the part's marker nodes were ejected from DOM. For example, setting the element's \`innerHTML\` or \`textContent\` can do this.`);
    }
    value = resolveDirective(this, value, directiveParent);
    if (isPrimitive(value)) {
      if (value === nothing || value == null || value === "") {
        if (this._$committedValue !== nothing) {
          debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({
            kind: "commit nothing to child",
            start: this._$startNode,
            end: this._$endNode,
            parent: this._$parent,
            options: this.options
          });
          this._$clear();
        }
        this._$committedValue = nothing;
      } else if (value !== this._$committedValue && value !== noChange) {
        this._commitText(value);
      }
    } else if (value["_$litType$"] !== void 0) {
      this._commitTemplateResult(value);
    } else if (value.nodeType !== void 0) {
      if (DEV_MODE && ((_a2 = this.options) === null || _a2 === void 0 ? void 0 : _a2.host) === value) {
        this._commitText(`[probable mistake: rendered a template's host in itself (commonly caused by writing \${this} in a template]`);
        console.warn(`Attempted to render the template host`, value, `inside itself. This is almost always a mistake, and in dev mode `, `we render some warning text. In production however, we'll `, `render it, which will usually result in an error, and sometimes `, `in the element disappearing from the DOM.`);
        return;
      }
      this._commitNode(value);
    } else if (isIterable(value)) {
      this._commitIterable(value);
    } else {
      this._commitText(value);
    }
  }
  _insert(node) {
    return wrap(wrap(this._$startNode).parentNode).insertBefore(node, this._$endNode);
  }
  _commitNode(value) {
    var _a2;
    if (this._$committedValue !== value) {
      this._$clear();
      if (ENABLE_EXTRA_SECURITY_HOOKS && sanitizerFactoryInternal !== noopSanitizer) {
        const parentNodeName = (_a2 = this._$startNode.parentNode) === null || _a2 === void 0 ? void 0 : _a2.nodeName;
        if (parentNodeName === "STYLE" || parentNodeName === "SCRIPT") {
          let message = "Forbidden";
          if (DEV_MODE) {
            if (parentNodeName === "STYLE") {
              message = `Lit does not support binding inside style nodes. This is a security risk, as style injection attacks can exfiltrate data and spoof UIs. Consider instead using css\`...\` literals to compose styles, and make do dynamic styling with css custom properties, ::parts, <slot>s, and by mutating the DOM rather than stylesheets.`;
            } else {
              message = `Lit does not support binding inside script nodes. This is a security risk, as it could allow arbitrary code execution.`;
            }
          }
          throw new Error(message);
        }
      }
      debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({
        kind: "commit node",
        start: this._$startNode,
        parent: this._$parent,
        value,
        options: this.options
      });
      this._$committedValue = this._insert(value);
    }
  }
  _commitText(value) {
    if (this._$committedValue !== nothing && isPrimitive(this._$committedValue)) {
      const node = wrap(this._$startNode).nextSibling;
      if (ENABLE_EXTRA_SECURITY_HOOKS) {
        if (this._textSanitizer === void 0) {
          this._textSanitizer = createSanitizer(node, "data", "property");
        }
        value = this._textSanitizer(value);
      }
      debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({
        kind: "commit text",
        node,
        value,
        options: this.options
      });
      node.data = value;
    } else {
      if (ENABLE_EXTRA_SECURITY_HOOKS) {
        const textNode = d.createTextNode("");
        this._commitNode(textNode);
        if (this._textSanitizer === void 0) {
          this._textSanitizer = createSanitizer(textNode, "data", "property");
        }
        value = this._textSanitizer(value);
        debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({
          kind: "commit text",
          node: textNode,
          value,
          options: this.options
        });
        textNode.data = value;
      } else {
        this._commitNode(d.createTextNode(value));
        debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({
          kind: "commit text",
          node: wrap(this._$startNode).nextSibling,
          value,
          options: this.options
        });
      }
    }
    this._$committedValue = value;
  }
  _commitTemplateResult(result) {
    var _a2;
    const { values, ["_$litType$"]: type } = result;
    const template = typeof type === "number" ? this._$getTemplate(result) : (type.el === void 0 && (type.el = Template.createElement(trustFromTemplateString(type.h, type.h[0]), this.options)), type);
    if (((_a2 = this._$committedValue) === null || _a2 === void 0 ? void 0 : _a2._$template) === template) {
      debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({
        kind: "template updating",
        template,
        instance: this._$committedValue,
        parts: this._$committedValue._$parts,
        options: this.options,
        values
      });
      this._$committedValue._update(values);
    } else {
      const instance = new TemplateInstance(template, this);
      const fragment = instance._clone(this.options);
      debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({
        kind: "template instantiated",
        template,
        instance,
        parts: instance._$parts,
        options: this.options,
        fragment,
        values
      });
      instance._update(values);
      debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({
        kind: "template instantiated and updated",
        template,
        instance,
        parts: instance._$parts,
        options: this.options,
        fragment,
        values
      });
      this._commitNode(fragment);
      this._$committedValue = instance;
    }
  }
  // Overridden via `litHtmlPolyfillSupport` to provide platform support.
  /** @internal */
  _$getTemplate(result) {
    let template = templateCache.get(result.strings);
    if (template === void 0) {
      templateCache.set(result.strings, template = new Template(result));
    }
    return template;
  }
  _commitIterable(value) {
    if (!isArray(this._$committedValue)) {
      this._$committedValue = [];
      this._$clear();
    }
    const itemParts = this._$committedValue;
    let partIndex = 0;
    let itemPart;
    for (const item of value) {
      if (partIndex === itemParts.length) {
        itemParts.push(itemPart = new _ChildPart(this._insert(createMarker()), this._insert(createMarker()), this, this.options));
      } else {
        itemPart = itemParts[partIndex];
      }
      itemPart._$setValue(item);
      partIndex++;
    }
    if (partIndex < itemParts.length) {
      this._$clear(itemPart && wrap(itemPart._$endNode).nextSibling, partIndex);
      itemParts.length = partIndex;
    }
  }
  /**
   * Removes the nodes contained within this Part from the DOM.
   *
   * @param start Start node to clear from, for clearing a subset of the part's
   *     DOM (used when truncating iterables)
   * @param from  When `start` is specified, the index within the iterable from
   *     which ChildParts are being removed, used for disconnecting directives in
   *     those Parts.
   *
   * @internal
   */
  _$clear(start = wrap(this._$startNode).nextSibling, from) {
    var _a2;
    (_a2 = this._$notifyConnectionChanged) === null || _a2 === void 0 ? void 0 : _a2.call(this, false, true, from);
    while (start && start !== this._$endNode) {
      const n = wrap(start).nextSibling;
      wrap(start).remove();
      start = n;
    }
  }
  /**
   * Implementation of RootPart's `isConnected`. Note that this metod
   * should only be called on `RootPart`s (the `ChildPart` returned from a
   * top-level `render()` call). It has no effect on non-root ChildParts.
   * @param isConnected Whether to set
   * @internal
   */
  setConnected(isConnected) {
    var _a2;
    if (this._$parent === void 0) {
      this.__isConnected = isConnected;
      (_a2 = this._$notifyConnectionChanged) === null || _a2 === void 0 ? void 0 : _a2.call(this, isConnected);
    } else if (DEV_MODE) {
      throw new Error("part.setConnected() may only be called on a RootPart returned from render().");
    }
  }
};
var AttributePart = class {
  constructor(element, name, strings, parent, options) {
    this.type = ATTRIBUTE_PART;
    this._$committedValue = nothing;
    this._$disconnectableChildren = void 0;
    this.element = element;
    this.name = name;
    this._$parent = parent;
    this.options = options;
    if (strings.length > 2 || strings[0] !== "" || strings[1] !== "") {
      this._$committedValue = new Array(strings.length - 1).fill(new String());
      this.strings = strings;
    } else {
      this._$committedValue = nothing;
    }
    if (ENABLE_EXTRA_SECURITY_HOOKS) {
      this._sanitizer = void 0;
    }
  }
  get tagName() {
    return this.element.tagName;
  }
  // See comment in Disconnectable interface for why this is a getter
  get _$isConnected() {
    return this._$parent._$isConnected;
  }
  /**
   * Sets the value of this part by resolving the value from possibly multiple
   * values and static strings and committing it to the DOM.
   * If this part is single-valued, `this._strings` will be undefined, and the
   * method will be called with a single value argument. If this part is
   * multi-value, `this._strings` will be defined, and the method is called
   * with the value array of the part's owning TemplateInstance, and an offset
   * into the value array from which the values should be read.
   * This method is overloaded this way to eliminate short-lived array slices
   * of the template instance values, and allow a fast-path for single-valued
   * parts.
   *
   * @param value The part value, or an array of values for multi-valued parts
   * @param valueIndex the index to start reading values from. `undefined` for
   *   single-valued parts
   * @param noCommit causes the part to not commit its value to the DOM. Used
   *   in hydration to prime attribute parts with their first-rendered value,
   *   but not set the attribute, and in SSR to no-op the DOM operation and
   *   capture the value for serialization.
   *
   * @internal
   */
  _$setValue(value, directiveParent = this, valueIndex, noCommit) {
    const strings = this.strings;
    let change = false;
    if (strings === void 0) {
      value = resolveDirective(this, value, directiveParent, 0);
      change = !isPrimitive(value) || value !== this._$committedValue && value !== noChange;
      if (change) {
        this._$committedValue = value;
      }
    } else {
      const values = value;
      value = strings[0];
      let i, v;
      for (i = 0; i < strings.length - 1; i++) {
        v = resolveDirective(this, values[valueIndex + i], directiveParent, i);
        if (v === noChange) {
          v = this._$committedValue[i];
        }
        change || (change = !isPrimitive(v) || v !== this._$committedValue[i]);
        if (v === nothing) {
          value = nothing;
        } else if (value !== nothing) {
          value += (v !== null && v !== void 0 ? v : "") + strings[i + 1];
        }
        this._$committedValue[i] = v;
      }
    }
    if (change && !noCommit) {
      this._commitValue(value);
    }
  }
  /** @internal */
  _commitValue(value) {
    if (value === nothing) {
      wrap(this.element).removeAttribute(this.name);
    } else {
      if (ENABLE_EXTRA_SECURITY_HOOKS) {
        if (this._sanitizer === void 0) {
          this._sanitizer = sanitizerFactoryInternal(this.element, this.name, "attribute");
        }
        value = this._sanitizer(value !== null && value !== void 0 ? value : "");
      }
      debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({
        kind: "commit attribute",
        element: this.element,
        name: this.name,
        value,
        options: this.options
      });
      wrap(this.element).setAttribute(this.name, value !== null && value !== void 0 ? value : "");
    }
  }
};
var PropertyPart = class extends AttributePart {
  constructor() {
    super(...arguments);
    this.type = PROPERTY_PART;
  }
  /** @internal */
  _commitValue(value) {
    if (ENABLE_EXTRA_SECURITY_HOOKS) {
      if (this._sanitizer === void 0) {
        this._sanitizer = sanitizerFactoryInternal(this.element, this.name, "property");
      }
      value = this._sanitizer(value);
    }
    debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({
      kind: "commit property",
      element: this.element,
      name: this.name,
      value,
      options: this.options
    });
    this.element[this.name] = value === nothing ? void 0 : value;
  }
};
var emptyStringForBooleanAttribute = trustedTypes ? trustedTypes.emptyScript : "";
var BooleanAttributePart = class extends AttributePart {
  constructor() {
    super(...arguments);
    this.type = BOOLEAN_ATTRIBUTE_PART;
  }
  /** @internal */
  _commitValue(value) {
    debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({
      kind: "commit boolean attribute",
      element: this.element,
      name: this.name,
      value: !!(value && value !== nothing),
      options: this.options
    });
    if (value && value !== nothing) {
      wrap(this.element).setAttribute(this.name, emptyStringForBooleanAttribute);
    } else {
      wrap(this.element).removeAttribute(this.name);
    }
  }
};
var EventPart = class extends AttributePart {
  constructor(element, name, strings, parent, options) {
    super(element, name, strings, parent, options);
    this.type = EVENT_PART;
    if (DEV_MODE && this.strings !== void 0) {
      throw new Error(`A \`<${element.localName}>\` has a \`@${name}=...\` listener with invalid content. Event listeners in templates must have exactly one expression and no surrounding text.`);
    }
  }
  // EventPart does not use the base _$setValue/_resolveValue implementation
  // since the dirty checking is more complex
  /** @internal */
  _$setValue(newListener, directiveParent = this) {
    var _a2;
    newListener = (_a2 = resolveDirective(this, newListener, directiveParent, 0)) !== null && _a2 !== void 0 ? _a2 : nothing;
    if (newListener === noChange) {
      return;
    }
    const oldListener = this._$committedValue;
    const shouldRemoveListener = newListener === nothing && oldListener !== nothing || newListener.capture !== oldListener.capture || newListener.once !== oldListener.once || newListener.passive !== oldListener.passive;
    const shouldAddListener = newListener !== nothing && (oldListener === nothing || shouldRemoveListener);
    debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({
      kind: "commit event listener",
      element: this.element,
      name: this.name,
      value: newListener,
      options: this.options,
      removeListener: shouldRemoveListener,
      addListener: shouldAddListener,
      oldListener
    });
    if (shouldRemoveListener) {
      this.element.removeEventListener(this.name, this, oldListener);
    }
    if (shouldAddListener) {
      this.element.addEventListener(this.name, this, newListener);
    }
    this._$committedValue = newListener;
  }
  handleEvent(event) {
    var _a2, _b2;
    if (typeof this._$committedValue === "function") {
      this._$committedValue.call((_b2 = (_a2 = this.options) === null || _a2 === void 0 ? void 0 : _a2.host) !== null && _b2 !== void 0 ? _b2 : this.element, event);
    } else {
      this._$committedValue.handleEvent(event);
    }
  }
};
var ElementPart = class {
  constructor(element, parent, options) {
    this.element = element;
    this.type = ELEMENT_PART;
    this._$disconnectableChildren = void 0;
    this._$parent = parent;
    this.options = options;
  }
  // See comment in Disconnectable interface for why this is a getter
  get _$isConnected() {
    return this._$parent._$isConnected;
  }
  _$setValue(value) {
    debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({
      kind: "commit to element binding",
      element: this.element,
      value,
      options: this.options
    });
    resolveDirective(this, value);
  }
};
var polyfillSupport = DEV_MODE ? global.litHtmlPolyfillSupportDevMode : global.litHtmlPolyfillSupport;
polyfillSupport === null || polyfillSupport === void 0 ? void 0 : polyfillSupport(Template, ChildPart);
((_d = global.litHtmlVersions) !== null && _d !== void 0 ? _d : global.litHtmlVersions = []).push("2.8.0");
if (DEV_MODE && global.litHtmlVersions.length > 1) {
  issueWarning("multiple-versions", `Multiple versions of Lit loaded. Loading multiple versions is not recommended.`);
}
var render = (value, container, options) => {
  var _a2, _b2;
  if (DEV_MODE && container == null) {
    throw new TypeError(`The container to render into may not be ${container}`);
  }
  const renderId = DEV_MODE ? debugLogRenderId++ : 0;
  const partOwnerNode = (_a2 = options === null || options === void 0 ? void 0 : options.renderBefore) !== null && _a2 !== void 0 ? _a2 : container;
  let part = partOwnerNode["_$litPart$"];
  debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({
    kind: "begin render",
    id: renderId,
    value,
    container,
    options,
    part
  });
  if (part === void 0) {
    const endNode = (_b2 = options === null || options === void 0 ? void 0 : options.renderBefore) !== null && _b2 !== void 0 ? _b2 : null;
    partOwnerNode["_$litPart$"] = part = new ChildPart(container.insertBefore(createMarker(), endNode), endNode, void 0, options !== null && options !== void 0 ? options : {});
  }
  part._$setValue(value);
  debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({
    kind: "end render",
    id: renderId,
    value,
    container,
    options,
    part
  });
  return part;
};
if (ENABLE_EXTRA_SECURITY_HOOKS) {
  render.setSanitizer = setSanitizer;
  render.createSanitizer = createSanitizer;
  if (DEV_MODE) {
    render._testOnlyClearSanitizerFactoryDoNotCallOrElse = _testOnlyClearSanitizerFactoryDoNotCallOrElse;
  }
}

// node_modules/lit-html/development/static.js
var brand = Symbol.for("");
var unwrapStaticValue = (value) => {
  if ((value === null || value === void 0 ? void 0 : value.r) !== brand) {
    return void 0;
  }
  return value === null || value === void 0 ? void 0 : value["_$litStatic$"];
};
var unsafeStatic = (value) => ({
  ["_$litStatic$"]: value,
  r: brand
});
var stringsCache = /* @__PURE__ */ new Map();
var withStatic = (coreTag) => (strings, ...values) => {
  const l = values.length;
  let staticValue;
  let dynamicValue;
  const staticStrings = [];
  const dynamicValues = [];
  let i = 0;
  let hasStatics = false;
  let s;
  while (i < l) {
    s = strings[i];
    while (i < l && (dynamicValue = values[i], staticValue = unwrapStaticValue(dynamicValue)) !== void 0) {
      s += staticValue + strings[++i];
      hasStatics = true;
    }
    if (i !== l) {
      dynamicValues.push(dynamicValue);
    }
    staticStrings.push(s);
    i++;
  }
  if (i === l) {
    staticStrings.push(strings[l]);
  }
  if (hasStatics) {
    const key = staticStrings.join("$$lit$$");
    strings = stringsCache.get(key);
    if (strings === void 0) {
      staticStrings.raw = staticStrings;
      stringsCache.set(key, strings = staticStrings);
    }
    values = dynamicValues;
  }
  return coreTag(strings, ...values);
};
var html2 = withStatic(html);
var svg2 = withStatic(svg);

// node_modules/@ui5/webcomponents-base/dist/CustomElementsScope.js
var LitStatic = class {
};
LitStatic.html = html2;
LitStatic.svg = svg2;
LitStatic.unsafeStatic = unsafeStatic;
registerFeature("LitStatic", LitStatic);

// node_modules/@ui5/webcomponents-base/dist/sap/base/strings/toHex.js
var fnToHex = function(iChar, iLength) {
  var sHex = iChar.toString(16);
  if (iLength) {
    sHex = sHex.padStart(iLength, "0");
  }
  return sHex;
};
var toHex_default = fnToHex;

// node_modules/@ui5/webcomponents-base/dist/sap/base/security/encodeXML.js
var rHtml = /[\x00-\x2b\x2f\x3a-\x40\x5b-\x5e\x60\x7b-\xff\u2028\u2029]/g;
var rHtmlReplace = /[\x00-\x08\x0b\x0c\x0e-\x1f\x7f-\x9f]/;
var mHtmlLookup = {
  "<": "&lt;",
  ">": "&gt;",
  "&": "&amp;",
  '"': "&quot;"
};
var fnHtml = function(sChar) {
  var sEncoded = mHtmlLookup[sChar];
  if (!sEncoded) {
    if (rHtmlReplace.test(sChar)) {
      sEncoded = "&#xfffd;";
    } else {
      sEncoded = "&#x" + toHex_default(sChar.charCodeAt(0)) + ";";
    }
    mHtmlLookup[sChar] = sEncoded;
  }
  return sEncoded;
};
var fnEncodeXML = function(sString) {
  return sString.replace(rHtml, fnHtml);
};
var encodeXML_default = fnEncodeXML;

// node_modules/@ui5/webcomponents-base/dist/util/Caret.js
var getCaretPosition = (field) => {
  let caretPos = 0;
  if (field.selectionStart || field.selectionStart === 0) {
    caretPos = field.selectionDirection === "backward" ? field.selectionStart : field.selectionEnd;
  }
  return caretPos;
};
var setCaretPosition = (field, caretPos) => {
  if (field.selectionStart) {
    field.focus();
    field.setSelectionRange(caretPos, caretPos);
  } else {
    field.focus();
  }
};

// node_modules/@ui5/webcomponents/dist/types/InputType.js
var InputType;
(function(InputType2) {
  InputType2["Text"] = "Text";
  InputType2["Email"] = "Email";
  InputType2["Number"] = "Number";
  InputType2["Password"] = "Password";
  InputType2["Tel"] = "Tel";
  InputType2["URL"] = "URL";
  InputType2["Search"] = "Search";
})(InputType || (InputType = {}));
var InputType_default = InputType;

// node_modules/@ui5/webcomponents/dist/InputPopoverTemplate.js
function InputPopoverTemplate(hooks) {
  var _a2;
  const suggestionsList = hooks == null ? void 0 : hooks.suggestionsList;
  return jsxs(Fragment, { children: [this._effectiveShowSuggestions && ((_a2 = this.Suggestions) == null ? void 0 : _a2.template.call(this, { suggestionsList, valueStateMessage, valueStateMessageInputIcon })), this.hasValueStateMessage && jsx(Popover_default, { preventInitialFocus: true, preventFocusRestore: true, hideArrow: true, class: "ui5-valuestatemessage-popover", placement: "Bottom", tabindex: -1, horizontalAlign: this._valueStatePopoverHorizontalAlign, opener: this, open: this.valueStateOpen, onClose: this._handleValueStatePopoverAfterClose, children: jsxs("div", { slot: "header", class: this.classes.popoverValueState, style: this.styles.popoverHeader, children: [jsx(Icon_default, { class: "ui5-input-value-state-message-icon", name: valueStateMessageInputIcon.call(this) }), this.valueStateOpen && valueStateMessage.call(this)] }) })] });
}
function valueStateMessage() {
  return jsx(Fragment, { children: this.shouldDisplayDefaultValueStateMessage ? this.valueStateText : jsx("slot", { name: "valueStateMessage" }) });
}
function valueStateMessageInputIcon() {
  const iconPerValueState = {
    Negative: error_default,
    Critical: alert_default,
    Positive: sys_enter_2_default,
    Information: information_default
  };
  return this.valueState !== ValueState_default.None ? iconPerValueState[this.valueState] : "";
}

// node_modules/@ui5/webcomponents/dist/InputTemplate.js
function InputTemplate(hooks) {
  const suggestionsList = hooks == null ? void 0 : hooks.suggestionsList;
  const preContent = (hooks == null ? void 0 : hooks.preContent) || defaultPreContent;
  const postContent = (hooks == null ? void 0 : hooks.postContent) || defaultPostContent;
  return jsxs(Fragment, { children: [jsx("div", { class: "ui5-input-root ui5-input-focusable-element", part: "root", onFocusIn: this._onfocusin, onFocusOut: this._onfocusout, children: jsxs("div", { class: "ui5-input-content", children: [preContent.call(this), jsx("input", { id: "inner", part: "input", class: "ui5-input-inner", style: this.styles.innerInput, type: this.inputNativeType, "inner-input": true, "inner-input-with-icon": this.icon.length, disabled: this.disabled, readonly: this._readonly, value: this._innerValue, placeholder: this._placeholder, maxlength: this.maxlength, role: this.accInfo.role, "aria-controls": this.accInfo.ariaControls, "aria-invalid": this.accInfo.ariaInvalid, "aria-haspopup": this.accInfo.ariaHasPopup, "aria-describedby": this.accInfo.ariaDescribedBy, "aria-roledescription": this.accInfo.ariaRoledescription, "aria-autocomplete": this.accInfo.ariaAutoComplete, "aria-expanded": this.accInfo.ariaExpanded, "aria-label": this.accInfo.ariaLabel, "aria-required": this.required, autocomplete: "off", "data-sap-focus-ref": true, step: this.nativeInputAttributes.step, min: this.nativeInputAttributes.min, max: this.nativeInputAttributes.max, onInput: this._handleNativeInput, onChange: this._handleChange, onSelect: this._handleSelect, onKeyDown: this._onkeydown, onKeyUp: this._onkeyup, onClick: this._click, onFocusIn: this.innerFocusIn }), this._effectiveShowClearIcon && jsx("div", { tabindex: -1, class: "ui5-input-clear-icon-wrapper inputIcon", onClick: this._clear, onMouseDown: this._iconMouseDown, children: jsx(Icon_default, { part: "clear-icon", class: "ui5-input-clear-icon", name: decline_default, tabindex: -1, accessibleName: this.clearIconAccessibleName }) }), this.icon.length > 0 && jsx("div", { class: "ui5-input-icon-root", children: jsx("slot", { name: "icon" }) }), jsx("div", { class: "ui5-input-value-state-icon", children: this._valueStateInputIcon }), postContent.call(this), this._effectiveShowSuggestions && jsxs(Fragment, { children: [jsx("span", { id: "suggestionsText", class: "ui5-hidden-text", children: this.suggestionsText }), jsx("span", { id: "selectionText", class: "ui5-hidden-text", "aria-live": "polite", role: "status" }), jsx("span", { id: "suggestionsCount", class: "ui5-hidden-text", "aria-live": "polite", children: this.availableSuggestionsCount })] }), this.accInfo.ariaDescription && jsx("span", { id: "descr", class: "ui5-hidden-text", children: this.accInfo.ariaDescription }), this.hasValueState && jsx("span", { id: "valueStateDesc", class: "ui5-hidden-text", children: this.ariaValueStateHiddenText })] }) }), InputPopoverTemplate.call(this, { suggestionsList })] });
}
function defaultPreContent() {
}
function defaultPostContent() {
}

// node_modules/@ui5/webcomponents/dist/Filters.js
var Filters_exports = {};
__export(Filters_exports, {
  Contains: () => Contains,
  None: () => None,
  StartsWith: () => StartsWith,
  StartsWithPerTerm: () => StartsWithPerTerm
});
var escapeReg = /[[\]{}()*+?.\\^$|]/g;
var escapeRegExp = (str) => {
  return str.replace(escapeReg, "\\$&");
};
var StartsWithPerTerm = (value, items, propName) => {
  const reg = new RegExp(`(^|\\s)${escapeRegExp(value.toLowerCase())}.*`, "g");
  return items.filter((item) => {
    const text = item[propName];
    reg.lastIndex = 0;
    return reg.test(text.toLowerCase());
  });
};
var StartsWith = (value, items, propName) => items.filter((item) => (item[propName] || "").toLowerCase().startsWith(value.toLowerCase()));
var Contains = (value, items, propName) => items.filter((item) => (item[propName] || "").toLowerCase().includes(value.toLowerCase()));
var None = (_, items) => items;

// node_modules/@ui5/webcomponents/dist/generated/themes/Input.css.js
registerThemePropertiesLoader("@ui5/webcomponents-theming", "sap_horizon", async () => parameters_bundle_css_default);
registerThemePropertiesLoader("@ui5/webcomponents", "sap_horizon", async () => parameters_bundle_css_default2);
var Input_css_default = `:host{vertical-align:middle}.ui5-hidden-text{position:absolute;clip:rect(1px,1px,1px,1px);user-select:none;left:-1000px;top:-1000px;pointer-events:none;font-size:0}.inputIcon{color:var(--_ui5-v2-8-0_input_icon_color);cursor:pointer;outline:none;padding:var(--_ui5-v2-8-0_input_icon_padding);border-inline-start:var(--_ui5-v2-8-0_input_icon_border);min-width:1rem;min-height:1rem;border-radius:var(--_ui5-v2-8-0_input_icon_border_radius)}.inputIcon.inputIcon--pressed{background:var(--_ui5-v2-8-0_input_icon_pressed_bg);box-shadow:var(--_ui5-v2-8-0_input_icon_box_shadow);border-inline-start:var(--_ui5-v2-8-0_select_hover_icon_left_border);color:var(--_ui5-v2-8-0_input_icon_pressed_color)}.inputIcon:active{background-color:var(--sapButton_Active_Background);box-shadow:var(--_ui5-v2-8-0_input_icon_box_shadow);border-inline-start:var(--_ui5-v2-8-0_select_hover_icon_left_border);color:var(--_ui5-v2-8-0_input_icon_pressed_color)}.inputIcon:not(.inputIcon--pressed):not(:active):hover{background:var(--_ui5-v2-8-0_input_icon_hover_bg);box-shadow:var(--_ui5-v2-8-0_input_icon_box_shadow)}.inputIcon:hover{border-inline-start:var(--_ui5-v2-8-0_select_hover_icon_left_border);box-shadow:var(--_ui5-v2-8-0_input_icon_box_shadow)}:host(:not([hidden])){display:inline-block}:host{width:var(--_ui5-v2-8-0_input_width);min-width:calc(var(--_ui5-v2-8-0_input_min_width) + (var(--_ui5-v2-8-0-input-icons-count)*var(--_ui5-v2-8-0_input_icon_width)));margin:var(--_ui5-v2-8-0_input_margin_top_bottom) 0;height:var(--_ui5-v2-8-0_input_height);color:var(--sapField_TextColor);font-size:var(--sapFontSize);font-family:"72override",var(--sapFontFamily);font-style:normal;border:var(--_ui5-v2-8-0-input-border);border-radius:var(--_ui5-v2-8-0_input_border_radius);box-sizing:border-box;text-align:start;transition:var(--_ui5-v2-8-0_input_transition);background:var(--sapField_BackgroundStyle);background-color:var(--_ui5-v2-8-0_input_background_color)}:host(:not([readonly])),:host([readonly][disabled]){box-shadow:var(--sapField_Shadow)}:host([focused]:not([opened])){border-color:var(--_ui5-v2-8-0_input_focused_border_color);background-color:var(--sapField_Focus_Background)}.ui5-input-focusable-element{position:relative}:host([focused]:not([opened])) .ui5-input-focusable-element:after{content:var(--ui5-v2-8-0_input_focus_pseudo_element_content);position:absolute;pointer-events:none;z-index:2;border:var(--sapContent_FocusWidth) var(--sapContent_FocusStyle) var(--_ui5-v2-8-0_input_focus_outline_color);border-radius:var(--_ui5-v2-8-0_input_focus_border_radius);top:var(--_ui5-v2-8-0_input_focus_offset);bottom:var(--_ui5-v2-8-0_input_focus_offset);left:var(--_ui5-v2-8-0_input_focus_offset);right:var(--_ui5-v2-8-0_input_focus_offset)}:host([focused][readonly]:not([opened])) .ui5-input-focusable-element:after{top:var(--_ui5-v2-8-0_input_readonly_focus_offset);bottom:var(--_ui5-v2-8-0_input_readonly_focus_offset);left:var(--_ui5-v2-8-0_input_readonly_focus_offset);right:var(--_ui5-v2-8-0_input_readonly_focus_offset);border-radius:var(--_ui5-v2-8-0_input_readonly_focus_border_radius)}.ui5-input-root:before{content:"";position:absolute;width:calc(100% - 2px);left:1px;bottom:-2px;border-bottom-left-radius:8px;border-bottom-right-radius:8px;height:var(--_ui5-v2-8-0_input_bottom_border_height);transition:var(--_ui5-v2-8-0_input_transition);background-color:var(--_ui5-v2-8-0_input_bottom_border_color)}.ui5-input-root{width:100%;height:100%;position:relative;background:transparent;display:inline-block;outline:none;box-sizing:border-box;color:inherit;transition:border-color .2s ease-in-out;border-radius:var(--_ui5-v2-8-0_input_border_radius);overflow:hidden}:host([disabled]){opacity:var(--_ui5-v2-8-0_input_disabled_opacity);cursor:default;pointer-events:none;background-color:var(--_ui5-v2-8-0-input_disabled_background);border-color:var(--_ui5-v2-8-0_input_disabled_border_color)}:host([disabled]) .ui5-input-root:before,:host([readonly]) .ui5-input-root:before{content:none}[inner-input]{background:transparent;color:inherit;border:none;font-style:inherit;-webkit-appearance:none;-moz-appearance:textfield;padding:var(--_ui5-v2-8-0_input_inner_padding);box-sizing:border-box;width:100%;text-overflow:ellipsis;flex:1;outline:none;font-size:inherit;font-family:inherit;line-height:inherit;letter-spacing:inherit;word-spacing:inherit;text-align:inherit}[inner-input][inner-input-with-icon]{padding:var(--_ui5-v2-8-0_input_inner_padding_with_icon)}[inner-input][type=search]::-webkit-search-decoration,[inner-input][type=search]::-webkit-search-cancel-button,[inner-input][type=search]::-webkit-search-results-button,[inner-input][type=search]::-webkit-search-results-decoration{display:none}.ui5-input-value-state-icon{height:100%;display:var(--_ui5-v2-8-0-input-value-state-icon-display);align-items:center}.ui5-input-value-state-icon>svg{margin-right:8px}[inner-input]::selection{background:var(--sapSelectedColor);color:var(--sapContent_ContrastTextColor)}:host([disabled]) [inner-input]::-webkit-input-placeholder{visibility:hidden}:host([readonly]) [inner-input]::-webkit-input-placeholder{visibility:hidden}:host([disabled]) [inner-input]::-moz-placeholder{visibility:hidden}:host([readonly]) [inner-input]::-moz-placeholder{visibility:hidden}[inner-input]::-webkit-input-placeholder{font-weight:400;font-style:var(--_ui5-v2-8-0_input_placeholder_style);color:var(--_ui5-v2-8-0_input_placeholder_color);padding-right:.125rem}[inner-input]::-moz-placeholder{font-weight:400;font-style:var(--_ui5-v2-8-0_input_placeholder_style);color:var(--_ui5-v2-8-0_input_placeholder_color);padding-right:.125rem}:host([value-state="Negative"]) [inner-input]::-webkit-input-placeholder{color:var(--_ui5-v2-8-0-input_error_placeholder_color);font-weight:var(--_ui5-v2-8-0_input_value_state_error_warning_placeholder_font_weight)}:host([value-state="Negative"]) [inner-input]::-moz-placeholder{color:var(--_ui5-v2-8-0-input_error_placeholder_color);font-weight:var(--_ui5-v2-8-0_input_value_state_error_warning_placeholder_font_weight)}:host([value-state="Critical"]) [inner-input]::-webkit-input-placeholder{font-weight:var(--_ui5-v2-8-0_input_value_state_error_warning_placeholder_font_weight)}:host([value-state="Critical"]) [inner-input]::-moz-placeholder{font-weight:var(--_ui5-v2-8-0_input_value_state_error_warning_placeholder_font_weight)}:host([value-state="Positive"]) [inner-input]::-webkit-input-placeholder{color:var(--_ui5-v2-8-0_input_placeholder_color)}:host([value-state="Positive"]) [inner-input]::-moz-placeholder{color:var(--_ui5-v2-8-0_input_placeholder_color)}:host([value-state="Information"]) [inner-input]::-webkit-input-placeholder{color:var(--_ui5-v2-8-0_input_placeholder_color)}:host([value-state="Information"]) [inner-input]::-moz-placeholder{color:var(--_ui5-v2-8-0_input_placeholder_color)}.ui5-input-content{height:100%;box-sizing:border-box;display:flex;flex-direction:row;justify-content:flex-end;overflow:hidden;outline:none;background:transparent;color:inherit;border-radius:var(--_ui5-v2-8-0_input_border_radius)}:host([readonly]:not([disabled])){border-color:var(--_ui5-v2-8-0_input_readonly_border_color);background:var(--sapField_ReadOnly_BackgroundStyle);background-color:var(--_ui5-v2-8-0_input_readonly_background)}:host([value-state="None"]:not([readonly]):hover),:host(:not([value-state]):not([readonly]):hover){border:var(--_ui5-v2-8-0_input_hover_border);border-color:var(--_ui5-v2-8-0_input_focused_border_color);box-shadow:var(--sapField_Hover_Shadow);background:var(--sapField_Hover_BackgroundStyle);background-color:var(--sapField_Hover_Background)}:host(:not([value-state]):not([readonly])[focused]:not([opened]):hover),:host([value-state="None"]:not([readonly])[focused]:not([opened]):hover){box-shadow:none}:host([focused]):not([opened]) .ui5-input-root:before{content:none}:host(:not([readonly]):not([disabled])[value-state]:not([value-state="None"])){border-width:var(--_ui5-v2-8-0_input_state_border_width)}:host([value-state="Negative"]) [inner-input],:host([value-state="Critical"]) [inner-input]{font-style:var(--_ui5-v2-8-0_input_error_warning_font_style);text-indent:var(--_ui5-v2-8-0_input_error_warning_text_indent)}:host([value-state="Negative"]) [inner-input]{font-weight:var(--_ui5-v2-8-0_input_error_font_weight)}:host([value-state="Critical"]) [inner-input]{font-weight:var(--_ui5-v2-8-0_input_warning_font_weight)}:host([value-state="Negative"]:not([readonly]):not([disabled])){background:var(--sapField_InvalidBackgroundStyle);background-color:var(--sapField_InvalidBackground);border-color:var(--_ui5-v2-8-0_input_value_state_error_border_color);box-shadow:var(--sapField_InvalidShadow)}:host([value-state="Negative"][focused]:not([opened]):not([readonly])){background-color:var(--_ui5-v2-8-0_input_focused_value_state_error_background);border-color:var(--_ui5-v2-8-0_input_focused_value_state_error_border_color)}:host([value-state="Negative"][focused]:not([opened]):not([readonly])) .ui5-input-focusable-element:after{border-color:var(--_ui5-v2-8-0_input_focused_value_state_error_focus_outline_color)}:host([value-state="Negative"]:not([readonly])) .ui5-input-root:before{background-color:var(--_ui5-v2-8-0-input-value-state-error-border-botom-color)}:host([value-state="Negative"]:not([readonly]):not([focused]):hover),:host([value-state="Negative"]:not([readonly])[focused][opened]:hover){background-color:var(--_ui5-v2-8-0_input_value_state_error_hover_background);box-shadow:var(--sapField_Hover_InvalidShadow)}:host([value-state="Negative"]:not([readonly]):not([disabled])),:host([value-state="Critical"]:not([readonly]):not([disabled])),:host([value-state="Information"]:not([readonly]):not([disabled])){border-style:var(--_ui5-v2-8-0_input_error_warning_border_style)}:host([value-state="Critical"]:not([readonly]):not([disabled])){background:var(--sapField_WarningBackgroundStyle);background-color:var(--sapField_WarningBackground);border-color:var(--_ui5-v2-8-0_input_value_state_warning_border_color);box-shadow:var(--sapField_WarningShadow)}:host([value-state="Critical"][focused]:not([opened]):not([readonly])){background-color:var(--_ui5-v2-8-0_input_focused_value_state_warning_background);border-color:var(--_ui5-v2-8-0_input_focused_value_state_warning_border_color)}:host([value-state="Critical"][focused]:not([opened]):not([readonly])) .ui5-input-focusable-element:after{border-color:var(--_ui5-v2-8-0_input_focused_value_state_warning_focus_outline_color)}:host([value-state="Critical"]:not([readonly])) .ui5-input-root:before{background-color:var(--_ui5-v2-8-0_input_value_state_warning_border_botom_color)}:host([value-state="Critical"]:not([readonly]):not([focused]):hover),:host([value-state="Critical"]:not([readonly])[focused][opened]:hover){background-color:var(--sapField_Hover_Background);box-shadow:var(--sapField_Hover_WarningShadow)}:host([value-state="Positive"]:not([readonly]):not([disabled])){background:var(--sapField_SuccessBackgroundStyle);background-color:var(--sapField_SuccessBackground);border-color:var(--_ui5-v2-8-0_input_value_state_success_border_color);border-width:var(--_ui5-v2-8-0_input_value_state_success_border_width);box-shadow:var(--sapField_SuccessShadow)}:host([value-state="Positive"][focused]:not([opened]):not([readonly])){background-color:var(--_ui5-v2-8-0_input_focused_value_state_success_background);border-color:var(--_ui5-v2-8-0_input_focused_value_state_success_border_color)}:host([value-state="Positive"][focused]:not([opened]):not([readonly])) .ui5-input-focusable-element:after{border-color:var(--_ui5-v2-8-0_input_focused_value_state_success_focus_outline_color)}:host([value-state="Positive"]:not([readonly])) .ui5-input-root:before{background-color:var(--_ui5-v2-8-0_input_value_state_success_border_botom_color)}:host([value-state="Positive"]:not([readonly]):not([focused]):hover),:host([value-state="Positive"]:not([readonly])[focused][opened]:hover){background-color:var(--sapField_Hover_Background);box-shadow:var(--sapField_Hover_SuccessShadow)}:host([value-state="Information"]:not([readonly]):not([disabled])){background:var(--sapField_InformationBackgroundStyle);background-color:var(--sapField_InformationBackground);border-color:var(--_ui5-v2-8-0_input_value_state_information_border_color);border-width:var(--_ui5-v2-8-0_input_information_border_width);box-shadow:var(--sapField_InformationShadow)}:host([value-state="Information"][focused]:not([opened]):not([readonly])){background-color:var(--_ui5-v2-8-0_input_focused_value_state_information_background);border-color:var(--_ui5-v2-8-0_input_focused_value_state_information_border_color)}:host([value-state="Information"]:not([readonly])) .ui5-input-root:before{background-color:var(--_ui5-v2-8-0_input_value_success_information_border_botom_color)}:host([value-state="Information"]:not([readonly]):not([focused]):hover),:host([value-state="Information"]:not([readonly])[focused][opened]:hover){background-color:var(--sapField_Hover_Background);box-shadow:var(--sapField_Hover_InformationShadow)}.ui5-input-icon-root{min-width:var(--_ui5-v2-8-0_input_icon_min_width);height:100%;display:flex;justify-content:center;align-items:center}::slotted([ui5-icon][slot="icon"]){align-self:start;padding:var(--_ui5-v2-8-0_input_custom_icon_padding);box-sizing:content-box!important}:host([value-state="Negative"]) .inputIcon,:host([value-state="Critical"]) .inputIcon{padding:var(--_ui5-v2-8-0_input_error_warning_icon_padding)}:host([value-state="Negative"][focused]) .inputIcon,:host([value-state="Critical"][focused]) .inputIcon{padding:var(--_ui5-v2-8-0_input_error_warning_focused_icon_padding)}:host([value-state="Information"]) .inputIcon{padding:var(--_ui5-v2-8-0_input_information_icon_padding)}:host([value-state="Information"][focused]) .inputIcon{padding:var(--_ui5-v2-8-0_input_information_focused_icon_padding)}:host([value-state="Negative"]) ::slotted(.inputIcon[ui5-icon]),:host([value-state="Negative"]) ::slotted([ui5-icon][slot="icon"]),:host([value-state="Critical"]) ::slotted([ui5-icon][slot="icon"]){padding:var(--_ui5-v2-8-0_input_error_warning_custom_icon_padding)}:host([value-state="Negative"][focused]) ::slotted(.inputIcon[ui5-icon]),:host([value-state="Negative"][focused]) ::slotted([ui5-icon][slot="icon"]),:host([value-state="Critical"][focused]) ::slotted([ui5-icon][slot="icon"]){padding:var(--_ui5-v2-8-0_input_error_warning_custom_focused_icon_padding)}:host([value-state="Information"]) ::slotted([ui5-icon][slot="icon"]){padding:var(--_ui5-v2-8-0_input_information_custom_icon_padding)}:host([value-state="Information"][focused]) ::slotted([ui5-icon][slot="icon"]){padding:var(--_ui5-v2-8-0_input_information_custom_focused_icon_padding)}:host([value-state="Negative"]) .inputIcon:active,:host([value-state="Negative"]) .inputIcon.inputIcon--pressed{box-shadow:var(--_ui5-v2-8-0_input_error_icon_box_shadow);color:var(--_ui5-v2-8-0_input_icon_error_pressed_color)}:host([value-state="Negative"]) .inputIcon:not(.inputIcon--pressed):not(:active):hover{box-shadow:var(--_ui5-v2-8-0_input_error_icon_box_shadow)}:host([value-state="Critical"]) .inputIcon:active,:host([value-state="Critical"]) .inputIcon.inputIcon--pressed{box-shadow:var(--_ui5-v2-8-0_input_warning_icon_box_shadow);color:var(--_ui5-v2-8-0_input_icon_warning_pressed_color)}:host([value-state="Critical"]) .inputIcon:not(.inputIcon--pressed):not(:active):hover{box-shadow:var(--_ui5-v2-8-0_input_warning_icon_box_shadow)}:host([value-state="Information"]) .inputIcon:active,:host([value-state="Information"]) .inputIcon.inputIcon--pressed{box-shadow:var(--_ui5-v2-8-0_input_information_icon_box_shadow);color:var(--_ui5-v2-8-0_input_icon_information_pressed_color)}:host([value-state="Information"]) .inputIcon:not(.inputIcon--pressed):not(:active):hover{box-shadow:var(--_ui5-v2-8-0_input_information_icon_box_shadow)}:host([value-state="Positive"]) .inputIcon:active,:host([value-state="Positive"]) .inputIcon.inputIcon--pressed{box-shadow:var(--_ui5-v2-8-0_input_success_icon_box_shadow);color:var(--_ui5-v2-8-0_input_icon_success_pressed_color)}:host([value-state="Positive"]) .inputIcon:not(.inputIcon--pressed):not(:active):hover{box-shadow:var(--_ui5-v2-8-0_input_success_icon_box_shadow)}.ui5-input-clear-icon-wrapper{height:var(--_ui5-v2-8-0_input_icon_wrapper_height);padding:0;width:var(--_ui5-v2-8-0_input_icon_width);min-width:var(--_ui5-v2-8-0_input_icon_width);display:flex;justify-content:center;align-items:center;box-sizing:border-box}:host([value-state]:not([value-state="None"]):not([value-state="Positive"])) .ui5-input-clear-icon-wrapper{height:var(--_ui5-v2-8-0_input_icon_wrapper_state_height);vertical-align:top}:host([value-state="Positive"]) .ui5-input-clear-icon-wrapper{height:var(--_ui5-v2-8-0_input_icon_wrapper_success_state_height)}[ui5-icon].ui5-input-clear-icon{padding:0;color:inherit}[inner-input]::-webkit-outer-spin-button,[inner-input]::-webkit-inner-spin-button{-webkit-appearance:inherit;margin:inherit}
`;

// node_modules/@ui5/webcomponents/dist/generated/themes/ResponsivePopoverCommon.css.js
registerThemePropertiesLoader("@ui5/webcomponents-theming", "sap_horizon", async () => parameters_bundle_css_default);
registerThemePropertiesLoader("@ui5/webcomponents", "sap_horizon", async () => parameters_bundle_css_default2);
var ResponsivePopoverCommon_css_default = `.input-root-phone{flex:1;position:relative;height:var(--_ui5-v2-8-0_input_height);color:var(--sapField_TextColor);font-size:var(--sapFontSize);font-family:"72override",var(--sapFontFamily);background:var(--sapField_BackgroundStyle);background-color:var(--_ui5-v2-8-0_input_background_color);border:var(--_ui5-v2-8-0-input-border);border-radius:var(--_ui5-v2-8-0_input_border_radius);box-sizing:border-box}.input-root-phone [inner-input]{padding:0 .5rem;width:100%;height:100%}.input-root-phone [inner-input]:focus{background-color:var(--sapField_Focus_Background)}.input-root-phone:focus-within:before{content:"";position:absolute;pointer-events:none;z-index:2;border:var(--sapContent_FocusWidth) var(--sapContent_FocusStyle) var(--sapContent_FocusColor);border-radius:var(--_ui5-v2-8-0_input_focus_border_radius);top:var(--_ui5-v2-8-0_input_focus_offset);bottom:var(--_ui5-v2-8-0_input_focus_offset);left:var(--_ui5-v2-8-0_input_focus_offset);right:var(--_ui5-v2-8-0_input_focus_offset)}.input-root-phone [value-state=Negative] .inputIcon[data-ui5-compact-size],.input-root-phone [value-state=Positive] .inputIcon[data-ui5-compact-size],.input-root-phone [value-state=Critical] .inputIcon[data-ui5-compact-size]{padding:.1875rem .5rem}[inner-input]{background:transparent;color:inherit;border:none;font-style:normal;-webkit-appearance:none;-moz-appearance:textfield;line-height:normal;padding:var(--_ui5-v2-8-0_input_inner_padding);box-sizing:border-box;min-width:3rem;text-overflow:ellipsis;flex:1;outline:none;font-size:inherit;font-family:inherit;border-radius:var(--_ui5-v2-8-0_input_border_radius)}[inner-input]::selection,[inner-input]::-moz-selection{background:var(--sapSelectedColor);color:var(--sapContent_ContrastTextColor)}[inner-input]::-webkit-input-placeholder{font-style:italic;color:var(--sapField_PlaceholderTextColor)}[inner-input]::-moz-placeholder{font-style:italic;color:var(--sapField_PlaceholderTextColor)}.input-root-phone[value-state]:not([value-state=None]){border-width:var(--_ui5-v2-8-0_input_state_border_width)}.input-root-phone[value-state=Negative] [inner-input],.input-root-phone[value-state=Critical] [inner-input]{font-style:var(--_ui5-v2-8-0_input_error_warning_font_style)}.input-root-phone[value-state=Negative] [inner-input]{font-weight:var(--_ui5-v2-8-0_input_error_font_weight)}.input-root-phone[value-state=Negative]:not([readonly]){background:var(--sapField_InvalidBackgroundStyle);background-color:var(--sapField_InvalidBackground);border-color:var(--_ui5-v2-8-0_input_value_state_error_border_color)}.input-root-phone[value-state=Negative]:not([readonly]) [inner-input]:focus{background-color:var(--_ui5-v2-8-0_input_focused_value_state_error_background);border-color:var(--_ui5-v2-8-0_input_focused_value_state_error_border_color)}.input-root-phone[value-state=Negative]:not([readonly]):focus-within:before{border-color:var(--_ui5-v2-8-0_input_focused_value_state_error_focus_outline_color)}.input-root-phone[value-state=Negative]:not([readonly]):not([disabled]),.input-root-phone[value-state=Critical]:not([readonly]):not([disabled]),.input-root-phone[value-state=Information]:not([readonly]):not([disabled]){border-style:var(--_ui5-v2-8-0_input_error_warning_border_style)}.input-root-phone[value-state=Critical]:not([readonly]){background:var(--sapField_WarningBackgroundStyle);background-color:var(--sapField_WarningBackground);border-color:var(--_ui5-v2-8-0_input_value_state_warning_border_color)}.input-root-phone[value-state=Critical]:not([readonly]) [inner-input]:focus{background-color:var(--_ui5-v2-8-0_input_focused_value_state_warning_background);border-color:var(--_ui5-v2-8-0_input_focused_value_state_warning_border_color)}.input-root-phone[value-state=Critical]:not([readonly]):focus-within:before{border-color:var(--_ui5-v2-8-0_input_focused_value_state_warning_focus_outline_color)}.input-root-phone[value-state=Positive]:not([readonly]){background:var(--sapField_SuccessBackgroundStyle);background-color:var(--sapField_SuccessBackground);border-color:var(--_ui5-v2-8-0_input_value_state_success_border_color);border-width:var(--_ui5-v2-8-0_input_value_state_success_border_width)}.input-root-phone[value-state=Positive]:not([readonly]) [inner-input]:focus{background-color:var(--_ui5-v2-8-0_input_focused_value_state_success_background);border-color:var(--_ui5-v2-8-0_input_focused_value_state_success_border_color)}.input-root-phone[value-state=Positive]:not([readonly]):focus-within:before{border-color:var(--_ui5-v2-8-0_input_focused_value_state_success_focus_outline_color)}.input-root-phone[value-state=Information]:not([readonly]){background:var(--sapField_InformationBackgroundStyle);background-color:var(--sapField_InformationBackground);border-color:var(--_ui5-v2-8-0_input_value_state_information_border_color);border-width:var(--_ui5-v2-8-0_input_information_border_width)}.input-root-phone[value-state=Information]:not([readonly]) [inner-input]:focus{background-color:var(--_ui5-v2-8-0_input_focused_value_state_information_background);border-color:var(--_ui5-v2-8-0_input_focused_value_state_information_border_color)}.ui5-multi-combobox-toggle-button{margin-left:.5rem}.ui5-responsive-popover-header{width:100%;min-height:2.5rem;display:flex;flex-direction:column}.ui5-responsive-popover-header-text{width:calc(100% - var(--_ui5-v2-8-0_button_base_min_width))}.ui5-responsive-popover-header .row{box-sizing:border-box;padding:.25rem 1rem;min-height:2.5rem;display:flex;justify-content:center;align-items:center;font-size:var(--sapFontHeader5Size)}.ui5-responsive-popover-footer{display:flex;justify-content:flex-end;padding:.25rem 0;width:100%}.ui5-responsive-popover-close-btn{position:absolute;right:1rem}
`;

// node_modules/@ui5/webcomponents/dist/generated/themes/ValueStateMessage.css.js
registerThemePropertiesLoader("@ui5/webcomponents-theming", "sap_horizon", async () => parameters_bundle_css_default);
registerThemePropertiesLoader("@ui5/webcomponents", "sap_horizon", async () => parameters_bundle_css_default2);
var ValueStateMessage_css_default = `.ui5-valuestatemessage-popover{border-radius:var(--_ui5-v2-8-0_value_state_message_popover_border_radius);box-shadow:var(--_ui5-v2-8-0_value_state_message_popover_box_shadow)}.ui5-input-value-state-message-icon{width:var(--_ui5-v2-8-0_value_state_message_icon_width);height:var(--_ui5-v2-8-0_value_state_message_icon_height);display:var(--_ui5-v2-8-0_input_value_state_icon_display);position:absolute;padding-right:.375rem}.ui5-valuestatemessage-root .ui5-input-value-state-message-icon{left:var(--_ui5-v2-8-0_input_value_state_icon_offset)}.ui5-input-value-state-message-icon[name=error]{color:var(--sapNegativeElementColor)}.ui5-input-value-state-message-icon[name=alert]{color:var(--sapCriticalElementColor)}.ui5-input-value-state-message-icon[name=success]{color:var(--sapPositiveElementColor)}.ui5-input-value-state-message-icon[name=information]{color:var(--sapInformativeElementColor)}.ui5-valuestatemessage-root{box-sizing:border-box;display:inline-block;color:var(--sapTextColor);font-size:var(--sapFontSmallSize);font-family:"72override",var(--sapFontFamily);height:auto;padding:var(--_ui5-v2-8-0_value_state_message_padding);overflow:hidden;text-overflow:ellipsis;min-width:6.25rem;border:var(--_ui5-v2-8-0_value_state_message_border);line-height:var(--_ui5-v2-8-0_value_state_message_line_height)}[ui5-responsive-popover] .ui5-valuestatemessage-header,[ui5-popover] .ui5-valuestatemessage-header{min-height:2rem}[ui5-responsive-popover] .ui5-valuestatemessage-header{padding:var(--_ui5-v2-8-0_value_state_header_padding);border:var(--_ui5-v2-8-0_value_state_header_border);border-bottom:var(--_ui5-v2-8-0_value_state_header_border_bottom);flex-grow:1;position:relative}.ui5-valuestatemessage--success{background:var(--sapSuccessBackground)}.ui5-valuestatemessage--warning{background:var(--sapWarningBackground)}.ui5-valuestatemessage--error{background:var(--sapErrorBackground)}.ui5-valuestatemessage--information{background:var(--sapInformationBackground)}.ui5-responsive-popover-header.ui5-responsive-popover-header--focused,.ui5-responsive-popover-header:focus{outline-offset:var(--_ui5-v2-8-0_value_state_header_offset);outline:var(--sapContent_FocusWidth) var(--sapContent_FocusStyle) var(--sapContent_FocusColor)}.ui5-valuestatemessage-popover::part(header),.ui5-valuestatemessage-popover::part(content){padding:0}.ui5-valuestatemessage-popover::part(header),.ui5-valuestatemessage-popover::part(footer){min-height:0}.ui5-valuestatemessage-popover::part(header),.ui5-popover-with-value-state-header::part(header),.ui5-popover-with-value-state-header-phone::part(header){margin-bottom:0}.ui5-popover-with-value-state-header-phone .ui5-valuestatemessage-root{padding:var(--_ui5-v2-8-0_value_state_message_padding_phone);width:100%}.ui5-popover-with-value-state-header-phone .ui5-input-value-state-message-icon{left:var(--_ui5-v2-8-0_value_state_message_icon_offset_phone)}.ui5-popover-with-value-state-header-phone .ui5-valuestatemessage-header{position:relative;flex:none;top:0;left:0}.ui5-popover-with-value-state-header-phone::part(content){padding:0;overflow:hidden;display:flex;flex-direction:column}.ui5-popover-with-value-state-header-phone [ui5-list]{overflow:auto}[ui5-responsive-popover] .ui5-valuestatemessage--error{box-shadow:var(--_ui5-v2-8-0_value_state_header_box_shadow_error)}[ui5-responsive-popover] .ui5-valuestatemessage--information{box-shadow:var(--_ui5-v2-8-0_value_state_header_box_shadow_information)}[ui5-responsive-popover] .ui5-valuestatemessage--success{box-shadow:var(--_ui5-v2-8-0_value_state_header_box_shadow_success)}[ui5-responsive-popover] .ui5-valuestatemessage--warning{box-shadow:var(--_ui5-v2-8-0_value_state_header_box_shadow_warning)}[ui5-responsive-popover].ui5-popover-with-value-state-header .ui5-valuestatemessage-root:has(+[ui5-list]:empty){box-shadow:none}
`;

// node_modules/@ui5/webcomponents/dist/generated/themes/Suggestions.css.js
registerThemePropertiesLoader("@ui5/webcomponents-theming", "sap_horizon", async () => parameters_bundle_css_default);
registerThemePropertiesLoader("@ui5/webcomponents", "sap_horizon", async () => parameters_bundle_css_default2);
var Suggestions_css_default = `.ui5-suggestions-popover{box-shadow:var(--sapContent_Shadow1)}.ui5-suggestions-popover::part(header),.ui5-suggestions-popover::part(content){padding:0}.ui5-suggestions-popover::part(footer){padding:0 1rem}.input-root-phone.native-input-wrapper{display:contents}.input-root-phone.native-input-wrapper:before{display:none}.native-input-wrapper .ui5-input-inner-phone{margin:0}
`;

// node_modules/@ui5/webcomponents/dist/Input.js
var __decorate = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d2;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d2 = decorators[i]) r = (c < 3 ? d2(r) : c > 3 ? d2(target, key, r) : d2(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var Input_1;
var INPUT_EVENTS;
(function(INPUT_EVENTS2) {
  INPUT_EVENTS2["CHANGE"] = "change";
  INPUT_EVENTS2["INPUT"] = "input";
  INPUT_EVENTS2["SELECTION_CHANGE"] = "selection-change";
})(INPUT_EVENTS || (INPUT_EVENTS = {}));
var INPUT_ACTIONS;
(function(INPUT_ACTIONS2) {
  INPUT_ACTIONS2["ACTION_ENTER"] = "enter";
  INPUT_ACTIONS2["ACTION_USER_INPUT"] = "input";
})(INPUT_ACTIONS || (INPUT_ACTIONS = {}));
var Input = Input_1 = class Input2 extends UI5Element_default {
  get formValidityMessage() {
    return Input_1.i18nBundle.getText(FORM_TEXTFIELD_REQUIRED);
  }
  get _effectiveShowSuggestions() {
    return !!(this.showSuggestions && this.Suggestions);
  }
  get formValidity() {
    return { valueMissing: this.required && !this.value };
  }
  async formElementAnchor() {
    return this.getFocusDomRefAsync();
  }
  get formFormattedValue() {
    return this.value;
  }
  constructor() {
    super();
    this.disabled = false;
    this.highlight = false;
    this.readonly = false;
    this.required = false;
    this.noTypeahead = false;
    this.type = "Text";
    this.value = "";
    this._innerValue = "";
    this.valueState = "None";
    this.showSuggestions = false;
    this.showClearIcon = false;
    this.open = false;
    this._effectiveShowClearIcon = false;
    this.focused = false;
    this.valueStateOpen = false;
    this._isValueStateFocused = false;
    this._inputAccInfo = {};
    this._nativeInputAttributes = {};
    this._inputIconFocused = false;
    this.hasSuggestionItemSelected = false;
    this.valueBeforeItemSelection = "";
    this.valueBeforeSelectionStart = "";
    this.previousValue = "";
    this.firstRendering = true;
    this.typedInValue = "";
    this.lastConfirmedValue = "";
    this.isTyping = false;
    this._isLatestValueFromSuggestions = false;
    this._isChangeTriggeredBySuggestion = false;
    this._indexOfSelectedItem = -1;
    this._handleResizeBound = this._handleResize.bind(this);
    this._keepInnerValue = false;
    this._focusedAfterClear = false;
  }
  onEnterDOM() {
    ResizeHandler_default.register(this, this._handleResizeBound);
    registerUI5Element(this, this._updateAssociatedLabelsTexts.bind(this));
  }
  onExitDOM() {
    ResizeHandler_default.deregister(this, this._handleResizeBound);
    deregisterUI5Element(this);
  }
  _highlightSuggestionItem(item) {
    var _a2;
    item.markupText = this.typedInValue ? (_a2 = this.Suggestions) == null ? void 0 : _a2.hightlightInput(item.text || "", this.typedInValue) : encodeXML_default(item.text || "");
  }
  _isGroupItem(item) {
    return item.hasAttribute("ui5-suggestion-item-group");
  }
  onBeforeRendering() {
    if (!this._keepInnerValue) {
      this._innerValue = this.value === null ? "" : this.value;
    }
    if (this.showSuggestions) {
      this.enableSuggestions();
      this._flattenItems.forEach((item) => {
        var _a2;
        if (item.hasAttribute("ui5-suggestion-item")) {
          this._highlightSuggestionItem(item);
        } else if (this._isGroupItem(item)) {
          (_a2 = item.items) == null ? void 0 : _a2.forEach((nestedItem) => {
            this._highlightSuggestionItem(nestedItem);
          });
        }
      });
    }
    this._effectiveShowClearIcon = this.showClearIcon && !!this.value && !this.readonly && !this.disabled;
    this.style.setProperty(getScopedVarName("--_ui5-input-icons-count"), `${this.iconsCount}`);
    const hasItems = !!this._flattenItems.length;
    const hasValue = !!this.value;
    const isFocused = this.shadowRoot.querySelector("input") === getActiveElement_default();
    if (this.shouldDisplayOnlyValueStateMessage) {
      this.openValueStatePopover();
    } else {
      this.closeValueStatePopover();
    }
    const preventOpenPicker = this.disabled || this.readonly;
    if (preventOpenPicker) {
      this.open = false;
    } else if (!this._isPhone) {
      this.open = hasItems && (this.open || hasValue && isFocused && this.isTyping);
    }
    const value = this.value;
    const innerInput = this.getInputDOMRefSync();
    if (!innerInput || !value) {
      return;
    }
    const autoCompletedChars = innerInput.selectionEnd - innerInput.selectionStart;
    if (this._shouldAutocomplete && !isAndroid() && !autoCompletedChars && !this._isKeyNavigation) {
      const item = this._getFirstMatchingItem(value);
      if (item) {
        this._handleTypeAhead(item);
        this._selectMatchingItem(item);
      }
    }
  }
  onAfterRendering() {
    var _a2;
    const innerInput = this.getInputDOMRefSync();
    if (this.showSuggestions && ((_a2 = this.Suggestions) == null ? void 0 : _a2._getPicker())) {
      this._listWidth = this.Suggestions._getListWidth();
      this.Suggestions._getList()._itemNavigation._getItems = () => [];
    }
    if (this._performTextSelection) {
      if (innerInput.value !== this._innerValue) {
        innerInput.value = this._innerValue;
      }
      if (this.typedInValue.length && this.value.length) {
        innerInput.setSelectionRange(this.typedInValue.length, this.value.length);
      }
      this.fireDecoratorEvent("type-ahead");
    }
    this._performTextSelection = false;
  }
  _onkeydown(e) {
    this._isKeyNavigation = true;
    this._shouldAutocomplete = !this.noTypeahead && !(isBackSpace(e) || isDelete(e) || isEscape(e));
    if (isUp(e)) {
      return this._handleUp(e);
    }
    if (isDown(e)) {
      return this._handleDown(e);
    }
    if (isSpace(e)) {
      return this._handleSpace(e);
    }
    if (isTabNext(e)) {
      return this._handleTab();
    }
    if (isEnter(e)) {
      const isValueUnchanged = this.previousValue === this.getInputDOMRefSync().value;
      this._enterKeyDown = true;
      if (isValueUnchanged && this._internals.form) {
        submitForm(this);
      }
      return this._handleEnter(e);
    }
    if (isPageUp(e)) {
      return this._handlePageUp(e);
    }
    if (isPageDown(e)) {
      return this._handlePageDown(e);
    }
    if (isHome(e)) {
      return this._handleHome(e);
    }
    if (isEnd(e)) {
      return this._handleEnd(e);
    }
    if (isEscape(e)) {
      return this._handleEscape();
    }
    if (this.showSuggestions) {
      this._clearPopoverFocusAndSelection();
    }
    this._isKeyNavigation = false;
  }
  _onkeyup(e) {
    if (isDelete(e)) {
      this.value = e.target.value;
    }
    this._enterKeyDown = false;
  }
  get currentItemIndex() {
    var _a2;
    const allItems = (_a2 = this.Suggestions) == null ? void 0 : _a2._getItems();
    const currentItem = allItems.find((item) => {
      return item.selected || item.focused;
    });
    const indexOfCurrentItem = currentItem ? allItems.indexOf(currentItem) : -1;
    return indexOfCurrentItem;
  }
  _handleUp(e) {
    var _a2;
    if ((_a2 = this.Suggestions) == null ? void 0 : _a2.isOpened()) {
      this.Suggestions.onUp(e, this.currentItemIndex);
    }
  }
  _handleDown(e) {
    var _a2;
    if ((_a2 = this.Suggestions) == null ? void 0 : _a2.isOpened()) {
      this.Suggestions.onDown(e, this.currentItemIndex);
    }
  }
  _handleSpace(e) {
    if (this.Suggestions) {
      this.Suggestions.onSpace(e);
    }
  }
  _handleTab() {
    if (this.Suggestions && this.previousValue !== this.value) {
      this.Suggestions.onTab();
    }
  }
  _handleEnter(e) {
    var _a2;
    const suggestionItemPressed = !!((_a2 = this.Suggestions) == null ? void 0 : _a2.onEnter(e));
    const innerInput = this.getInputDOMRefSync();
    const matchingItem = this._selectableItems.find((item) => {
      return item.text === this.value;
    });
    if (matchingItem) {
      const itemText = matchingItem.text || "";
      innerInput.setSelectionRange(itemText.length, itemText.length);
      if (!suggestionItemPressed) {
        this.fireSelectionChange(matchingItem, true);
        this.acceptSuggestion(matchingItem, true);
        this.open = false;
      }
    }
    if (this._isPhone && !this._flattenItems.length && !this.isTypeNumber) {
      innerInput.setSelectionRange(this.value.length, this.value.length);
    }
    if (!suggestionItemPressed) {
      this.lastConfirmedValue = this.value;
      return;
    }
    this.focused = true;
  }
  _handlePageUp(e) {
    var _a2;
    if (this._isSuggestionsFocused) {
      (_a2 = this.Suggestions) == null ? void 0 : _a2.onPageUp(e);
    } else {
      e.preventDefault();
    }
  }
  _handlePageDown(e) {
    var _a2;
    if (this._isSuggestionsFocused) {
      (_a2 = this.Suggestions) == null ? void 0 : _a2.onPageDown(e);
    } else {
      e.preventDefault();
    }
  }
  _handleHome(e) {
    var _a2;
    if (this._isSuggestionsFocused) {
      (_a2 = this.Suggestions) == null ? void 0 : _a2.onHome(e);
    }
  }
  _handleEnd(e) {
    var _a2;
    if (this._isSuggestionsFocused) {
      (_a2 = this.Suggestions) == null ? void 0 : _a2.onEnd(e);
    }
  }
  _handleEscape() {
    var _a2;
    const hasSuggestions = this.showSuggestions && !!this.Suggestions;
    const isOpen = hasSuggestions && this.open;
    const innerInput = this.getInputDOMRefSync();
    const isAutoCompleted = innerInput.selectionEnd - innerInput.selectionStart > 0;
    this.isTyping = false;
    if (!isOpen) {
      this.value = this.lastConfirmedValue ? this.lastConfirmedValue : this.previousValue;
      return;
    }
    if (isOpen && ((_a2 = this.Suggestions) == null ? void 0 : _a2._isItemOnTarget())) {
      this.value = this.typedInValue || this.valueBeforeSelectionStart;
      this.focused = true;
      return;
    }
    if (isAutoCompleted) {
      this.value = this.typedInValue;
    }
    if (this._isValueStateFocused) {
      this._isValueStateFocused = false;
      this.focused = true;
    }
  }
  _onfocusin(e) {
    this.focused = true;
    if (!this._focusedAfterClear) {
      this.previousValue = this.value;
    }
    this.valueBeforeSelectionStart = this.value;
    this._inputIconFocused = !!e.target && e.target === this.querySelector("[ui5-icon]");
    this._focusedAfterClear = false;
  }
  /**
   * Called on "focusin" of the native input HTML Element.
   * **Note:** implemented in MultiInput, but used in the Input template.
   */
  innerFocusIn() {
  }
  _onfocusout(e) {
    var _a2;
    const toBeFocused = e.relatedTarget;
    if (((_a2 = this.Suggestions) == null ? void 0 : _a2._getPicker().contains(toBeFocused)) || this.contains(toBeFocused) || this.getSlottedNodes("valueStateMessage").some((el) => el.contains(toBeFocused))) {
      return;
    }
    this._keepInnerValue = false;
    this.focused = false;
    this._isChangeTriggeredBySuggestion = false;
    if (this.showClearIcon && !this._effectiveShowClearIcon) {
      this._clearIconClicked = false;
      this._handleChange();
    }
    this.open = false;
    this._clearPopoverFocusAndSelection();
    if (!this._clearIconClicked) {
      this.previousValue = "";
    }
    this.lastConfirmedValue = "";
    this.isTyping = false;
  }
  _clearPopoverFocusAndSelection() {
    var _a2, _b2;
    if (!this.showSuggestions || !this.Suggestions) {
      return;
    }
    this._isValueStateFocused = false;
    this.hasSuggestionItemSelected = false;
    (_a2 = this.Suggestions) == null ? void 0 : _a2._deselectItems();
    (_b2 = this.Suggestions) == null ? void 0 : _b2._clearItemFocus();
  }
  _click() {
    if (isPhone() && !this.readonly && this.Suggestions) {
      this.blur();
      this.open = true;
    }
  }
  _handleChange() {
    var _a2;
    if (this._clearIconClicked) {
      this._clearIconClicked = false;
      return;
    }
    const fireChange = () => {
      if (!this._isChangeTriggeredBySuggestion) {
        this.fireDecoratorEvent(INPUT_EVENTS.CHANGE);
      }
      this.previousValue = this.value;
      this.typedInValue = this.value;
      this._isChangeTriggeredBySuggestion = false;
    };
    if (this.previousValue !== this.getInputDOMRefSync().value) {
      if (((_a2 = this.Suggestions) == null ? void 0 : _a2._getPicker().open) && this._flattenItems.some((item) => item.hasAttribute("ui5-suggestion-item") && item.selected)) {
        this._changeToBeFired = true;
      } else {
        fireChange();
        if (this._enterKeyDown && this._internals.form) {
          submitForm(this);
        }
      }
    }
  }
  _clear() {
    const valueBeforeClear = this.value;
    this.value = "";
    const prevented = !this.fireDecoratorEvent(INPUT_EVENTS.INPUT, { inputType: "" });
    if (prevented) {
      this.value = valueBeforeClear;
      return;
    }
    if (!this._isPhone) {
      this.fireResetSelectionChange();
      this.focus();
      this._focusedAfterClear = true;
    }
  }
  _iconMouseDown() {
    this._clearIconClicked = true;
  }
  _scroll(e) {
    this.fireDecoratorEvent("suggestion-scroll", {
      scrollTop: e.detail.scrollTop,
      scrollContainer: e.detail.targetRef
    });
  }
  _handleSelect() {
    this.fireDecoratorEvent("select");
  }
  _handleInput(e) {
    const eventType = e.detail && e.detail.inputType || "";
    this._input(e, eventType);
  }
  _handleNativeInput(e) {
    const eventType = e.inputType || "";
    this._input(e, eventType);
  }
  _input(e, eventType) {
    const inputDomRef = this.getInputDOMRefSync();
    const emptyValueFiredOnNumberInput = this.value && this.isTypeNumber && !inputDomRef.value;
    this._keepInnerValue = false;
    const allowedEventTypes = [
      "deleteWordBackward",
      "deleteWordForward",
      "deleteSoftLineBackward",
      "deleteSoftLineForward",
      "deleteEntireSoftLine",
      "deleteHardLineBackward",
      "deleteHardLineForward",
      "deleteByDrag",
      "deleteByCut",
      "deleteContent",
      "deleteContentBackward",
      "deleteContentForward",
      "historyUndo"
    ];
    this._shouldAutocomplete = !allowedEventTypes.includes(eventType) && !this.noTypeahead;
    if (e instanceof InputEvent) {
      const delimiterCase = this.isTypeNumber && (e.inputType === "deleteContentForward" || e.inputType === "deleteContentBackward") && !e.target.value.includes(".") && this.value.includes(".");
      const eNotationCase = emptyValueFiredOnNumberInput && e.data === "e";
      const minusRemovalCase = emptyValueFiredOnNumberInput && this.value.startsWith("-") && this.value.length === 2 && (e.inputType === "deleteContentForward" || e.inputType === "deleteContentBackward");
      if (delimiterCase || eNotationCase || minusRemovalCase) {
        this.value = e.target.value;
        this._keepInnerValue = true;
      }
    }
    if (e.target === inputDomRef) {
      this.focused = true;
      e.stopImmediatePropagation();
    }
    this.fireEventByAction(INPUT_ACTIONS.ACTION_ENTER, e);
    this.hasSuggestionItemSelected = false;
    this._isValueStateFocused = false;
    if (this.Suggestions) {
      this.Suggestions.updateSelectedItemPosition(-1);
    }
    this.isTyping = true;
  }
  _startsWithMatchingItems(str) {
    return StartsWith(str, this._selectableItems, "text");
  }
  _getFirstMatchingItem(current) {
    if (!this._flattenItems.length) {
      return;
    }
    const matchingItems = this._startsWithMatchingItems(current).filter((item) => !this._isGroupItem(item));
    if (matchingItems.length) {
      return matchingItems[0];
    }
  }
  _handleSelectionChange(e) {
    var _a2;
    (_a2 = this.Suggestions) == null ? void 0 : _a2.onItemPress(e);
  }
  _selectMatchingItem(item) {
    item.selected = true;
  }
  _handleTypeAhead(item) {
    const value = item.text ? item.text : "";
    this._innerValue = value;
    this.value = value;
    this._performTextSelection = true;
    this._shouldAutocomplete = false;
  }
  _handleResize() {
    this._inputWidth = this.offsetWidth;
  }
  _updateAssociatedLabelsTexts() {
    this._associatedLabelsTexts = getAssociatedLabelForTexts(this);
    this._accessibleLabelsRefTexts = getAllAccessibleNameRefTexts(this);
  }
  _closePicker() {
    this.open = false;
  }
  _afterOpenPicker() {
    if (isPhone()) {
      this.getInputDOMRef().focus();
    }
    this._handlePickerAfterOpen();
  }
  _afterClosePicker() {
    this.announceSelectedItem();
    if (isPhone()) {
      this.blur();
      this.focused = false;
    }
    if (this._changeToBeFired && !this._isChangeTriggeredBySuggestion) {
      this.previousValue = this.value;
      this.fireDecoratorEvent(INPUT_EVENTS.CHANGE);
    } else {
      this._isChangeTriggeredBySuggestion = false;
    }
    this._changeToBeFired = false;
    this.open = false;
    this.isTyping = false;
    if (this.hasSuggestionItemSelected) {
      this.focus();
    }
    this._handlePickerAfterClose();
  }
  _handlePickerAfterOpen() {
    this.fireDecoratorEvent("open");
  }
  _handlePickerAfterClose() {
    var _a2;
    (_a2 = this.Suggestions) == null ? void 0 : _a2._onClose();
    this.fireDecoratorEvent("close");
  }
  openValueStatePopover() {
    this.valueStateOpen = true;
  }
  closeValueStatePopover() {
    this.valueStateOpen = false;
  }
  _handleValueStatePopoverAfterClose() {
    this.valueStateOpen = false;
  }
  _getValueStatePopover() {
    return this.shadowRoot.querySelector("[ui5-popover]");
  }
  enableSuggestions() {
    if (this.Suggestions) {
      return;
    }
    const setup = (Suggestions) => {
      Suggestions.i18nBundle = Input_1.i18nBundle;
      this.Suggestions = new Suggestions(this, "suggestionItems", true, false);
    };
    if (Input_1.SuggestionsClass) {
      setup(Input_1.SuggestionsClass);
    } else {
      import("./InputSuggestions-XD6C37JY.js").then((SuggestionsModule) => {
        setup(SuggestionsModule.default);
      });
    }
  }
  acceptSuggestion(item, keyboardUsed) {
    if (this._isGroupItem(item)) {
      return;
    }
    const value = this.typedInValue || this.value;
    const itemText = item.text || "";
    const fireChange = keyboardUsed ? this.valueBeforeItemSelection !== itemText : value !== itemText;
    this.hasSuggestionItemSelected = true;
    this.value = itemText;
    if (fireChange && this.previousValue !== itemText) {
      this.valueBeforeItemSelection = itemText;
      this.lastConfirmedValue = itemText;
      this._performTextSelection = true;
      this.fireDecoratorEvent(INPUT_EVENTS.CHANGE);
      this._isChangeTriggeredBySuggestion = true;
      this.typedInValue = this.value;
      this.previousValue = this.value;
    }
    this.valueBeforeSelectionStart = "";
    this.isTyping = false;
    this.open = false;
  }
  /**
   * Updates the input value on item select.
   * @param item The item that is on select
   */
  updateValueOnSelect(item) {
    const itemValue = this._isGroupItem(item) ? this.valueBeforeSelectionStart : item.text;
    this.value = itemValue || "";
    this._performTextSelection = true;
  }
  fireEventByAction(action, e) {
    const valueBeforeInput = this.value;
    const inputRef = this.getInputDOMRefSync();
    if (this.disabled || this.readonly) {
      return;
    }
    const inputValue = this.getInputValue();
    const isUserInput = action === INPUT_ACTIONS.ACTION_ENTER;
    this.value = inputValue;
    this.typedInValue = inputValue;
    this.valueBeforeSelectionStart = inputValue;
    const valueAfterInput = this.value;
    if (isUserInput) {
      const inputType = e.inputType || "";
      const prevented = !this.fireDecoratorEvent(INPUT_EVENTS.INPUT, { inputType });
      if (prevented) {
        if (valueAfterInput === this.value) {
          this.value = valueBeforeInput;
        }
        inputRef && (inputRef.value = this.value);
      }
      this.fireResetSelectionChange();
    }
  }
  getInputValue() {
    const domRef = this.getDomRef();
    if (domRef) {
      return this.getInputDOMRef().value;
    }
    return "";
  }
  getInputDOMRef() {
    if (isPhone() && this.Suggestions) {
      return this.Suggestions._getPicker().querySelector(".ui5-input-inner-phone");
    }
    return this.nativeInput;
  }
  getInputDOMRefSync() {
    var _a2;
    if (isPhone() && ((_a2 = this.Suggestions) == null ? void 0 : _a2._getPicker())) {
      return this.Suggestions._getPicker().querySelector(".ui5-input-inner-phone").shadowRoot.querySelector("input");
    }
    return this.nativeInput;
  }
  /**
   * Returns a reference to the native input element
   * @protected
   */
  get nativeInput() {
    const domRef = this.getDomRef();
    return domRef ? domRef.querySelector(`input`) : null;
  }
  get nativeInputWidth() {
    return this.nativeInput ? this.nativeInput.offsetWidth : 0;
  }
  /**
   * Returns if the suggestions popover is scrollable.
   * The method returns `Promise` that resolves to true,
   * if the popup is scrollable and false otherwise.
   */
  isSuggestionsScrollable() {
    var _a2;
    if (!this.Suggestions) {
      return Promise.resolve(false);
    }
    return (_a2 = this.Suggestions) == null ? void 0 : _a2._isScrollable();
  }
  onItemMouseDown(e) {
    e.preventDefault();
  }
  onItemSelected(suggestionItem, keyboardUsed) {
    const shouldFireSelectionChange = !keyboardUsed && !(suggestionItem == null ? void 0 : suggestionItem.focused) && this.valueBeforeItemSelection !== suggestionItem.text;
    if (shouldFireSelectionChange) {
      this.fireSelectionChange(suggestionItem, true);
    }
    this.acceptSuggestion(suggestionItem, keyboardUsed);
  }
  _handleSuggestionItemPress(e) {
    var _a2;
    (_a2 = this.Suggestions) == null ? void 0 : _a2.onItemPress(e);
  }
  onItemSelect(item) {
    this.valueBeforeItemSelection = this.value;
    this.updateValueOnSelect(item);
    this.announceSelectedItem();
    this.fireSelectionChange(item, true);
  }
  get _flattenItems() {
    return this.getSlottedNodes("suggestionItems").flatMap((item) => {
      return this._isGroupItem(item) ? [item, ...item.items] : [item];
    });
  }
  get _selectableItems() {
    return this._flattenItems.filter((item) => !this._isGroupItem(item));
  }
  get valueStateTypeMappings() {
    return {
      "Positive": Input_1.i18nBundle.getText(VALUE_STATE_TYPE_SUCCESS),
      "Information": Input_1.i18nBundle.getText(VALUE_STATE_TYPE_INFORMATION),
      "Negative": Input_1.i18nBundle.getText(VALUE_STATE_TYPE_ERROR),
      "Critical": Input_1.i18nBundle.getText(VALUE_STATE_TYPE_WARNING)
    };
  }
  valueStateTextMappings() {
    return {
      "Positive": Input_1.i18nBundle.getText(VALUE_STATE_SUCCESS),
      "Information": Input_1.i18nBundle.getText(VALUE_STATE_INFORMATION),
      "Negative": Input_1.i18nBundle.getText(VALUE_STATE_ERROR),
      "Critical": Input_1.i18nBundle.getText(VALUE_STATE_WARNING)
    };
  }
  announceSelectedItem() {
    const invisibleText = this.shadowRoot.querySelector(`#selectionText`);
    if (invisibleText) {
      invisibleText.textContent = this.itemSelectionAnnounce;
    }
  }
  fireSelectionChange(item, isValueFromSuggestions) {
    if (this.Suggestions) {
      this.fireDecoratorEvent(INPUT_EVENTS.SELECTION_CHANGE, { item });
      this._isLatestValueFromSuggestions = isValueFromSuggestions;
    }
  }
  fireResetSelectionChange() {
    if (this._isLatestValueFromSuggestions) {
      this.fireSelectionChange(null, false);
    }
  }
  get _readonly() {
    return this.readonly && !this.disabled;
  }
  get _headerTitleText() {
    return Input_1.i18nBundle.getText(INPUT_SUGGESTIONS_TITLE);
  }
  get clearIconAccessibleName() {
    return Input_1.i18nBundle.getText(INPUT_CLEAR_ICON_ACC_NAME);
  }
  get _popupLabel() {
    return Input_1.i18nBundle.getText(INPUT_AVALIABLE_VALUES);
  }
  get inputType() {
    return this.type;
  }
  get inputNativeType() {
    return this.type.toLowerCase();
  }
  get isTypeNumber() {
    return this.type === InputType_default.Number;
  }
  get suggestionsTextId() {
    return this.showSuggestions ? `suggestionsText` : "";
  }
  get valueStateTextId() {
    return this.hasValueState ? `valueStateDesc` : "";
  }
  get accInfo() {
    const ariaHasPopupDefault = this.showSuggestions ? "dialog" : void 0;
    const ariaAutoCompleteDefault = this.showSuggestions ? "list" : void 0;
    const ariaDescribedBy = this._inputAccInfo.ariaDescribedBy ? `${this.suggestionsTextId} ${this.valueStateTextId} ${this._inputAccInfo.ariaDescribedBy}`.trim() : `${this.suggestionsTextId} ${this.valueStateTextId}`.trim();
    return {
      "ariaRoledescription": this._inputAccInfo && (this._inputAccInfo.ariaRoledescription || void 0),
      "ariaDescribedBy": ariaDescribedBy || void 0,
      "ariaInvalid": this.valueState === ValueState_default.Negative ? true : void 0,
      "ariaHasPopup": this._inputAccInfo.ariaHasPopup ? this._inputAccInfo.ariaHasPopup : ariaHasPopupDefault,
      "ariaAutoComplete": this._inputAccInfo.ariaAutoComplete ? this._inputAccInfo.ariaAutoComplete : ariaAutoCompleteDefault,
      "role": this._inputAccInfo && this._inputAccInfo.role,
      "ariaControls": this._inputAccInfo && this._inputAccInfo.ariaControls,
      "ariaExpanded": this._inputAccInfo && this._inputAccInfo.ariaExpanded,
      "ariaDescription": this._inputAccInfo && this._inputAccInfo.ariaDescription,
      "ariaLabel": this._inputAccInfo && this._inputAccInfo.ariaLabel || this._accessibleLabelsRefTexts || this.accessibleName || this._associatedLabelsTexts || void 0
    };
  }
  get nativeInputAttributes() {
    return {
      "min": this.isTypeNumber ? this._nativeInputAttributes.min : void 0,
      "max": this.isTypeNumber ? this._nativeInputAttributes.max : void 0,
      "step": this.isTypeNumber ? this._nativeInputAttributes.step || "any" : void 0
    };
  }
  get ariaValueStateHiddenText() {
    if (!this.hasValueState) {
      return;
    }
    const valueState = this.valueState !== ValueState_default.None ? this.valueStateTypeMappings[this.valueState] : "";
    if (this.shouldDisplayDefaultValueStateMessage) {
      return this.valueStateText ? `${valueState} ${this.valueStateText}` : valueState;
    }
    return `${valueState}`.concat(" ", this.valueStateMessage.map((el) => el.textContent).join(" "));
  }
  get itemSelectionAnnounce() {
    return this.Suggestions ? this.Suggestions.itemSelectionAnnounce : "";
  }
  get iconsCount() {
    const slottedIconsCount = this.icon ? this.icon.length : 0;
    const clearIconCount = Number(this._effectiveShowClearIcon) ?? 0;
    return slottedIconsCount + clearIconCount;
  }
  get classes() {
    return {
      popover: {
        "ui5-suggestions-popover": this.showSuggestions,
        "ui5-popover-with-value-state-header-phone": this._isPhone && this.showSuggestions && this.hasValueStateMessage,
        "ui5-popover-with-value-state-header": !this._isPhone && this.showSuggestions && this.hasValueStateMessage
      },
      popoverValueState: {
        "ui5-valuestatemessage-root": true,
        "ui5-valuestatemessage-header": true,
        "ui5-valuestatemessage--success": this.valueState === ValueState_default.Positive,
        "ui5-valuestatemessage--error": this.valueState === ValueState_default.Negative,
        "ui5-valuestatemessage--warning": this.valueState === ValueState_default.Critical,
        "ui5-valuestatemessage--information": this.valueState === ValueState_default.Information
      }
    };
  }
  get styles() {
    const remSizeIxPx = parseInt(getComputedStyle(document.documentElement).fontSize);
    const stylesObject = {
      popoverHeader: {
        "max-width": this._inputWidth ? `${this._inputWidth}px` : ""
      },
      suggestionPopoverHeader: {
        "display": this._listWidth === 0 ? "none" : "inline-block",
        "width": this._listWidth ? `${this._listWidth}px` : ""
      },
      suggestionsPopover: {
        "min-width": this._inputWidth ? `${this._inputWidth}px` : "",
        "max-width": this._inputWidth && this._inputWidth / remSizeIxPx > 40 ? `${this._inputWidth}px` : "40rem"
      },
      innerInput: {
        "padding": ""
      }
    };
    return stylesObject;
  }
  get suggestionSeparators() {
    return "None";
  }
  get shouldDisplayOnlyValueStateMessage() {
    return this.hasValueStateMessage && !this.readonly && !this.open && this.focused;
  }
  get shouldDisplayDefaultValueStateMessage() {
    return !this.valueStateMessage.length && this.hasValueStateMessage;
  }
  get hasValueState() {
    return this.valueState !== ValueState_default.None;
  }
  get hasValueStateMessage() {
    return this.hasValueState && this.valueState !== ValueState_default.Positive && (!this._inputIconFocused || !!(this._isPhone && this.Suggestions));
  }
  get valueStateText() {
    return this.valueState !== ValueState_default.None ? this.valueStateTextMappings()[this.valueState] : void 0;
  }
  get suggestionsText() {
    return Input_1.i18nBundle.getText(INPUT_SUGGESTIONS);
  }
  get availableSuggestionsCount() {
    var _a2;
    if (this.showSuggestions && (this.value || ((_a2 = this.Suggestions) == null ? void 0 : _a2.isOpened()))) {
      const nonGroupItems = this._selectableItems;
      switch (nonGroupItems.length) {
        case 0:
          return Input_1.i18nBundle.getText(INPUT_SUGGESTIONS_NO_HIT);
        case 1:
          return Input_1.i18nBundle.getText(INPUT_SUGGESTIONS_ONE_HIT);
        default:
          return Input_1.i18nBundle.getText(INPUT_SUGGESTIONS_MORE_HITS, nonGroupItems.length);
      }
    }
    return void 0;
  }
  get step() {
    return this.isTypeNumber ? "any" : void 0;
  }
  get _isPhone() {
    return isPhone();
  }
  get _isSuggestionsFocused() {
    var _a2;
    return !this.focused && ((_a2 = this.Suggestions) == null ? void 0 : _a2.isOpened());
  }
  /**
   * Returns the placeholder value.
   * @protected
   */
  get _placeholder() {
    return this.placeholder;
  }
  /**
   * This method is relevant for sap_horizon theme only
   */
  get _valueStateInputIcon() {
    const iconPerValueState = {
      Negative: `<path xmlns="http://www.w3.org/2000/svg" fill-rule="evenodd" clip-rule="evenodd" d="M10 20C4.47715 20 0 15.5228 0 10C0 4.47715 4.47715 0 10 0C15.5228 0 20 4.47715 20 10C20 15.5228 15.5228 20 10 20ZM7.70711 13.7071C7.31658 14.0976 6.68342 14.0976 6.29289 13.7071C5.90237 13.3166 5.90237 12.6834 6.29289 12.2929L8.58579 10L6.29289 7.70711C5.90237 7.31658 5.90237 6.68342 6.29289 6.29289C6.68342 5.90237 7.31658 5.90237 7.70711 6.29289L10 8.58579L12.2929 6.29289C12.6834 5.90237 13.3166 5.90237 13.7071 6.29289C14.0976 6.68342 14.0976 7.31658 13.7071 7.70711L11.4142 10L13.7071 12.2929C14.0976 12.6834 14.0976 13.3166 13.7071 13.7071C13.3166 14.0976 12.6834 14.0976 12.2929 13.7071L10 11.4142L7.70711 13.7071Z" fill="#EE3939"/>`,
      Critical: `<path xmlns="http://www.w3.org/2000/svg" fill-rule="evenodd" clip-rule="evenodd" d="M11.8619 0.49298C11.6823 0.187541 11.3544 0 11 0C10.6456 0 10.3177 0.187541 10.1381 0.49298L0.138066 17.493C-0.0438112 17.8022 -0.0461447 18.1851 0.13195 18.4965C0.310046 18.8079 0.641283 19 1 19H21C21.3587 19 21.69 18.8079 21.868 18.4965C22.0461 18.1851 22.0438 17.8022 21.8619 17.493L11.8619 0.49298ZM11 6C11.5523 6 12 6.44772 12 7V10C12 10.5523 11.5523 11 11 11C10.4477 11 10 10.5523 10 10V7C10 6.44772 10.4477 6 11 6ZM11 16C11.8284 16 12.5 15.3284 12.5 14.5C12.5 13.6716 11.8284 13 11 13C10.1716 13 9.5 13.6716 9.5 14.5C9.5 15.3284 10.1716 16 11 16Z" fill="#F58B00"/>`,
      Positive: `<path xmlns="http://www.w3.org/2000/svg" fill-rule="evenodd" clip-rule="evenodd" d="M0 10C0 15.5228 4.47715 20 10 20C15.5228 20 20 15.5228 20 10C20 4.47715 15.5228 0 10 0C4.47715 0 0 4.47715 0 10ZM14.7071 6.29289C14.3166 5.90237 13.6834 5.90237 13.2929 6.29289L8 11.5858L6.70711 10.2929C6.31658 9.90237 5.68342 9.90237 5.29289 10.2929C4.90237 10.6834 4.90237 11.3166 5.29289 11.7071L7.29289 13.7071C7.68342 14.0976 8.31658 14.0976 8.70711 13.7071L14.7071 7.70711C15.0976 7.31658 15.0976 6.68342 14.7071 6.29289Z" fill="#36A41D"/>`,
      Information: `<path xmlns="http://www.w3.org/2000/svg" fill-rule="evenodd" clip-rule="evenodd" d="M3 0C1.34315 0 0 1.34315 0 3V15C0 16.6569 1.34315 18 3 18H15C16.6569 18 18 16.6569 18 15V3C18 1.34315 16.6569 0 15 0H3ZM9 6.5C9.82843 6.5 10.5 5.82843 10.5 5C10.5 4.17157 9.82843 3.5 9 3.5C8.17157 3.5 7.5 4.17157 7.5 5C7.5 5.82843 8.17157 6.5 9 6.5ZM9 8.5C9.55228 8.5 10 8.94772 10 9.5V13.5C10 14.0523 9.55228 14.5 9 14.5C8.44771 14.5 8 14.0523 8 13.5V9.5C8 8.94772 8.44771 8.5 9 8.5Z" fill="#1B90FF"/>`
    };
    if (this.valueState !== ValueState_default.None) {
      return `
			<svg xmlns="http://www.w3.org/2000/svg" width="24" height="20" viewBox="0 0 20 20" fill="none">
				${iconPerValueState[this.valueState]};
			</svg>
			`;
    }
    return "";
  }
  get _valueStatePopoverHorizontalAlign() {
    return this.effectiveDir !== "rtl" ? "Start" : "End";
  }
  /**
   * This method is relevant for sap_horizon theme only
   */
  get _valueStateMessageInputIcon() {
    const iconPerValueState = {
      Negative: "error",
      Critical: "alert",
      Positive: "sys-enter-2",
      Information: "information"
    };
    return this.valueState !== ValueState_default.None ? iconPerValueState[this.valueState] : "";
  }
  /**
   * Returns the caret position inside the native input
   * @protected
   */
  getCaretPosition() {
    return getCaretPosition(this.nativeInput);
  }
  /**
   * Sets the caret to a certain position inside the native input
   * @protected
   */
  setCaretPosition(pos) {
    setCaretPosition(this.nativeInput, pos);
  }
  /**
   * Removes the fractional part of floating-point number.
   * @param value the numeric value of Input of type "Number"
   */
  removeFractionalPart(value) {
    if (value.includes(".")) {
      return value.slice(0, value.indexOf("."));
    }
    if (value.includes(",")) {
      return value.slice(0, value.indexOf(","));
    }
    return value;
  }
};
__decorate([
  property_default({ type: Boolean })
], Input.prototype, "disabled", void 0);
__decorate([
  property_default({ type: Boolean })
], Input.prototype, "highlight", void 0);
__decorate([
  property_default()
], Input.prototype, "placeholder", void 0);
__decorate([
  property_default({ type: Boolean })
], Input.prototype, "readonly", void 0);
__decorate([
  property_default({ type: Boolean })
], Input.prototype, "required", void 0);
__decorate([
  property_default({ type: Boolean })
], Input.prototype, "noTypeahead", void 0);
__decorate([
  property_default()
], Input.prototype, "type", void 0);
__decorate([
  property_default()
], Input.prototype, "value", void 0);
__decorate([
  property_default({ noAttribute: true })
], Input.prototype, "_innerValue", void 0);
__decorate([
  property_default()
], Input.prototype, "valueState", void 0);
__decorate([
  property_default()
], Input.prototype, "name", void 0);
__decorate([
  property_default({ type: Boolean })
], Input.prototype, "showSuggestions", void 0);
__decorate([
  property_default({ type: Number })
], Input.prototype, "maxlength", void 0);
__decorate([
  property_default()
], Input.prototype, "accessibleName", void 0);
__decorate([
  property_default()
], Input.prototype, "accessibleNameRef", void 0);
__decorate([
  property_default({ type: Boolean })
], Input.prototype, "showClearIcon", void 0);
__decorate([
  property_default({ type: Boolean })
], Input.prototype, "open", void 0);
__decorate([
  property_default({ type: Boolean })
], Input.prototype, "_effectiveShowClearIcon", void 0);
__decorate([
  property_default({ type: Boolean })
], Input.prototype, "focused", void 0);
__decorate([
  property_default({ type: Boolean })
], Input.prototype, "valueStateOpen", void 0);
__decorate([
  property_default({ type: Boolean })
], Input.prototype, "_isValueStateFocused", void 0);
__decorate([
  property_default({ type: Object })
], Input.prototype, "_inputAccInfo", void 0);
__decorate([
  property_default({ type: Object })
], Input.prototype, "_nativeInputAttributes", void 0);
__decorate([
  property_default({ type: Number })
], Input.prototype, "_inputWidth", void 0);
__decorate([
  property_default({ type: Number })
], Input.prototype, "_listWidth", void 0);
__decorate([
  property_default({ type: Boolean, noAttribute: true })
], Input.prototype, "_inputIconFocused", void 0);
__decorate([
  property_default({ noAttribute: true })
], Input.prototype, "_associatedLabelsTexts", void 0);
__decorate([
  property_default({ noAttribute: true })
], Input.prototype, "_accessibleLabelsRefTexts", void 0);
__decorate([
  property_default({ type: Object })
], Input.prototype, "Suggestions", void 0);
__decorate([
  slot_default({ type: HTMLElement, "default": true })
], Input.prototype, "suggestionItems", void 0);
__decorate([
  slot_default()
], Input.prototype, "icon", void 0);
__decorate([
  slot_default({
    type: HTMLElement,
    invalidateOnChildChange: true
  })
], Input.prototype, "valueStateMessage", void 0);
__decorate([
  i18n_default("@ui5/webcomponents")
], Input, "i18nBundle", void 0);
Input = Input_1 = __decorate([
  customElement_default({
    tag: "ui5-input",
    languageAware: true,
    formAssociated: true,
    renderer: JsxRenderer_default,
    template: InputTemplate,
    styles: [
      Input_css_default,
      ResponsivePopoverCommon_css_default,
      ValueStateMessage_css_default,
      Suggestions_css_default
    ]
  }),
  event_strict_default("change", {
    bubbles: true
  }),
  event_strict_default("input", {
    bubbles: true,
    cancelable: true
  }),
  event_strict_default("select", {
    bubbles: true
  }),
  event_strict_default("selection-change", {
    bubbles: true
  }),
  event_strict_default("type-ahead", {
    bubbles: true
  }),
  event_strict_default("suggestion-scroll", {
    bubbles: true
  }),
  event_strict_default("open", {
    bubbles: true
  }),
  event_strict_default("close")
], Input);
Input.define();
var Input_default = Input;

export {
  encodeXML_default,
  InputType_default,
  InputTemplate,
  StartsWithPerTerm,
  StartsWith,
  Filters_exports,
  ResponsivePopoverCommon_css_default,
  ValueStateMessage_css_default,
  Suggestions_css_default,
  Input_default
};
/*! Bundled license information:

lit-html/development/lit-html.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

lit-html/development/static.js:
  (**
   * @license
   * Copyright 2020 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

@ui5/webcomponents-base/dist/sap/base/strings/toHex.js:
  (*!
   * OpenUI5
   * (c) Copyright 2009-2024 SAP SE or an SAP affiliate company.
   * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
   *)

@ui5/webcomponents-base/dist/sap/base/security/encodeXML.js:
  (*!
   * OpenUI5
   * (c) Copyright 2009-2024 SAP SE or an SAP affiliate company.
   * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
   *)
*/
//# sourceMappingURL=chunk-LEMKDM4U.js.map
